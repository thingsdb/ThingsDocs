<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operators on ThingsDB documentation</title><link>https://docs.thingsdb.net/v0/operators/</link><description>Recent content in Operators on ThingsDB documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.thingsdb.net/v0/operators/index.xml" rel="self" type="application/rss+xml"/><item><title>Arithmetic operators</title><link>https://docs.thingsdb.net/v0/operators/arithmetic-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v0/operators/arithmetic-operators/</guid><description>Operator Description + Addition operator. - Subtraction operator. / Division operator * Multiplication operator. % Modulo operator. Division uses float division if either the numerator or denominator is of type float.
Arithmetic examples:
[ 5 + 2, 5 - 2, 5 / 2.0, 5 / 2, 5 * 2, 5 % 2, ]; Return value in JSON format</description></item><item><title>Assignments</title><link>https://docs.thingsdb.net/v0/operators/assignments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v0/operators/assignments/</guid><description>Assignments will generate an event.
Operator Description = Assignment operator. *= Multiplication assignment. /= Float division assignment. %= Modulo assignment. += Addition assignment. -= Subtraction assignment &amp;amp;= Bitwise AND assignment. ^= Bitwise XOR assignment. ` =`</description></item><item><title>Binary bitwise operators</title><link>https://docs.thingsdb.net/v0/operators/binary-bitwise-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v0/operators/binary-bitwise-operators/</guid><description>Can be used on integer values.
Operator Description &amp;amp; Bitwise AND, true if both a and b are 1. ` ` ^ Bitwise XOR, true if a and b are different. Binary bitwise operator examples:
[ 0b110 &amp;amp; 0b011, 0b110 | 0b011, 0b110 ^ 0b011, ]; Return value in JSON format
[ 2, 7, 5 ]</description></item><item><title>Conditional ternary operator</title><link>https://docs.thingsdb.net/v0/operators/conditional-ternary-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v0/operators/conditional-ternary-operator/</guid><description>The conditional operator returns one of two values based on the logical value of the condition.
Syntax: expression ? if-true : if-false
Conditional (ternary) operator examples:
2 &amp;gt; 1 ? 'two is greater than one' : 'two is less than one'; Return value in JSON format
&amp;#34;two is greater than one&amp;#34; It is possible to use block scopes for the if-true and if-false part for the conditional operator.</description></item><item><title>Logical operators</title><link>https://docs.thingsdb.net/v0/operators/logical-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v0/operators/logical-operators/</guid><description>Logical operators are generally used with bool values.
Operator Description &amp;amp;&amp;amp; Logical AND. ` As logical expressions are evaluated left to right, they are tested for possible &amp;ldquo;short-circuit&amp;rdquo; evaluation. This means that the evaluation of an expression is stopped when the outcome is determined. This applies in the following two cases:
expression_1 &amp;amp;&amp;amp; expression_2 : if expression_1 evaluates to false then expression_2 is not evaluated.</description></item><item><title>Precedence and associativity</title><link>https://docs.thingsdb.net/v0/operators/precedence-and-associativity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v0/operators/precedence-and-associativity/</guid><description>Symbol Type of operation Associativity () Expression parenthesis Left-to-right ! Not operator Right-to-left * / % Multiplication, Modulo, Division Left-to-right + - Add, Subtract Left-to-right &amp;amp; Bitwise AND Left-to-right ^ Bitwise XOR Left-to-right ` ` Bitwise OR == != &amp;lt;= &amp;gt;= &amp;lt; &amp;gt; Compare Left-to-right &amp;amp;&amp;amp; Logical AND Left-to-right ` ` ?</description></item></channel></rss>