<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ThingsDB API on ThingsDB documentation</title><link>https://docs.thingsdb.io/v1/thingsdb-api/</link><description>Recent content in ThingsDB API on ThingsDB documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.thingsdb.io/v1/thingsdb-api/index.xml" rel="self" type="application/rss+xml"/><item><title>collection_info</title><link>https://docs.thingsdb.io/v1/thingsdb-api/collection_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/collection_info/</guid><description>Returns information about a specific collection.
This function requires QUERY privileges on the requested collection, or CHANGE privileges on the @thingsdb scope.
This function does not generate a change.
Function collection_info(collection)
Arguments Argument Type Description collection str/int (required) Name or Id of the collection Return value Returns mpdata about the collection.
Example Returns information about collection stuff:
collection_info('stuff'); Example return value in JSON format</description></item><item><title>collections_info</title><link>https://docs.thingsdb.io/v1/thingsdb-api/collections_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/collections_info/</guid><description>Returns collection information about all collections in ThingsDB.
See the collection_info() function documentation for an example of the exposed collection information.
If the user has no CHANGE permissions on the @thingsdb scope, then only the collections where the user has at least QUERY privileges are included in the result.
This function does not generate a change.
Function collections_info()
Arguments None
Return value List with collection mpdata about all collections in ThingsDB.</description></item><item><title>del_collection</title><link>https://docs.thingsdb.io/v1/thingsdb-api/del_collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/del_collection/</guid><description>Delete a collection.
This function generates a change.
Function del_collection(name)
Arguments Argument Type Description name str (required) Name of the collection to delete. Return value Returns nil when successful. A lookup_err() is raised if the collection does not exist.
Example This code will delete collection stuff:
// Delete collection `stuff` del_collection('stuff');</description></item><item><title>del_expired</title><link>https://docs.thingsdb.io/v1/thingsdb-api/del_expired/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/del_expired/</guid><description>Delete all expired tokens.
This function requires GRANT privileges on the @thingsdb scope.
This function generates a change.
Function del_expired()
Arguments None
Return value Returns nil.
Example This code will delete all expired tokens:
// Delete all expired tokens del_expired();</description></item><item><title>del_module</title><link>https://docs.thingsdb.io/v1/thingsdb-api/del_module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/del_module/</guid><description>Delete a module. A SIGTERM signal will be send to the process for the module which might cancel running futures.
This function generates a change.
Function del_module(name)
Arguments Argument Type Description name str (required) Name of the module to delete. Return value Returns nil when successful.
Example This code will delete module DEMO:
// Delete module `DEMO` del_module('DEMO');</description></item><item><title>del_node</title><link>https://docs.thingsdb.io/v1/thingsdb-api/del_node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/del_node/</guid><description>This function can be used to delete a node from ThingsDB.
Before deleting a node, the node must be offline. As long is the node is active, you are not allowed to delete the node. See shutdown for shutting down a node by using a query.
This function generates a change.
Function del_node(node_id)
Arguments Argument Type Description node_id int (required) Id of the node to delete.</description></item><item><title>del_token</title><link>https://docs.thingsdb.io/v1/thingsdb-api/del_token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/del_token/</guid><description>Delete a token.
This function requires GRANT privileges on the @thingsdb scope unless the given token belongs to the logged on user. In the latter case, only CHANGE privileges are required.
This function generates a change.
Function del_token(key)
Arguments Argument Type Description key str (required) Token key to delete. Return value Returns nil when successful. A lookup_err() is raised if the token is not found.</description></item><item><title>del_user</title><link>https://docs.thingsdb.io/v1/thingsdb-api/del_user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/del_user/</guid><description>Delete a user. It is not possible to delete your own user account and a bad_data_err() will be raised in case you try to. Any tokens associated with the user will also be deleted.
This function requires GRANT privileges on the @thingsdb scope.
This function generates a change.
Function del_user(username)
Arguments Argument Type Description username str (required) Username of the user to delete.</description></item><item><title>deploy_module</title><link>https://docs.thingsdb.io/v1/thingsdb-api/deploy_module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/deploy_module/</guid><description>Deploy a module on all nodes. The module must be configured first, using the new_module() function. This function is used to write the module data (or plain python code) to the module. After deploying the code, the module will be restarted on every node.
Before deploying a module, it is strongly recommended to use a development environment before deploying the module into production.
This function generates a change.
Function deploy_module(name, data/new source)</description></item><item><title>grant</title><link>https://docs.thingsdb.io/v1/thingsdb-api/grant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/grant/</guid><description>Grant, collection or general, privileges to a user. Access to a user is provided by setting a bit mask to either the @node, @thingsdb or a @collection scope.
To use this function, at least CHANGE privileges on the @thingsdb scope and GRANT privileges on the target scope are required.
It is not possible to set privileges on a specific node scope. Therefore scope @node will apply to all nodes in ThingsDB.</description></item><item><title>has_collection</title><link>https://docs.thingsdb.io/v1/thingsdb-api/has_collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/has_collection/</guid><description>Determines if a collection exists in ThingsDB.
This function does not generate a change.
Function has_collection(collection)
Arguments Argument Type Description collection str/int (required) Collection name or Id to check. Return value Returns true if the collection exists and otherwise false.
Example This code shows an example use case of has_collection():
has_collection('stuff'); Return value in JSON format
true</description></item><item><title>has_module</title><link>https://docs.thingsdb.io/v1/thingsdb-api/has_module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/has_module/</guid><description>Determines if a module exists in ThingsDB. The scope restriction of the module has no impact on the result of this function.
This function does not generate a change.
Function has_module(name)
Arguments Argument Type Description name str (required) Module to check. Return value Returns true if the module exists and otherwise false.
Example This code shows an example use case of has_module():</description></item><item><title>has_node</title><link>https://docs.thingsdb.io/v1/thingsdb-api/has_node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/has_node/</guid><description>Determines if a node exists in ThingsDB.
This function does not generate a change.
Function has_node(id)
Arguments Argument Type Description id int (required) Node Id to check. Return value Returns true if a node with a given Id exists and otherwise false.
Example This code shows an example use case of has_node():
has_node(0); Return value in JSON format</description></item><item><title>has_token</title><link>https://docs.thingsdb.io/v1/thingsdb-api/has_token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/has_token/</guid><description>Determines if a token exists in ThingsDB.
This function requires GRANT privileges on the @thingsdb scope.
This function does not generate a change.
Function has_token(key)
Arguments Argument Type Description key str (required) Token key to check. Return value Returns true if the token exists and otherwise false.
Example This code shows an example use case of has_token():
has_token('XXXXXXXXXXXXXXXXXXXXXX'); Return value in JSON format</description></item><item><title>has_user</title><link>https://docs.thingsdb.io/v1/thingsdb-api/has_user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/has_user/</guid><description>Determines if a user exists in ThingsDB.
This function requires GRANT privileges on the @thingsdb scope.
This function does not generate a change.
Function has_user(username)
Arguments Argument Type Description username str (required) User to check. Return value Returns true if the user exists and otherwise false.
Example This code shows an example use case of has_user():
has_user('admin'); Return value in JSON format</description></item><item><title>module_info</title><link>https://docs.thingsdb.io/v1/thingsdb-api/module_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/module_info/</guid><description>Returns information about a specific module.
Value Description conf Configuration for the module. (Only visible when the user has CHANGE privileges in the @thingsdb scope) created_at Time Stamp when the module was created. file Module file name. name Name of the module. restarts Number of time the module is restarted. Manual restarts are excluded and will reset the counter to zero.</description></item><item><title>modules_info</title><link>https://docs.thingsdb.io/v1/thingsdb-api/modules_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/modules_info/</guid><description>Returns module information about all modules in ThingsDB.
See the module_info() function documentation for an example of the exposed module information.
This function does not generate a change.
Function modules_info()
Arguments None
Return value List with modules mpdata about all modules in ThingsDB.</description></item><item><title>new_collection</title><link>https://docs.thingsdb.io/v1/thingsdb-api/new_collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/new_collection/</guid><description>Create a new collection.
After creating a new collection, you might want to configure a different time-zone and/or deep value. The initial deep value and time zone are inherited from the @thingsdb scope. See set_time_zone() and set_default_deep().
This function generates a change.
Function new_collection(name)
Arguments Argument Type Description name str (required) Name of the new collection. The user who has created the collection will automatically receive full access rights to the new collection.</description></item><item><title>new_module</title><link>https://docs.thingsdb.io/v1/thingsdb-api/new_module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/new_module/</guid><description>Create (and configure) a new module for ThingsDB.
After a module is created, a future() is required to use the new module.
ThingsDB has special support for Python modules which will be activated if you module file ends with .py. In this case the Python interpreter will be used to start the module.
By default a module can be used in all scopes. It is possible however, to restrict the usage by using set_module_scope(.</description></item><item><title>new_node</title><link>https://docs.thingsdb.io/v1/thingsdb-api/new_node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/new_node/</guid><description>Adds a new node to ThingsDB. Nodes are used for scaling and high availability.
Before using this command, make sure another node is started and waiting for a join. This can be done by starting thingsdb with the --secret argument, for example:
thingsdb --secret &amp;#34;my-one-time-secret&amp;#34; Next, you will see something like this:
Waiting for an invite from a node to join ThingsDB... You can use the following query to add this node: new_node(&amp;#39;my-one-time-secret&amp;#39;, &amp;#39;node.</description></item><item><title>new_token</title><link>https://docs.thingsdb.io/v1/thingsdb-api/new_token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/new_token/</guid><description>Adds a new token for a given user. An optional expiration time may be given; after this time the token cannot be used anymore. Use del_expired to cleanup expired tokens. The expiration time may be given as a datetime or timeval type.
Expiration dates in the past are not allowed an will raise a bad_data_err() error.
It is also possible to set a description for the token which can be used to identify the token.</description></item><item><title>new_user</title><link>https://docs.thingsdb.io/v1/thingsdb-api/new_user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/new_user/</guid><description>Creates a new user to ThingsDB. The new user is created without a password, token and access privileges. You probably want to set a password or add a new token, and assign some privileges using grant(&amp;hellip;).
This function requires GRANT privileges on the @thingsdb scope.
This function generates a change.
Function new_user(user)
Arguments Argument Type Description user str (required) Username, between 1 and 128 graphical characters.</description></item><item><title>refresh_module</title><link>https://docs.thingsdb.io/v1/thingsdb-api/refresh_module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/refresh_module/</guid><description>Refresh module first stops the module (if running), next if will check for an update and performs the update if required. When finished, it will start the module again.
This function generates a change.
Function refresh_module(name)
Arguments Argument Type Description name str (required) Name of the module to refresh. Return value Returns nil. You might want to use module_info(..) to check if the module is successfully running.</description></item><item><title>rename_collection</title><link>https://docs.thingsdb.io/v1/thingsdb-api/rename_collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/rename_collection/</guid><description>Rename a collection.
This function generates a change.
Function rename_collection(current_name, new_name)
Arguments Argument Type Description current_name str (required) Current collection name. new_name str (required) New name for the collection. Return value Returns nil when successful.</description></item><item><title>rename_module</title><link>https://docs.thingsdb.io/v1/thingsdb-api/rename_module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/rename_module/</guid><description>Rename a module.
This function generates a change.
Function rename_module(current_name, new_name)
Arguments Argument Type Description current_name str (required) Current module name. new_name str (required) New name for the module. Return value Returns nil when successful.</description></item><item><title>rename_user</title><link>https://docs.thingsdb.io/v1/thingsdb-api/rename_user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/rename_user/</guid><description>Rename a user.
This function requires GRANT privileges on the @thingsdb scope.
This function generates a change.
Function rename_user(current_name, new_name)
Arguments Argument Type Description current_name str (required) Current user name. new_name str (required) New name for the user. Return value Returns nil when successful.</description></item><item><title>restore</title><link>https://docs.thingsdb.io/v1/thingsdb-api/restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/restore/</guid><description>Restore from a backup file created with the new_backup function.
Before using this function the following list of requirements must be must be fulfilled:
The user performing the restore must have FULL privileges on the@thingsdb scope. No collections may exists. Use collections_info() and del_collection(..) to check and remove existing collections. No modules may exists. Use modules_info() and del_module(..) to check and remove existing modules. No tasks may exists in the @thingsdb scope.</description></item><item><title>revoke</title><link>https://docs.thingsdb.io/v1/thingsdb-api/revoke/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/revoke/</guid><description>Revoke, collection or general, privileges from a user. See grant for more information on how access privileges can be set for a user.
To use this function, at least CHANGE privileges on the @thingsdb scope and GRANT privileges on the target scope are required.
This function generates a change.
Function revoke(target, user, mask)
Arguments Argument Type Description target int/raw Can be either the @node, @thingsdb, or a @collection scope.</description></item><item><title>set_default_deep</title><link>https://docs.thingsdb.io/v1/thingsdb-api/set_default_deep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/set_default_deep/</guid><description>The deep value determines how many levels of data are returned by a query. Only things count towards this value. See deep() for more info about the deep value.
The default deep value for the @node and @thingsdb scopes has been set to 1. Collections will inherit the deep value from the @thingsdb scope so they also have 1 as their default unless the @thingsdb scope is changed.
This function can be used to change the deep value for a scope.</description></item><item><title>set_module_conf</title><link>https://docs.thingsdb.io/v1/thingsdb-api/set_module_conf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/set_module_conf/</guid><description>Change the module configuration. This will (re-send) the module configuration to the module. If the module was not started, ThingsDB will also auto-load the module and send the configuration. Any Value is accepted as config but value nil will not be considered as a configuration and thus will not be send to the module.
This function generates a change.
Function set_module_conf(name, configuration)
Arguments Argument Type Description name str (required) Name of the module.</description></item><item><title>set_module_scope</title><link>https://docs.thingsdb.io/v1/thingsdb-api/set_module_scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/set_module_scope/</guid><description>Modules can be restricted for usage in a single scope. This can be a @collection:.. scope, but also a @node or @thingsdb scope. This function can be used to change the module scope. When the scope is set to nil, the module can be used in any scope.
This function generates a change.
Function set_module_scope(name, scope)
Arguments Argument Type Description name str (required) Name of the module.</description></item><item><title>set_password</title><link>https://docs.thingsdb.io/v1/thingsdb-api/set_password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/set_password/</guid><description>Change a user&amp;rsquo;s password. This function can also be used to remove an existing password by using nil as the new password.
Passwords must contain 1 to 128 printable characters.
This function requires GRANT privileges on the @thingsdb scope when a username other then the logged in user is given as argument. For the currently logged in user, CHANGE privileges on the @thingsdb scope are sufficient.
This function generates a change.</description></item><item><title>set_time_zone</title><link>https://docs.thingsdb.io/v1/thingsdb-api/set_time_zone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/set_time_zone/</guid><description>The default time zone for the @node and @thingsdb scopes has been set to UTC and collections will inherit the time zone from the @thingsdb scope so they also have UTC as their default as long as the @thingsdb scope is not changed. This function can be used to change the time zone for a scope.
Be careful with changing the time zone as this changes the behavior for functions like datetime(.</description></item><item><title>user_info</title><link>https://docs.thingsdb.io/v1/thingsdb-api/user_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/user_info/</guid><description>Returns information about a user. If no argument is given, this function will return information about the currently logged in user.
This function requires GRANT privileges on the @thingsdb scope when a username other then the logged in user is given as argument. For the currently logged in user, QUERY privileges on the @thingsdb scope are sufficient.
This function does not generate a change.
Function user_info([username])
Arguments Argument Type Description username str (optional) Name of the user Return value Returns mpdata about the user.</description></item><item><title>users_info</title><link>https://docs.thingsdb.io/v1/thingsdb-api/users_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/thingsdb-api/users_info/</guid><description>Returns user information about all users in ThingsDB.
See the user_info() function documentation for an example of the exposed user information.
This function requires GRANT privileges on the @thingdb scope since it exposes user access and token information.
This function does not generate a change.
Function users_info()
Arguments None
Return value List with user mpdata about all users in ThingsDB.</description></item></channel></rss>