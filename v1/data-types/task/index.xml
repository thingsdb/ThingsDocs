<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>task on ThingsDB documentation</title><link>https://docs.thingsdb.net/v1/data-types/task/</link><description>Recent content in task on ThingsDB documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.thingsdb.net/v1/data-types/task/index.xml" rel="self" type="application/rss+xml"/><item><title>again_at</title><link>https://docs.thingsdb.net/v1/data-types/task/again_at/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/again_at/</guid><description>Re-schedules the task to a new date/time. The task will run again at the new date/time, even if the task returns with an error.
It is only possible to use again_at within the callback of the parent task. If may however be used within a future or other closure, as long as this closure is nested within the tasks callback.
This function generates a change.
Function task.again_at(start)
Arguments Argument Type Description start datetime (required) Date/time when the task should start again.</description></item><item><title>again_in</title><link>https://docs.thingsdb.net/v1/data-types/task/again_in/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/again_in/</guid><description>Re-schedules the task to a new date/time. The task will run again at the new date/time, even if the task returns with an error.
It is only possible to use again_at within the callback of the parent task. If may however be used within a future or other closure, as long as this closure is nested within the tasks callback.
This function generates a change.
Function task.again_in(unit, num)
Arguments Argument Type Description unit str (required) One of years, months, weeks, days, hours, minutes or seconds.</description></item><item><title>args</title><link>https://docs.thingsdb.net/v1/data-types/task/args/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/args/</guid><description>Get task arguments as a new list. As this function returns a new list, making changes to this list does not affect the task arguments.
This function does not generate a change.
Function task.args()
Arguments None
Return value Returns a new list with arguments.
Example This code will will be called every minute for 10 times and then the task will be removed.
t = task( datetime().move('days', 1), |task, a, b| { .</description></item><item><title>at</title><link>https://docs.thingsdb.net/v1/data-types/task/at/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/at/</guid><description>Get the scheduled start time of a task or nil if the task is not scheduled.
This function does not generate a change.
Function task.at()
Arguments None
Return value Returns the scheduled start time of a task or nil if the task is not scheduled.
Example Example usage task.at():
t = task(datetime('2022-01-01'), ||log('Dummy task')); t.at(); Return value in JSON format
&amp;#34;2022-01-01T00:00:00Z&amp;#34;</description></item><item><title>err</title><link>https://docs.thingsdb.net/v1/data-types/task/err/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/err/</guid><description>When a task as failed with an error, the error is stored on the task and the task will not be removed automatically. With this function you may get the error to view and/or debug the problem.
This function does not generate a change.
Function task.err()
Arguments None
Return value Returns the error when a task has failed or nil if the task is empty or without error.
Example Example usage task.</description></item><item><title>cancel</title><link>https://docs.thingsdb.net/v1/data-types/task/cancel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/cancel/</guid><description>Cancel a task. Using this function sets the task error to cancelled_err and the task will not be executed. This function differs from del() as it will not remove the task.
This function generates a change.
Function task.cancel()
Arguments None
Return value Returns nil.
Example Example usage task.cancel():
t = task(datetime(), ||log('Dummy task')); t.cancel(); // cancel the task before it can start Return value in JSON format</description></item><item><title>closure</title><link>https://docs.thingsdb.net/v1/data-types/task/closure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/closure/</guid><description>Get the closure of a task.
This function does not generate a change.
Function task.closure()
Arguments None
Return value Returns the closure of the task.
Example Example usage task.closure():
t = task(datetime(), ||log('Dummy task')); t.closure(); Return value in JSON format
&amp;#34;||log(&amp;#39;Dummy task&amp;#39;)&amp;#34;</description></item><item><title>del</title><link>https://docs.thingsdb.net/v1/data-types/task/del/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/del/</guid><description>Delete a task. After calling this function, the task will be removed from ThingsDB. If there are references to this task, then those references will no longer contain the original task but an empty task instead.
This function generates a change.
Function task.del()
Arguments None
Return value Returns nil.
Example Example usage task.del():
t = task(datetime(), ||log('Dummy task')); t.del(); // delete the task before it can start Return value in JSON format</description></item><item><title>id</title><link>https://docs.thingsdb.net/v1/data-types/task/id/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/id/</guid><description>Returns the id of a task or nil if the task is removed (empty).
Notice that every task will be stored, thus all new tasks will get an Id. Only when a task is successfully finished or removed using del(), the task will be empty and therefore the Id will be nil.
This function does not generate a change.
Function task.id()
Arguments None
Return value Returns id of a task or nil if the task is removed (empty).</description></item><item><title>owner</title><link>https://docs.thingsdb.net/v1/data-types/task/owner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/owner/</guid><description>Get the owner of the the task as string value.
This function does not generate a change.
Function task.owner()
Arguments None
Return value Returns the name of the owner from the task.
Example Example code to get the owner of a task:
t = task(datetime(), ||nil); t.owner(); // Returns the owner of the task Return value in JSON format
&amp;#34;admin&amp;#34;</description></item><item><title>set_args</title><link>https://docs.thingsdb.net/v1/data-types/task/set_args/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/set_args/</guid><description>Set task arguments.
If less than the required arguments are given, then the remaining arguments will be set using nil. A num_arguments_err() is raised if the task too much arguments are used.
When the task is created in the @thingsdb scope, only (some) immutable types like int, float, str etc. can be used as argument values.
This function generates a change.
Function task.set_args(args)
Arguments Argument Type Description args list (required) List with task arguments.</description></item><item><title>set_closure</title><link>https://docs.thingsdb.net/v1/data-types/task/set_closure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/set_closure/</guid><description>Change the closure to execute. Obsolete closure arguments will be removed when the new closure accepts less arguments than the previous closure. If the new closure accepts more arguments, the argument list will be extended with nil values.
This function generates a change.
Function task.set_closure(code)
Arguments Argument Type Description code closure (required) New closure to attach to the task. Return value Returns nil when successful.</description></item><item><title>set_owner</title><link>https://docs.thingsdb.net/v1/data-types/task/set_owner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/data-types/task/set_owner/</guid><description>Change the owner of a task. The new owner must have at least CHANGE permissions on scope where the task is created.
Changing the owner is useful if you plan to remove an existing user as removing a user will also delete the tasks of the user.
This function generates a change.
Function task.set_owner(name)
Arguments Argument Type Description name str (required) Name of the new owner.</description></item></channel></rss>