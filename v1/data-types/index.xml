<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Types on ThingsDB documentation</title><link>https://docs.thingsdb.io/v1/data-types/</link><description>Recent content in Data Types on ThingsDB documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.thingsdb.io/v1/data-types/index.xml" rel="self" type="application/rss+xml"/><item><title>bool</title><link>https://docs.thingsdb.io/v1/data-types/bool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/data-types/bool/</guid><description>Booleans are either true or false. Other types can convert to bool by using the ! (not) operator or the bool function.
The bool() documentation contains a helpful example table to explain how different types are converted to bool.
This code creates a bool property is_the_earth_flat to collection stuff:
.is_the_earth_flat = !true; Related functions Function Description bool Convert a value into type bool.</description></item><item><title>float</title><link>https://docs.thingsdb.io/v1/data-types/float/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/data-types/float/</guid><description>ThingsDB uses 64bit to store float values and has support for the e notation and special float values like inf, -inf and nan.
Useful functions Function Description float return a float type for a given value. is_float check if the given value is of the float type. is_inf check if the given value is infinite. is_nan check if the given value is not-a-number.</description></item><item><title>nil</title><link>https://docs.thingsdb.io/v1/data-types/nil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/data-types/nil/</guid><description>Probably the most simple type, it can be used as no value.
It might be convenient to use nil as the last statement in a query to prevent returning data which is not required. See the code example.
This code uses nil to prevent returning unused data:
my_array = [1, 2, 3, 42]; nil; /* without nil, the array above would be returned */ Return value in JSON format</description></item><item><title>timeval</title><link>https://docs.thingsdb.io/v1/data-types/timeval/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/data-types/timeval/</guid><description>Type timeval is exactly the same as type datetime. The only difference is the default return. The return value of a timeval type is the value as a UNIX time stamp, while type datetime returns with the time as a string in ISO8601 format.
Why type timeval? It is possible to return a datetime as int(datetime) to get the UNIX time stamp, so why use timeval? It is often easier to work with time stamps then with time as string values.</description></item><item><title>tuple</title><link>https://docs.thingsdb.io/v1/data-types/tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.io/v1/data-types/tuple/</guid><description>All nested arrays are immutable and thus tuples.
list = []; list.push(['this list will be nested and therefore convert to a tuple']); // Check that the first item in `list` is indeed a `tuple` assert(is_tuple(list[0])); // Check that the `tuple` is indeed immutable assert(is_err(try(list[0].push('cannot be added to a tuple')))); A tuple only becomes a tuple when it is nested inside another tuple or list, which means the tuple will be immutable.</description></item></channel></rss>