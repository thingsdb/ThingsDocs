[{"uri":"https://docs.thingsdb.net/v1/getting-started/","title":"Getting started","tags":[],"description":"","content":"Getting started Try for free Get your own playground for free at https://thingsdb.net and continue reading at connect.\nOr.., build your own ThingsDB by cloning the GitHub project and follow the steps in the next paragraphs.\nDocker images Docker images are available at docker hub.\nSupported tags:\nthingsdb/node:VERSION (Minimal ThingsDB image based on Alpine Linux.)\nthingsdb/node:gcloud-VERSION (Includes Google Cloud Utilities so ThingsDB can created backups in the Google Cloud.)\nthingsdb/node:full-VERSION (Based on a Debian image with Google Cloud Utilities, Python3 and py-timod installed.)\nthingsdb/node:latest (Latest ThingsDB build from the master branch using a minimal Alpine Linux base image)\nRun ThingsDB in GKE (Google Kubernetes Engine) The following link will explain how to deploy ThingsDB in GKE (Google Kubernetes Engine):\nhttps://github.com/thingsdb/ThingsDB/tree/master/gke#readme\n"},{"uri":"https://docs.thingsdb.net/v1/getting-started/build-from-source/","title":"Build from source","tags":[],"description":"","content":"Install the following dependencies:\n libuv1 libpcre2 libyajl libcurl libcleri (\u0026gt;=0.12.2)  When using Debian/Ubuntu; libuv1, libpcre2, libyajl and libcurl can be installed using apt:\nsudo apt-get install -y \\  libuv1-dev \\  libpcre2-dev \\  libyajl-dev \\  libcurl4-nss-dev \\ At least version 0.12.x for library libcleri-dev is required.\ngit clone https://github.com/transceptor-technology/libcleri.git cd libcleri/Release make sudo make install Next, clone the project\ngit clone https://github.com/thingsdb/ThingsDB.git cd ThingsDB/Release make clean \u0026amp;\u0026amp; make You might want to create a symlink like this:\nsudo ln -s ~/ThingsDB/Release/thingsdb /usr/local/bin/thingsdb "},{"uri":"https://docs.thingsdb.net/v1/getting-started/configuration/","title":"Configuration","tags":[],"description":"","content":"ThingsDB can start with a configuration file and/or with environment variables. However be aware that the environment variables will overwrite the configuration file settings if both apply to the same setting.\n   Variable Default Description     THINGSDB_BIND_CLIENT_ADDR 127.0.0.1 Bind client connections to this address. This variable both allows an IPv4 address like 0.0.0.0 or IPv6 like ::.   THINGSDB_BIND_NODE_ADDR 127.0.0.1 Bind node connections to this address. This variable both allows an IPv4 address like 0.0.0.0 or IPv6 like ::.   THINGSDB_CACHE_EXPIRATION_TIME 900 Cached queries which are not used within this expiration time (in seconds) will be removed from the cache while the node is in away mode. A value of 0 will disable the query cache.   THINGSDB_GCLOUD_KEY_FILE disabled Service Authentication file (e.g service_account.json) used for creating backups in Google Cloud Storage. Support for Google Cloud Storage will be disabled if the value is not configured. Note that gcloud and gsutil must be installed to use this service.   THINGSDB_HTTP_API_PORT disabled TCP port for listening to HTTP API calls.   THINGSDB_HTTP_STATUS_PORT disabled TCP port for listening to health and readiness checks.   THINGSDB_IP_SUPPORT ALL Listen to IPv4 (IPV4ONLY), IPv6 (IPV6ONLY) or both (ALL) addresses.   THINGSDB_LISTEN_CLIENT_PORT 9200 Listen on this TCP port for client socket connections.   THINGSDB_LISTEN_NODE_PORT 9210 Listen on this TCP port for node connections.   THINGSDB_MODULES_PATH depends Path where ThingsDB modules are stored. The default location depends on the user who is running ThingsDB. (/usr/lib/thingsdb-modules for root and ~/.thingsdb-modules/ for a normal user).   THINGSDB_NODE_NAME hostname ThingsDB will publish itself to other nodes using this node name.   THINGSDB_PIPE_CLIENT_NAME disabled Named PIPE for client connections. Support for client PIPE connections will be disabled if the value is not configured.   THINGSDB_PYTHON_INTERPRETER python Interpreter used for running *.py module files (may also be set to an absolute path like /usr/bin/python). An informational message will be logged if the Python interpreter is not found when starting ThingsDB.   THINGSDB_QUERY_DURATION_ERROR disabled Log an error message when a query takes more than X second(s) (accepts a floating point value like 1.5).   THINGSDB_QUERY_DURATION_WARN disabled Log a warning message when a query takes more than X second(s) (accepts a floating point value like 1.5).   THINGSDB_RESULT_SIZE_LIMIT 20971520 (20 MiB) Result size limit is checked when packing properties for a thing. If, at the check moment, the packed data size exceeds the limit, packing stops and an RESULT_TOO_LARGE error will be returned. This limit is set in bytes and is used to prevent a huge amount of data, typically when a high deep value is used.   THINGSDB_STORAGE_PATH depends Location to store ThingsDB data. The default location depends on the user who is running ThingsDB. (/var/lib/thingsdb/ for root and ~/.thingsdb/ for a normal user).   THINGSDB_THRESHOLD_FULL_STORAGE 1000 Threshold for number of events before initiating a full database store.   THINGSDB_THRESHOLD_QUERY_CACHE 160 Queries with a length equal to, or greater than this threshold will be cached by the node.   THINGSDB_ZONE 0 Start node in this zone number. Zones are used for forwarding queries while in away mode.    "},{"uri":"https://docs.thingsdb.net/v1/getting-started/start-up-node/","title":"Start up node","tags":[],"description":"","content":" ThingsDB can work with a single node but is designed to work with at least two nodes but three nodes are preferred. Running on three nodes brings redundancy and ensures the database stays operational, even while you for example upgrade ThingsDB to a newer version.\n After building the source code and making a symlink, you can start your first node using the following command. You need to add the --init flag to initialize a new ThingsDB store.\nthingsdb --init Starting a second (or other) node needs a secret.\nthingsdb --secret second The secret is used when adding this node; see new_node documentation on how to add a second (or other) node to ThingsDB.\nFlag information    Flag Description     -h, --help Show the help message and exit.   -c, --config CONFIG Define which ThingsDB configuration file to use.   --deploy Auto set --init or --secret based on the THINGSDB_NODE_NAME and THINGSDB_NODE_SECRET environment variable. A use case is explained in the next paragraph.   --init Initialize a new ThingsDB store.   --force Force --init or --secret to remove existing data if exists.   --secret SECRET Set one time secret and wait for request to join.   --rebuild Rebuild the node (can only be used when having \u0026gt;1 nodes). A use case is explained in the next paragraph.   --forget-nodes Forget all nodes info and load ThingsDB with a single node. A use case is explained in the next paragraph.   -v, --version Show version information and exit.   -l, --log-level Set initial log level: debug, info, warning, error, critical.   --log-colorized Use colorized logging.   -y, --yes Confirm questions with yes.    Use cases Containerized environments In containerized environments like kubernetes it is often useful to initialize automatically based on the node name. The --deploy argument is created for this purpose and triggers the following behavior.\n If the node name ends with -0, the node is considered to be the first node and will automatically set the --init argument in case the node is started for the first time. If the node does not end with -0, then the node will be started with --secret when the node is started for the first time. The secret will be equal to the node name unless the environment variable THINGSDB_NODE_SECRET is set.  Restore from backup When you need to restore from a back up you will need to set the environment variable THINGSDB_STORAGE_PATH to the latest backup file (.tar.gz). Then you can start ThingsDB again with the following command:\nthingsdb --forget-nodes The --forget-nodes flag is in this case very useful. The flag causes to forget all nodes. You can just start with one node without getting in a situation where the quorum will not be reached when multiple nodes are down. After the first node has started you can then simply add other nodes again.\nFix a corrupted node When you get in the situation that one of your nodes is corrupted for some reason, you can shutdown the node and start it again with the following flag:\nthingsdb --rebuild This causes the node to wipe its corrupted data and synchronize again with one of the other healthy nodes.\nUsing the --rebuild flag is a simplified way of doing the following but same thing. You shutdown the corrupted node. Delete it as well, so the other nodes forget about this node. Then start the node again with the following command:\nthingsdb --force The --force flag causes to wipe all the stored data and start fresh. Then you can add this node again to the ThingsDB store.\nAs you will notice this takes a couple of more steps, so it is easier to just use the --rebuild\tflag.\n"},{"uri":"https://docs.thingsdb.net/v1/getting-started/readiness-liveness/","title":"Readiness and liveness","tags":[],"description":"","content":"When http_status_port is set in the configuration file or the environment variable THINGSDB_HTTP_STATUS_PORT then /status, /ready and /healthy are available. These can be used for readiness and liveness requests.\nLiveness The ThingsDB /healthy check will respond with a 200 OK whenever possible and will never respond with an error. So only if no response is received in some reasonable amount of time, the node should be considered as unhealthy. It is common to use the /healthy check as liveness probe in environments like Kubernetes.\nReadiness Besides the /healthy check there is also a /ready check. This check responds with 200 OK if the node has one of the following status: READY, AWAY, or AWAY_SOON. With any other status, for example, SYNCHRONIZING, the /ready check will respond with 503 Service Unavailable (NOK).\nSince v0.9.20 ThingsDB will also respond with 200 OK to a /ready request when all of the following conditions are met:\n ThingsDB must be started with the --deploy argument. The ThingsDB node status is SYNCHRONIZING. At least one ThingsDB node is unavailable (checked using at least 3 attempts).  The following link will explain how to deploy ThingsDB in GKE (Google Kubernetes Engine) and can be used as an example for using the /ready and /healthy handlers: https://github.com/thingsdb/ThingsDB/tree/master/gke#readme\n "},{"uri":"https://docs.thingsdb.net/v1/connect/","title":"Connect","tags":[],"description":"","content":"Connect There are several options to communicate with ThingsDB. By default each node listens to port 9200 for TCP socket connections. With a socket connection it is possible to do queries, run procedures and listen to rooms for events.\nThe most easy way to use the socket connection is to use an existing connector. ThingsDB currently has connectors available for Python and Go. For other languages you can read the socket protocol section on how to implement a ThingsDB connector.\nAs an alternative to the socket connection, a ThingsDB node has support for HTTP requests through an HTTP API.\n"},{"uri":"https://docs.thingsdb.net/v1/connect/authentication/","title":"Authentication","tags":[],"description":"","content":"ThingsDB supports authentication by using a user and password combination, or with a token. A default user admin with password pass is created on a fresh installation. If you did not yet change the default password, you might want to jump to set password or jump to token authentication.\nIt might be a good idea to create a new user with minimal privileges and add a new token for this user. See the grant and revoke functions for managing privileges for a user.\nFor connecting to ThingsDB with a auto-reconnect client, JOIN privileges on the .node scope are required.\n Token authentication This is a small tutorial to create a token and remove the password for the default admin user. This can be done with any client but in this tutorial the HTTP API is used with simple curl commands.\nFirst we create a new token, and then we remove the password from the admin user. Although this could be done in one step, we do this in two steps to be sure the new token works before removing the password.\n Replace 127.0.0.1:9210 with the address and port where your node is listening on for API requests\n curl --location --request POST \u0026#39;http://127.0.0.1:9210/thingsdb\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --user admin:pass \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;new_token(\u0026#39;\\\u0026#39;\u0026#39;admin\u0026#39;\\\u0026#39;\u0026#39;);\u0026#34; }\u0026#39; The will return a JSON string containing a new token, for example: \u0026quot;YyZcvq7BY3w+VgOTvXzTZp\u0026quot;\nWe can now use this token key to remove the password from user admin:\ncurl --location --request POST \u0026#39;http://127.0.0.1:9210/thingsdb\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Bearer YyZcvq7BY3w+VgOTvXzTZp\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;set_password(\u0026#39;\\\u0026#39;\u0026#39;admin\u0026#39;\\\u0026#39;\u0026#39;, nil);\u0026#34; }\u0026#39; "},{"uri":"https://docs.thingsdb.net/v1/connect/http-api/","title":"HTTP API","tags":[],"description":"","content":"Before using the HTTP API, make sure at least one node has the API port enabled. By default the API port is enabled and listening to TCP port 9210, but can be disabled or changed with the http_api_port in the configuration file or with the THINGSDB_HTTP_API_PORT environment variable.\nThe API has support for both MessagePack and JSON and can be used to perform queries and run procedures.\nUse MessagePack if possible since this is the data serialization protocol which is used by ThingsDB internally and will therefore be a faster than JSON. It also allows for sending and receiving binary data and is usually more compact than JSON. In most examples we use JSON just because it is more readable.\n Headers The header field Content-Type is required and needs to be either application/msgpack or application/json.\nQuery request    field description     type Required and must be query for a query request.   code Required string with the query code to preform.   vars Optional and may contain a map where the keys are variable names and the values will be the variable values.    Query example  Example using curl with token authentication: (using a playground collection Doc)\n curl --location --request POST \u0026#39;https://playground.thingsdb.net//Doc\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Bearer Fai6NmH7QYxA6WLYPdtgcy\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;.greetings.choice();\u0026#34; }\u0026#39;  choice() returns a random item from the .greetings array)\n  Possible response\n \u0026#34;Hi!\u0026#34; Besides the preferred token authentication, the HTTP API has also support for basic authentication.\n Another curl example using basic authentication using user Doc with password pass:\n curl --location --request POST \u0026#39;https://playground.thingsdb.net//Doc\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --user Doc:pass \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;1 + 1;\u0026#34; }\u0026#39;  Example response:\n 2 Run request    field description     type Required and must be run for a run request.   name Name of the procedure to run.   args Array or map with arguments for the procedure.    Run example The ThingsDB playground has a collection Doc with a procedure named multiply which accepts two arguments and returns the two arguments multiplied.\n If you want to create the multiply procedure yourself, this is the code:\n new_procedure('multiply', |a, b| a*b);  Example using the playground:\n curl --location --request POST \u0026#39;https://playground.thingsdb.net//Doc\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Bearer Fai6NmH7QYxA6WLYPdtgcy\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;run\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;multiply\u0026#34;, \u0026#34;args\u0026#34;: [6, 7] }\u0026#39;  Response\n 42  Instead of providing the arguments as an array, they also could be given as a map, for example {\u0026quot;a\u0026quot;: 6, \u0026quot;b\u0026quot;: 7}.\n "},{"uri":"https://docs.thingsdb.net/v1/connect/python/","title":"Python","tags":[],"description":"","content":"Installation The python-thingsdb library requires Python 3.6 or higher.\n Just use pip:\npip install python-thingsdb Or, clone the project and use setup.py:\npython setup.py install Quick usage import asyncio from thingsdb.client import Client async def hello_world(): client = Client() # replace `localhost` with your ThingsDB server address await client.connect(\u0026#39;localhost\u0026#39;) try: # replace `admin` and `pass` with your username and password # or use a valid token string await client.authenticate(\u0026#39;admin\u0026#39;, \u0026#39;pass\u0026#39;) # perform the hello world code... print(await client.query(\u0026#39;\u0026#39;\u0026#39; \u0026#34;Hello World!\u0026#34;; \u0026#39;\u0026#39;\u0026#39;)) finally: # the will close the client in a nice way client.close() await client.wait_closed() # run the hello world example asyncio.get_event_loop().run_until_complete(hello_world()) More info A more complete description of the Python client can be found in one of the links below.\n https://github.com/thingsdb/python-thingsdb#readme https://pypi.org/project/python-thingsdb/  "},{"uri":"https://docs.thingsdb.net/v1/connect/go/","title":"Go","tags":[],"description":"","content":"Installation Simple install the package to your $GOPATH with the go tool from shell:\n$ go get github.com/thingsdb/go-thingsdb Make sure Git is installed on your machine and in your system\u0026rsquo;s PATH.\nQuick usage  Note: This example requires at lease version 1.0.0 of the go-thingsdb connector.\n package main import ( \u0026#34;crypto/tls\u0026#34; \u0026#34;fmt\u0026#34; thingsdb \u0026#34;github.com/thingsdb/go-thingsdb\u0026#34; ) func example(conn *thingsdb.Conn, res chan interface{}) { if err := conn.Connect(); err != nil { res \u0026lt;- err return } // Close the connection at the end of this function  defer conn.Close() if err := conn.AuthToken(\u0026#34;Fai6NmH7QYxA6WLYPdtgcy\u0026#34;); err != nil { res \u0026lt;- err return } data, err := conn.Query( \u0026#34;//Doc\u0026#34;, // Scope \t\u0026#34;.greetings.choice();\u0026#34;, // ThingsDB code \tnil, // Arguments, may be a map[string]interface{} \t); if err == nil { res \u0026lt;- data } else { res \u0026lt;- err } } func main() { // Only required for a secure connection \tconf := \u0026amp;tls.Config{ InsecureSkipVerify: false, } // In this example we will use a channel to read the example response \tres := make(chan interface{}) // Create a new ThingsDB connection \tconn := thingsdb.NewConn(\u0026#34;playground.thingsdb.net\u0026#34;, 9400, conf) // Start our example \tgo example(conn, res) // Wait for the response \tdata := \u0026lt;-res // Print the response (or error) \tfmt.Printf(\u0026#34;%v\\n\u0026#34;, data) }  Possible response\n Log: connected to playground.thingsdb.net:9400 using a secure connection Welcome at ThingsDB! More info A more complete description of the Go client can be found in the link below.\n https://github.com/thingsdb/go-thingsdb#readme  "},{"uri":"https://docs.thingsdb.net/v1/connect/socket/","title":"Socket","tags":[],"description":"","content":"This is a more in depth view of the socket protocol used for communication with ThingsDB. In case you just want to use ThingsDB using one of the language bindings, then this info can be skipped. If you plan to implement your own connector, then this info might be useful to you.\nThis section applies to communication with ThingsDB over a socket, either by using TCP or a UNIX PIPE connection. Once a connection is made, packages can be send to ThingsDB. Each package starts with a 8 bytes header using little endian, followed by optional data. Before you can send queries to ThingsDB, the connection must be authenticated. This can be done by sending an AUTH package.\nPackage LEN (Unsigned, 32bit) Length of the data, stored as Unsigned, 32-bit, Little Endian. The header size is not included in the length.\nId (16bit) The Id can be used as an identifier of your package. When ThingsDB send a response on a request, it will use the same Id so this allows you to map a response to a request. This is useful if you want to send multiple requests in parallel. It needs to be stored as 16-bit, Little Endian.\nTYPE (Unsigned, 8bit) Package type is used to describe what kind of package is transmitted.\nRequest type    Type Number Description     PING 32 Ping, useful as keep-alive.   AUTH 33 Authorization., expects: [username, password] or a token_string.   QUERY 34 Query ThingsDB.   RUN 37 Run a procedure, see procedures for more info.   JOIN 38 Join one or more room(s).   LEAVE 39 Leave one or more room(s).   EMIT 40 Emit an event to a room.    CHK (Unsigned, 8bit) Inverse of the type: type ^ 0xff. This is used as a check-bit.\nDATA Data serialized using MessagePack.\n Package format:\n ┌───────────┬───────────┬───────────┬───────────┬───────────┐ │ LEN (4) │ Id (2) │ TYPE (1) │ CHK (1) │ DATA (..) │ └───────────┴───────────┴───────────┴───────────┴───────────┘ Response type ThingsDB can respond with one of the following response type:\n   Type Number Description     PONG 16 Success response to PING (header only).   OK 17 Success response to AUTH and EMIT (header only).   DATA 18 Success response to QUERY, RUN, JOIN and LEAVE (with data).   ERROR 19 Error response (with data).    Example As an example we create an authentication package for the default admin user with password pass.\nThis is the package data for our authentication request:\n[\u0026quot;admin\u0026quot;, \u0026quot;pass\u0026quot;]\nSerializing the above using MessagePack results in the following 12 bytes:\n\\x92\\xa5admin\\xa4pass\nNow we create the header. For this example we just use Id 0:\n Data length (12) \\x0c\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Auth package type (33) \\x21 Inverse type check bit (222) \\xde  So our total package will be:\n\\x0c\\x00\\x00\\x00\\x00\\x00\\x21\\xde\\x92\\xa5admin\\xa4pass\nMore examples Some more examples:\n sending a ping request sending an authentication request sending a query request sending a run request sending a join request sending an emit event request receiving an error response  "},{"uri":"https://docs.thingsdb.net/v1/connect/socket/ping/","title":"Example ping","tags":[],"description":"","content":"Can be used as keep-alive. A successful ping will respond with a PONG (16)\nNo authorization is required for sending a ping request.\n Example A Ping package has no data so we only need to construct the header:\n Data length (0) \\x00\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Ping package type (32) \\x20 Inverse type check bit (223) \\xdf   Sending the Ping package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xdf  Responding Pong package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x10\\xef "},{"uri":"https://docs.thingsdb.net/v1/connect/socket/auth/","title":"Example auth","tags":[],"description":"","content":"Used for authorizing the socket connection. A successful authentication will respond with OK (17)\nAuthorization can be done by using either a username and password combination or by a token.\n Syntax username/password\n [username, password]  Syntax token\n \u0026quot;token_string\u0026quot; Example username/password As an example we create an authentication package for the default admin user with password pass.\nThis is the package data for our authentication request:\n[\u0026quot;admin\u0026quot;, \u0026quot;pass\u0026quot;]\nSerializing the above using MessagePack results in the following 12 bytes:\n\\x92\\xa5admin\\xa4pass\nNow we create the header. For this example we just use Id 0:\n Data length (12) \\x0c\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Auth package type (33) \\x21 Inverse type check bit (222) \\xde   Sending the Auth package\n \\x0c\\x00\\x00\\x00\\x00\\x00\\x21\\xde\\x92\\xa5admin\\xa4pass  Responding OK package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x11\\xee Example token First, a token is required and can be created using the new_token() function.\nSuppose our token is RzDFlsoucQfDqrwrfGGEtc.\nSerializing the token using MessagePack results in the following 23 bytes:\n\\xb6RzDFlsoucQfDqrwrfGGEtc\nNow we create the header. For this example we just use Id 0:\n Data length (23) \\x17\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Auth package type (33) \\x21 Inverse type check bit (222) \\xde   Sending the Auth package\n \\x17\\x00\\x00\\x00\\x00\\x00\\x21\\xde\\xb6RzDFlsoucQfDqrwrfGGEtc  Responding OK package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x11\\xee "},{"uri":"https://docs.thingsdb.net/v1/connect/socket/query/","title":"Example query","tags":[],"description":"","content":"Query ThingsDB. A successful query request will respond with a DATA (18) package.\n Syntax\n [scope, code, {vars}] The vars in the query are optional and may be omitted. When used, vars must be a map where the keys represent the variable names and the values the values for the variable.\nThe socket needs to be authorized before sending a query request. See the auth example for how to authorize a socket connection.\n Example As an example we will perform a useless query with as code just the simple equation 1 + 1; and we will use the @thingsdb scope to perform the query on.\nThis is the data we want to pack:\n[\u0026quot;@t\u0026quot;, \u0026quot;1 + 1;\u0026quot;]\nSerializing the above using MessagePack results in the following 11 bytes:\n\\x92\\xa2@t\\xa61 + 1;\nNow we create the header. For this example we just use Id 0:\n Data length (11) \\x0b\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Query package type (34) \\x22 Inverse type check bit (221) \\xdd   Sending the Query package\n \\x0b\\x00\\x00\\x00\\x00\\x00\\x22\\xdd\\x92\\xa2@t\\xa61 + 1;  Responding Data package\n \\x01\\x00\\x00\\x00\\x00\\x00\\x12\\xed\\x02 We see that the DATA response package has a header with attached data of length 1.\nUnpacking the data \\x02 using MessagePack will return the expected value 2 which is the answer to our equation.\nIf your socket connection is not authenticated then you will receive an error response.\n "},{"uri":"https://docs.thingsdb.net/v1/connect/socket/run/","title":"Example run","tags":[],"description":"","content":"Run a procedure in ThingsDB. A successful run request will respond with a DATA (18) package.\n Syntax\n [scope, procedure, ...args] The args are parsed (and must match) to the procedure.\nThe socket needs to be authorized before sending a run request. See the auth example for how to authorize a socket connection.\n Example As an example we assume there is a procedure created in the @thingsdb scope, called \u0026ldquo;add_one\u0026rdquo; which just adds one to a given value. The procedure can be created using new_procedure('add_one', |x| x + 1);, see new_procedure().\nThis is the data we want to pack:\n[\u0026quot;@t\u0026quot;, \u0026quot;add_one\u0026quot;, 41]\nSerializing the above using MessagePack results in the following 13 bytes:\n\\x93\\xa2@t\\xa7add_one)\nNow we create the header. For this example we just use Id 0:\n Data length (13) \\x0d\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Run package type (37) \\x25 Inverse type check bit (218) \\xda   Sending the Query package\n \\x0d\\x00\\x00\\x00\\x00\\x00\\x25\\xda\\x93\\xa2@t\\xa7add_one)  Responding Data package\n \\x01\\x00\\x00\\x00\\x00\\x00\\x12\\xed* We see that the DATA response package has a header with attached data of length 1.\nUnpacking the data * using MessagePack will return the expected value 42 which is the expected result.\n"},{"uri":"https://docs.thingsdb.net/v1/connect/socket/join/","title":"Example join","tags":[],"description":"","content":"Join one- or more rooms in a collection. A successful join request will respond with an array of equal length of the number of rooms to join.\n Syntax\n [scope, ...IDs] The IDs are the room-IDs you want to join.\nThe socket needs to be authorized before sending a join request. See the auth example for how to authorize a socket connection.\n Example As an example we assume that we want to listen to a room with Id 17 for events. Instead of a single ID, we could add as much IDs as we wanted. As an example we also add room Id 456 which does not exist in our collection.\nThis is the data we want to pack (join room Ids 17 (exists in out collection) and 456 (does not exist)):\n[\u0026quot;//stuff\u0026quot;, 17, 456]\nSerializing the above using MessagePack results in the following 13 bytes:\n\\x93\\xa7//stuff\\x11\\xcd\\x01\\xc8\nNow we create the header. For this example we just use Id 0:\n Data length (13) \\x0d\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Request Join package type (38) \\x26 Inverse type check bit (249) 0xd9   Sending the Join package\n \\x0d\\x00\\x00\\x00\\x00\\x00\\x26\\xd9\\x93\\xa7//stuff\\x11\\xcd\\x01\\xc8  Responding [17, nil] package (room Id 17 is found, the second (456) was not)\n \\x03\\x00\\x00\\x00\\x00\\x00\\x12\\xed\\x92\\x11\\xc0 A few seconds (or less) later, you will receive a on-join event on the socket connection for every joined room.\nSee the listening documentation for more information.\n Responding {id: 17} package for room 17 which was joined in our example:\n \\x05\\x00\\x00\\x00\\xff\\xff\\x06\\xf9\\x81\\xa2id\\x11 "},{"uri":"https://docs.thingsdb.net/v1/connect/socket/emit/","title":"Example emit","tags":[],"description":"","content":"Emit an event to a room in a collection. A successful emit request will respond with OK (17)\n Syntax\n [scope, room_id, event, ...args] The args are optional argument to send with the event.\nThe socket needs to be authorized before sending a emit request. See the auth example for how to authorize a socket connection.\n Example As an example we assume that we have a room with Id 17 in collection stuff.\nThis is the data we want to pack (emit event \u0026ldquo;new-message\u0026rdquo; to room Id 17 with one argument \u0026ldquo;Hello!\u0026quot;):\n[\u0026quot;//stuff\u0026quot;, 17, \u0026quot;new-message\u0026quot;, \u0026quot;Hello!\u0026quot;]\nSerializing the above using MessagePack results in the following 29 bytes:\n\\x94\\xa7//stuff\\x11\\xabnew-message\\xa6Hello!\nNow we create the header. For this example we just use Id 0:\n Data length (29) \\x1d\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Request Emit package type (40) \\x28 Inverse type check bit (247) 0xd7   Sending the Emit package\n \\x1d\\x00\\x00\\x00\\x00\\x00\\x28\\xd7\\x94\\xa7//stuff\\x11\\xabnew-message\\xa6Hello!  Responding OK package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x11\\xee "},{"uri":"https://docs.thingsdb.net/v1/connect/socket/error-response/","title":"Example error response","tags":[],"description":"","content":"In this example we perform a query request and assume the socket connection is not authenticated yet. We then look at the error response.\nExample As an example we will perform a useless query with as code just the simple equation 1 + 1; and we will use the @thingsdb scope to perform the query on.\nThis is the data we want to pack:\n[\u0026quot;@t\u0026quot;, \u0026quot;1 + 1;\u0026quot;]\nSerializing the above using MessagePack results in the following 11 bytes:\n\\x92\\xa2@t\\xa61 + 1;\nNow we create the header. For this example we just use Id 0:\n Data length (11) \\x0b\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Query package type (34) \\x22 Inverse type check bit (221) \\xdd   Sending the Query package\n \\x0b\\x00\\x00\\x00\\x00\\x00\\x22\\xdd\\x92\\xa2@t\\xa61 + 1;  If the connection is not authenticated, this will be the responding Data package\n 8\\x00\\x00\\x00\\x00\\x00\\x13\\xec\\x82\\xaaerror_code\\xd0\\xc8\\xa9error_msg\\xbfconnection is not authenticated The first 8 bytes (8\\x00\\x00\\x00\\x00\\x00\\x13\\xec) contain the header:\n Data length 8\\x00\\x00\\x00 = 56 Package ID: \\x00\\x00 = 0 Type: \\x13 = 19 (ERROR) Check-bit: \\xec = 236 (19^255)  We see that the ERROR response package data of length 56.\nUnpacking the data \\x82\\xaaerror_code\\xd0\\xc8\\xa9error_msg\\xbfconnection is not authenticated using MessagePack will return the following in JSON format:\n{ \u0026#34;error_code\u0026#34;: -56, \u0026#34;error_msg\u0026#34;: \u0026#34;connection is not authenticated\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/overview/","title":"Overview","tags":[],"description":"","content":"Overview In this section we briefly try to explain some concepts of ThingsDB.\n"},{"uri":"https://docs.thingsdb.net/v1/overview/scopes/","title":"Scopes","tags":[],"description":"","content":"When sending a query, calling a procedure or subscribing to a thing, the request will require you to provide a scope. ThingsDB has three scope categories: @thingsdb, @node and @collection.\n   scope short description     @thingsdb @t ThingsDB scope; Used for managing user accounts, collections and nodes.   @node @n Current node scope; For node info and statistics from the connected node.   @node:ID @n:ID Specific node scope; Get node info and statistics from a specific node Id (Id should be replaced with a node ID, for example 0).   @collection:NAME @:NAME Collection scope; A collection where things are stored.   @collection:ID @:ID Collection scope; By collection Id instead of the using the collection name.    Scopes names do allow an alternative syntax where the @ and : are replaced with the / character. For example @collection:stuff can be written as /collection/stuff and the short version @:stuff may be written as //stuff.\n "},{"uri":"https://docs.thingsdb.net/v1/overview/collections/","title":"Collections","tags":[],"description":"","content":"Each collection can be thought of as an object to which properties can be assigned. We call such an object a Thing. To access something in the collection, all you need to do, is to start with a . (dot), followed by a function or property name. Another way to access the collection is to use the collection\u0026rsquo;s Id. All things which are stored in ThingsDB get an unique Id. Since the collection root is also a Thing, it has its own id.\n For example, to read the collection\u0026rsquo;s ID:\n .id(); // This will return the collection ID To store something inside the collection you only need to make sure the data is attached to the collection.\n For example:\n // Saves a number `42` .number = 42; // Saves some text to property `txt` .txt = 'Hello ThingsDB!'; // Saves a new `thing` to property `card` .card = { suit: 'Spades', value: 1, }; // The last value will be the return value. It may be just `nil` nil; Reading data from a collection works similar. Just ask for the property.\n For example:\n .txt; // Returns the value of property `txt`  Result in JSON format:\n \u0026#34;Hello ThingsDB!\u0026#34; To return multiple properties at once, it is often useful to put them in an array:\n[.txt, .number]; // Returns both property `txt` and `number`  And the result in JSON format:\n [ \u0026#34;Hello ThingsDB!\u0026#34;, 42 ] Stored things will get an Id (#) from ThingsDB.\n For example look at our card example:\n .card; // Returns the value of property `card`  Result in JSON format (The Id (#) might differ since it is auto-generated by ThingsDB)\n { \u0026#34;#\u0026#34;: 17, \u0026#34;suit\u0026#34;: \u0026#34;Spades\u0026#34;, \u0026#34;value\u0026#34;: 1 } See the Collection API documentation for functions which can be used to manipulate ThingsDB data.\n"},{"uri":"https://docs.thingsdb.net/v1/overview/names/","title":"Names","tags":[],"description":"","content":"The following rules apply to names in ThingsDB:\n A name must start with a letter or underscore character A name cannot start with a number A name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Names are case-sensitive (thing, Thing and THING are three different names) Names are restricted to 255 characters  "},{"uri":"https://docs.thingsdb.net/v1/overview/properties/","title":"Properties","tags":[],"description":"","content":"Properties are key/value pairs which are assigned to a thing. The collection itself is also a thing to which properties can be assigned. For example: .answer = 42; creates a property answer with value 42 and the property will be assigned to the collection.\nThe key of a property must be of type string. If the key is not a valid name, then the property can be set by using the square bracket [..] notation or the set(..) / get(..) functions can be used.\nThere are 16, single character keys that are reserved for ThingsDB and cannot be used as key strings:\n   key description       (space) unused   ! Reserved for errors.   \u0026quot; Reserved for timeval.   # Reserved for thing ID\u0026rsquo;s.   $ Reserved for sets.   % Reserved for enumerator members.   \u0026amp; Reserved for wrapped things.   ' Reserved for datetime.   ( unused   ) unused   * Reserved for regular expressions.   + unused   , unused   - unused   . Reserved for type.   / Reserved for closures.    Example x = {}; // Character `!` is reserved and cannot be used as key assert(is_err(try({ x['!'] = nil; }))); // Note that it is fine to use the `!` in any other combination as key // For example, the following key is perfectly valid: x['!!'] = nil; x;  Return value in JSON format\n { \u0026#34;!!\u0026#34;: null } "},{"uri":"https://docs.thingsdb.net/v1/overview/variable/","title":"Variable","tags":[],"description":"","content":"Can be used to assign a value to a variable which can be used within a query.\nVariable can be created with QUERY privileges since they do not modify the collection\u0026rsquo;s data.\nTo create a variable, just assign a value to a valid name.\nSome valid examples:\n _ = ... tmp = ... var1 = ...  Variables created within a closure become local. They can only be used within the closure body. See the example below:\na = 'This is a variable!!!'; b = 'Hello'; (||{ /* This will create a new, local, variable `a` */ a = 'New variable within this block'; /* This will update the global variable `b` */ b += ' World'; }).call(); [a, b];  Return value in JSON format\n [ \u0026#34;This is a variable!!!\u0026#34;, \u0026#34;Hello World\u0026#34; ] Injecting variable When running a query to ThingsDB, it is possible to inject variables into the code. This is easy, safe, and in some cases even necessary when for example inserting binary data.\n Python example:\n # inject a variable into the code: client.query(\u0026#39;.a = a;\u0026#39;, a=1) Prevent code injection Consider you have some user input which is supposed to contain a name, and you want to store that name in ThingsDB.\n# Variable `user_input` is supposed to contain a name like `Bob` client.query(f\u0026#39;.name = \u0026#34;{user_input}\u0026#34;;\u0026#39;) Instead of a name, a user could insert something like this: Bob\u0026quot;; .XXX = \u0026quot;This system is hacked!. This would result in the following query statement:\n.name = \u0026quot;Bob\u0026quot;; .XXX = \u0026quot;This system is hacked!\u0026quot;; This is very dangerous and definitely not what we want but luckily ThingsDB has a simple solution: variable injection\nclient.query(\u0026#39;.name = inp;\u0026#39;, inp=user_input) Using variable injection we can parse user input in a safe and secure way to ThingsDB.\n"},{"uri":"https://docs.thingsdb.net/v1/overview/changes/","title":"Changes","tags":[],"description":"","content":"When a query uses a statement which makes a change to ThingsDB, then internally ThingsDB will create a change with a new change-Id to apply these transformations. Changes are applied in order on each node; so database consistency is guaranteed.\nA single query might contain several statements and make many changes. All changes within a query will be grouped in a single change with the exception of future callbacks. Each future callback will get its own change-Id if a change is required (see the future type for more info on futures).\nIn the documentation we try to make clear if a function will generate a change or not. If you only want to read information from ThingsDB, you should try to avoid functions which generate a change. Functions on a list or set do not create a change when called on a variable.\n "},{"uri":"https://docs.thingsdb.net/v1/overview/slices/","title":"Slices","tags":[],"description":"","content":"The following slice notation can be used:\nlist[start:stop:step] The start and stop value will default to nil and step has a default value of 1. For understanding slices it is important to remember that the :stop value represents the first value that is not in the selected slice. This means that the difference between stop and start is the number of selected items. (assuming that step is the default value 1)\nAnother feature is that negative numbers may be used. For start and stop this means that it will count from the end of the array instead of the beginning.\n Some examples using start and stop to select some items:\n months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; [ { months[:2]; /* first two months */ }, { months[-2:]; /* last two months */ }, { months[:-2]; /* all, except the last two months */ }, ];  \u0026hellip;and the corresponding result in JSON format:\n [ [ \u0026#34;January\u0026#34;, \u0026#34;February\u0026#34; ], [ \u0026#34;November\u0026#34;, \u0026#34;December\u0026#34; ], [ \u0026#34;January\u0026#34;, \u0026#34;February\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;June\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;August\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;October\u0026#34; ] ] Another feature is the step argument, which also may be negative to reverse the slice direction.\n Some examples using the step value:\n months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; [ { months[::2]; /* only the odd months */ }, { months[::-1]; /* months in reverse order, equal to months.reverse() */ }, ];  \u0026hellip;the corresponding result in JSON format:\n [ [ \u0026#34;January\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;November\u0026#34; ], [ \u0026#34;December\u0026#34;, \u0026#34;November\u0026#34;, \u0026#34;October\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;August\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;June\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;February\u0026#34;, \u0026#34;January\u0026#34; ] ] Slices can also be used to replace the splice function.\nIt is not possible to use the step value when assigning items using the slice syntax.\n  Example using the slice syntax to replace items in a list:\n months = ['January', 'February', 'XXX', 'May']; /* Replace 'XXX' with 'March' and 'April' */ months[2:3] = ['March', 'April']; /* Return result */ months;  Once again the result in JSON format:\n [ \u0026#34;January\u0026#34;, \u0026#34;February\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;May\u0026#34; ] Instead of lists and tuples it also possible to use the slice notion on strings\n Slice on string example:\n /* Return 'abcdef' in reverse order */ \u0026quot;abcdef\u0026quot;[::-1]; \u0026#34;fedcba\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/overview/template-strings/","title":"Template Strings","tags":[],"description":"","content":"Template strings allows you to use embedded ThingsDB expressions to generate a string constant. Template strings are enclosed by the backtick (`) character instead of double or single quotes.\nHere is an example of how they may be used:\na = 6; b = 7; `The sum of {a} plus {b} is {a + b}.`;  Result in JSON format:\n \u0026#34;The sum of 6 plus 7 is 13.\u0026#34; If you wish to use the backtick character or curly brackets inside your string, then you need to escape those by using the same character twice. For example:\n`Example with ``Backticks`` and {{Curlies}}.`  Result in JSON format:\n \u0026#34;Example with `Backticks` and {Curlies}.\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/overview/dictionary/","title":"Dictionary","tags":[],"description":"","content":"The following list contains definitions specific for ThingsDB:\n   Keyword Definition     Collection The collection is the root thing. Every collection has its own scope.   Computed properties With computed properties it is possible to return computed values by wrapping a Type.   Closure A Closure is a user defined method which can be saved. It can be used as a prepared piece of code or to consume items from a thing, list, tuple or set.   Change ThingsDB creates a change when a query modifies something. Changes are applied in order by each node to guarantee consistency.   Function Function in ThingsDB means a built in function. A function needs the exact number of arguments that is expected, which is different for a closure or procedure.   Node Node is the process running ThingsDB. ThingsDB can work with a single node but is designed to work with multiple nodes. Running on at least three nodes brings redundancy and ensures the database stays operational.   Procedure A procedure in ThingsDB is a named closure that is attached to a scope (@thingsdb or @collection) and available to use in an API call.   Relation Relations can be created between Types or even within a single Type and can be used to create a two-way relation between instances. See mod_type, action: rel.   Scope When sending a query, calling a procedure or subscribing to a thing, the request will require you to provide a scope. ThingsDB has three scope categories: @thingsdb, @node and @collection.   Thing A thing is an object to which properties can be assigned.   Quorum ThingsDB ensures consistency across multiple nodes. This is achieved by changes. Changes get an Id which are in applied order. Before a node can assign an Id to a change, it needs approval of the majority of the existing nodes. Once a node has connected to the others, it takes part in the quorum. If a node goes down it still gets accounted for, but will negatively influence the quorum as it cannot respond. When a node is deleted it does not take part in the quorum anymore.   Zone When a node is in \u0026ldquo;away\u0026rdquo; mode, queries to a collection or ThingsDB scope will be forwarded to another node. If zones are configured, the node will first try a node within the same zone; only if no other node in the same zone is available, another node in another zone will be used.    "},{"uri":"https://docs.thingsdb.net/v1/overview/type/","title":"Type","tags":[],"description":"","content":"Use a Type to create typed things.\nA typed thing is a thing with pre-defined properties and/or methods with are defined by a Type. When creating a typed thing, all defined properties of the type are guaranteed to exist with a value matching the type definition.\nDefinable properties    definition default description     'str' \u0026quot;\u0026quot; requires type str (values of type str should contain valid UTF-8 characters).   'str\u0026lt;..\u0026gt;' depends requires type str with a certain length (see length condition and default value)   /pattern/ depends requires type str with a math to a specified pattern (see pattern condition).   'utf8' \u0026quot;\u0026quot; requires type str and the value must contain valid UTF-8 characters.   'raw' \u0026quot;\u0026quot; requires type str or bytes.   'bytes' bytes() requires type bytes.   'bool' false requires type bool.   'int' 0 requires type int.   'int\u0026lt;..\u0026gt;' depends requires type int within a given range (see range condition and default value).   'uint' 0 requires a non-negative integer (type int, \u0026gt;= 0).   'pint' 1 requires a positive integer (type int, \u0026gt; 0).   'nint' -1 requires a negative integer (type int, \u0026lt; 0).   'float' 0.0 requires type float.   'float\u0026lt;..\u0026gt;' depends requires type float within a given range (see range condition and default value).   'number' 0 requires type float or type int.   'datetime' datetime() requires type datetime. (defaults to the current date/time)   'timeval' timeval() requires type timeval. (defaults to the current date/time)   'regex' regex('.*') requires type regex.   'closure' `    'error' err() requires type error.   'room' room() requires type room.   'thing' {} requires a thing.   'thing\u0026lt;T\u0026gt;' {} requires a value restricted thing where each value must be of type T.   'T' T{} requires a instance of Type T, or a member of enumerator T. The value T should be replaced with the Type / enum name.   '[]' [] requires a list.   '[T]' [] requires a list where each item in the list must be of type T (see restrict items).   '{}' set() requires a set.   '{T}' set() requires a set where each element in the set must be of type T (see restrict items).   '[]' [] requires a list.   'any' nil any type is valid (with the exception of a future).    Each definition can be made optional by adding a question-mark ? to the definition. If a property is made optional, then the value nil is allowed instead of the given type and nil will also be the default if the property is missing.\n For example\n // Create a new type `User` with an optional property `name`. set_type('User', {name: 'str?'}); // Create a typed thing of type `User` without a name unknown = User{}; // ..or explicitly set name to `nil` user_nil = User{name: nil}; // ..a `str` is also ok iris = User{name: 'Iris'}; // ..but another type than `str` or `nil` is not allowed assert(is_err(try(User{name: 0}))); // Return the results [unknown, user_nil, iris];  Return value in JSON format\n [ { \u0026#34;name\u0026#34;: null }, { \u0026#34;name\u0026#34;: null }, { \u0026#34;name\u0026#34;: \u0026#34;Iris\u0026#34; } ] Restrict items When using a list '[]' or set '{}' definition, it is also possible to make the list or set restricted to a certain type. In this case only items of the given definition are allowed as members. For example '[int]' requires the members of a list to be integers and '{User}' is a restricted set which only allows things of type User.\nBoth the list and/or the members can be made optional. For example, this '[str?]?' is a valid declaration. Since a set does not allow for nil values, it is not possible to make members of a set optional.\n This is an example using a restricted list:\n // Very simple `Note` type set_type('Note', { text: 'str', timestamp: 'uint' }); // Book type with `notes` of type `Note` set_type('Book', { title: 'str', notes: '[Note]' }); // Create a new book book = Book{ title: \u0026quot;hitchhiker's guide to the galaxy\u0026quot;, }; // Add a note to the book book.notes.push(Note{ text: 'the answer is 42', timestamp: int(now()) }); // It *must* be a `Note`, something else is not allowed assert(is_err(try(book.notes.push({test: 'not a Note'})))); // Return the book, 2 levels deep to see the note return(book, 2);  Return value in JSON format\n { \u0026#34;notes\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;the answer is 42\u0026#34;, \u0026#34;timestamp\u0026#34;: 1573894579 } ], \u0026#34;title\u0026#34;: \u0026#34;hitchhiker\u0026#39;s guide to the galaxy\u0026#34; } Length condition A length condition may be added to a str type definition using the following syntax:\nstr\u0026lt;min:max:default\u0026gt;    argument description     min Optional minimal length (inclusive).   max Optional maximum length (inclusive, this value must be equal to or greater than min).   default Optional default value. If not given, the default value will be the smallest possible string filled with the dash (-) character.    For example:\nset_type('Person', { name: 'str\u0026lt;1:10\u0026gt;', email: 'str\u0026lt;3:50:info@thingsdb.net\u0026gt;' }); /* * Each Person instance will contain a name with at least 1 character * and at most 10 characters and an email property with a string of at * least 3 and at most 50 characters. */ Person{}; // return a Person with default values  Return value in JSON format\n { \u0026#34;name\u0026#34;: \u0026#34;-\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;info@thingsdb.net\u0026#34; }  It is not possible to use a length condition as a nested array definition. For example, something like \u0026quot;[str\u0026lt;1:10\u0026gt;]\u0026quot; is not allowed.\n Pattern condition A pattern condition applies to type str and may be used using the following syntax:\n/pattern/i The i is optional and tells the pattern to be case insensitive. If left away, the pattern will thus be case sensitive.\nThe definition must be either nillable by adding a ? to the definition or an empty string must match with the given pattern. If this is not the case, then a default value must be given using the syntax below:\n/pattern/i\u0026lt;default\u0026gt;  It is always possible to set a default value as long as the default value matches with the given pattern.\n Here is an example using some pattern conditions:\nset_type('Words', { example1: '/^(e|h|l|o)*$/', example2: '/thingsdb/i\u0026lt;ThingsDB\u0026gt;', example3: '/^[0-9]{4}[A-Z]{2}$/?', example4: '/^[0-9]{4}[A-Z]{2}$/\u0026lt;1234AB\u0026gt;?', }); /* * example1 - matches an empty string so a default value is not required * example2 - case insensitive and requires a default value * example3 - nillable and thus no default value is required * example4 - exactly the same as example3 but with a default value */ Words{}; // return a Person with default values  Return value in JSON format\n { \u0026#34;example1\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;example2\u0026#34;: \u0026#34;ThingsDB\u0026#34;, \u0026#34;example3\u0026#34;: null, \u0026#34;example4\u0026#34;: \u0026#34;1234AB\u0026#34; }  A pattern condition cannot be used as a nested array definition, thus something like \u0026quot;[/pattern/i]\u0026quot; is not possible.\n Range condition A range condition may be added to a int or float type definition using the following syntax:\nint\u0026lt;min:max:default\u0026gt; Or\nfloat\u0026lt;min:max:default\u0026gt;    argument description     min Optional minimal value (inclusive).   max Optional maximum value (inclusive, this value must be equal to or greater than min).   default Optional default value. If not given, the default value will be the closest possible value towards zero (0).    For example:\nset_type('Values', { a: 'int\u0026lt;10:20\u0026gt;', b: 'int\u0026lt;0:10:5\u0026gt;', c: 'float\u0026lt;-1:1\u0026gt;', d: 'float\u0026lt;0:1:0.5\u0026gt;', }); Values{}; // return a `Values` instance with default values  Return value in JSON format\n { \u0026#34;a\u0026#34;: 10, \u0026#34;b\u0026#34;: 5, \u0026#34;c\u0026#34;: 0, \u0026#34;d\u0026#34;: 0.5 }  A range condition cannot be used as a nested array definition, thus something like \u0026quot;[int\u0026lt;1:10\u0026gt;]\u0026quot; is not possible.\n Use condition to set a default value Both the min and max of a range and length condition are optional. For this reason you can use the \u0026ldquo;condition\u0026rdquo; syntax to configure a default value for a property on a Type.\n(You may want to combine a default value with a minimum and/or maximum limit and that is fine; This example is just to make it clear that setting a min and/or max value is not required.)\nFor example:\nset_type('TestDefault', { f: 'float\u0026lt;::3.14\u0026gt;', i: 'int\u0026lt;::42\u0026gt;', s: 'str\u0026lt;::ThingsDB\u0026gt;', }); TestDefault{}; // return a `TestDefault` instance with default values  Return value in JSON format\n { \u0026#34;f\u0026#34;: 3.14, \u0026#34;i\u0026#34;: 42, \u0026#34;s\u0026#34;: \u0026#34;ThingsDB\u0026#34; } Get instance of a type The thing(..) function may be used to get an instance of a given Id. This does not guarantee that the thing is truly of the type you expect. Instead of adding a type_assert(..) on the thing, it is also possible to call the type as a function with the Id as it\u0026rsquo;s first argument.\nFor example:\n// Suppose we have a user_id and want to get the user user = User(user_id); Possible errors:\n A lookup_err() will be raised if no thing with the given user_id exists. A type_err() will be raised if a thing is found, but the thing is not of the User type,  Methods A method is a closure attached to a type. Methods are defined when creating a type by attaching a closure instead of a definition. When a method is used on an instance of a type, the first argument will be the instance itself. It is therefore common to name the first argument this.\nFor example:\nset_type('Person', { name: 'str', age: 'int', whoami: |this| `My name is {this.name} and I am {this.age} years old.` }); .iris = Person{ name: 'Iris', age: 7 }; .iris.whoami();  Return value in JSON format\n \u0026#34;My name is Iris and I am 7 years old.\u0026#34; Related functions    Function Description     del_type Delete a Type.   has_type Determine if the current scope has a Type.   mod_type Modify an existing Type definition.   new_type Create a new Type.   rename_type Rename the Type.   set_type Set property definitions on a Type and creates the Type if it did not exist.   type_info Return the Type definition.   types_info Return all Type definitions in the current scope.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/","title":"Data Types","tags":[],"description":"","content":"Data Types ThingsDB uses the following data types:\n   type Description     bool Booleans are either true or false.   bytes Byte sequence.   closure Closures can be used as functions or to consume items from a thing, list, tuple or set.   datetime Type datetime can be used to store a value with date and time information.   enum Enumerators.   error An object containing information about an error.   float Floating point type.   future Futures can be used with modules and to postpone and isolate work.   int Integer type.   list Mutable array type.   mpdata Raw MessagePack data.   nil Used to define a null value, or no value at all.   regex Regular expression.   room Room type for joining and emitting events.   set Unordered group of unique things.   str String type.   task Schedule a task (closure) to run at a specific date/time.   thing Object with key value pairs.   timeval Like datetime but returns as a UNIX time-stamp by default.   tuple Nested and immutable list.   typed Type are things with pre-defined properties.   \u0026lt;Type\u0026gt; Wrapped thing by a Type.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/bool/","title":"bool","tags":[],"description":"","content":"Booleans are either true or false. Other types can convert to bool by using the ! (not) operator or the bool function.\nThe bool() documentation contains a helpful example table to explain how different types are converted to bool.\n  This code creates a bool property is_the_earth_flat to collection stuff:\n .is_the_earth_flat = !true; Related functions    Function Description     bool Convert a value into type bool.   is_bool Test if a given value is of type bool.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/bytes/","title":"bytes","tags":[],"description":"","content":"The bytes type can be used to store a sequence of byte values.\n This code converts a string to bytes\n .as_bytes = bytes(\u0026quot;Hello ThingsDB!\u0026quot;); Functions    Function Description     len Return the length of the byte sequence.    Related functions    Function Description     bytes Create a new bytes value.   is_bytes Test if a given value is of type bytes.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/bytes/len/","title":"len","tags":[],"description":"","content":"Returns the length of the bytes value.\nThis function does not generate a change.\nFunction bytes.len()\nArguments None\nReturn value Returns length of the byte sequence.\nExample  This code uses len() to return the length of a byte sequence:\n bytes(\u0026quot;abc\u0026quot;).len();  Return value in JSON format\n 3 "},{"uri":"https://docs.thingsdb.net/v1/data-types/closure/","title":"closure","tags":[],"description":"","content":"Closures are user defined methods which can be saved. They can be used as a prepared piece of code or to consume items from a thing, list, tuple or set. They can also be used by procedures.\nClosure can be stored in a collection or assigned to a variable.\nA closure starts with a |, then takes optional arguments and a | to close, followed by a statement. The most simple closure is ||nil which is a closure without arguments and returns the value nil when called.\nMore complex closures are also possible, check the last example below.\nFunctions    Function Description     call Call the closure with optional arguments.   doc Return the doc string of the closure.    Closures may be called recursively up to a recursion depth of 24. If this limit is exceeded, an error is raised. For example: a = ||a(); a(); \u0026hellip;will raise operation_err() (maximum recursion depth exceeded)\n Doc string Doc strings can be set on closures. This is especially useful when closures are used inside a procedure since this gives the procedure a nice documentation string.\nUsually, a doc string is just a normal string on top of a block in the closure.\nFor example:\n|| { \u0026quot;this is a doc string.\u0026quot;; }; It is common to wrap a block scope within one or more functions. When this is the case, the doc string will be read from the first argument, only if the first non-function argument contains a block scope with a doc string.\nFor example, this closure contains a block scope wrapped with return and wse:\n|| return(wse({ \u0026quot;this is still a doc string, even while wrapped using `return` and `wse`.\u0026quot;; }), 2); Examples  This code uses a simple closure together with map and call:\n // create a simple closure which just adds one to a given value add_one = |x| x+1; // use the closure in a `map` function map_result = [1, 2, 3].map(add_one); // use the closure as a function call call_result = add_one(41); // return the result values [map_result, call_result];  Return value in JSON format\n [ [ 2, 3, 4 ], 42 ] Like explained, closures can accept multiple arguments and may contain a block scope instead of just a single line statement. Here is an example:\n|name, age| { \u0026quot;Returns a thing with properties `name`, `age` and `time`.\u0026quot;; assert(is_str(name) \u0026amp;\u0026amp; name.len()); assert(is_int(age) \u0026amp;\u0026amp; age \u0026gt;= 0); // this is the last statement so it will be the return value { name: name, age: age, time: now() }; }; "},{"uri":"https://docs.thingsdb.net/v1/data-types/closure/call/","title":"call","tags":[],"description":"","content":"Call a closure.\nWhen assigned to a variable, it is not required to explicitly write the call function. Simply calling the closure by using () will work as well.\nThis function does not generate a change.\nFunction closure.call()\nArguments The arguments for the closure. If more arguments are given than the closure expects, the redundant arguments will be ignored. If too few arguments are given, then the remaining arguments will be set to nil.\nIt is not possible to assign default values to arguments but something similar can be accomplished by checking the argument within the closure. See the example below.\n Return value Returns the closure response.\nExample  Example code using call:\n // create a greet closure greet = |name| is_str(name) ? \u0026quot;Hello \u0026quot; + name : \u0026quot;Hello unnamed user!\u0026quot;; // call with a given name greet_iris = greet.call(\u0026quot;Iris\u0026quot;); // call with nil, without explicitly writing `.call()` greet_nil = greet(nil); // return the greet response values [greet_iris, greet_nil];  Return value in JSON format\n [ \u0026#34;Hello Iris\u0026#34;, \u0026#34;Hello unnamed user!\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/closure/doc/","title":"doc","tags":[],"description":"","content":"Returns a doc string from a closure.\nAn empty string (\u0026quot;\u0026quot;) is returned if the closure has no doc string.\nThis function does not generate a change.\nFunction closure.doc()\nArguments None\nReturn value Returns the doc string.\nExample  This code creates a closure with a doc string:\n add_one = |x| { \u0026quot;Adds one to a given value.\u0026quot;; x+1; }; // Return the doc string add_one.doc();  Return value in JSON format\n \u0026#34;Adds one to a given value.\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/","title":"datetime","tags":[],"description":"","content":"Type datetime can be used to store a value with date and time information.\nThe datetime and timeval types have second precision. If more than second precision is required you will have to use your own type. For example the function now() returns the current time-stamp as a floating point type.\n Type datetime will appear as an ISO8601 formatted string in query results. It might be more convenient to get the value as a UNIX time-stamp instead. If so, you might want to look at the timeval type which is created for this purpose.\n Converting a datetime or timeval type to type int or float will return the UNIX time-stamp. For example: int(datetime('2013-06-02T00:00:00Z')) returns the int value 1370131200.\n Functions    Function Description     extract Return a thing with second, minute, hour, day, month, year and gmt_offset as individual properties.   format Returns a string representation using a custom format string.   move Return a new datetime which is shifted in time relative to the original date/time.   replace Return a new datetime with new values for given time units.   to Return a new datetime with new time zone information.   week Return the week of the year as an integer between 0..53. Week 1 starts at the first Sunday in January.   weekday Return the number of days (0..6) since the last Sunday.   yday Return the day in the year as an integer value between 0..365 where the first of January is day 0.   zone Return the time zone as a string, of nil if not zone information is available.    Related functions    Function Description     datetime Create a new datetime value.   is_datetime Test if a given value is of type datetime.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/extract/","title":"extract","tags":[],"description":"","content":"Return a thing with second, minute, hour, day, month, year and gmt_offset as individual properties.\nIt is possible to get a single property by using the name of the property as the first argument.\nThis function does not generate a change.\nFunction datetime.extract([key])\nArguments    Argument Type Description     key str (optional) May be a specific property, one of second, minute, hour, day, month, year or gmt_offset.    Return value Returns a thing or the value for a specific property.\nExample  This code uses extract() as an example:\n datetime(2013, 2, 6, 13, 12, 28, 'Europe/Amsterdam').extract();  Return value in JSON format\n { \u0026#34;day\u0026#34;: 6, \u0026#34;gmt_offset\u0026#34;: 3600, \u0026#34;hour\u0026#34;: 13, \u0026#34;minute\u0026#34;: 12, \u0026#34;month\u0026#34;: 2, \u0026#34;second\u0026#34;: 28, \u0026#34;year\u0026#34;: 2013 }  Another example to get the gmt_offset only with extract():\n datetime(2013, 2, 6, 13, 12, 28, 'Europe/Amsterdam').extract('gmt_offset');  Return value in JSON format\n 3600 "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/format/","title":"format","tags":[],"description":"","content":"Returns a string representation for a datetime object using a custom format.\nThis function does not generate a change.\nFunction datetime.format(fmt)\nArguments    Argument Type Description     fmt str (required) Custom output format.    Format specifiers The following specifiers may be used:\n   Specifier Example Description     %a Wed Abbreviated weekday name. *   %A Wednesday Full weekday name. *   %b Feb Abbreviated month name. *   %B February Full month name. *   %c Wed Feb 6 00:00:00 2013 Date and time representation. *   %C 20 Year divided by 100 as integer (00-99).   %d 06 Day of the month, zero-padded (01-31).   %D 02/06/13 Equivalent to %m/%d/%y.   %e 6 Day of the month, space-padded (1-31).   %F 2013-02-06 Equivalent to %Y-%m-%d.   %g 13 Week-based year, last two digits (00-99)   %G 2013 Week-based year.   %h Feb Abbreviated month name (same as %b). *   %H 14 Hour in 24h format (00-23).   %I 02 Hour in 12h format (01-12).   %j 037 Day of the year (001-366).   %m 02 Month as a decimal number (01-12).   %M 12 Minute (00-59).   %n \\n New-line character (\\n).   %p PM AM or PM.   %r 02:12:28 PM 12-hour clock time. *   %R 14:12 24-hour HH:MM time, equivalent to %H:%M.   %S 28 Second (00-61).   %t \\t Horizontal-tab character (\\t).   %T 14:12:28 ISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S.   %u 3 ISO 8601 weekday as number with Monday as 1 (1-7).   %U 05 Week number with the first Sunday as the first day of week one (00-53).   %V 06 ISO 8601 week number (01-53).   %w 3 Weekday as a decimal number with Sunday as 0 (0-6).   %W 05 Week number with the first Monday as the first day of week one (00-53).   %x 02/06/13 Date representation. *   %X 14:12:28 Time representation. *   %y 13 Year, last two digits (00-99).   %Y 2013 Year.   %z +0000 ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100).   %Z UTC Timezone name or abbreviation. This may differ from zone() since the latter returns the ThingsDB zone information instead of local time zone info. *   %% % A % sign    Specifiers marked with an asterisk (*) depend on local settings of the ThingsDB node.\n Return value Returns the datetime as a formatted string.\nExample  This code uses format() as an example:\n datetime(2013, 2, 6, 13, 12, 'Europe/Amsterdam').format('%A, %d %B %Y at %R (%z)');  Return value in JSON format\n \u0026#34;Wednesday, 06 February 2013 at 13:12 (+0100)\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/move/","title":"move","tags":[],"description":"","content":"Return a new datetime (or timeval) object, which is shifted in time relative to the original date/time. The amount the new date/time will be shifted must be given by one of the following units: years, months, weeks, days, hours, minutes or seconds.\nWhen using years of months as a unit, it might not be possible to move to the exact same day in the month. If this is the case, the last possible day of the month will be used. For example: datetime(2020, 2, 29).move('years', -1); return with datetime(2019, 2, 28) since the year 2019 does not have a 29th of February.\n This function does not generate a change.\nFunction datetime.move(unit, num)\nArguments    Argument Type Description     unit str (required) One of years, months, weeks, days, hours, minutes or seconds.   num int (required) How many times to move the unit. A negative number will return a datetime or timeval in the past, relative to the original.    Return value Returns a new datetime (or timeval) object.\nExample  This code uses move() as an example:\n datetime('2020-12-10').move('weeks', 2);  Return value in JSON format\n \u0026#34;2020-12-24T00:00:00Z\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/replace/","title":"replace","tags":[],"description":"","content":"Return a new datetime (or timeval) object with altered properties. The new properties must be given by a thing.\nThis function does not generate a change.\nFunction datetime.replace(values)\nArguments    Argument Type Description     values thing (required) Only the properties year, month, day, hour, minute, second will be used, all other properties are simply ignored.    Return value Returns a new datetime (or timeval) object.\nExample  This code uses replace() as an example:\n datetime('2020-12-10T16:08:24Z').replace({ minute: 0, second: 0, });  Return value in JSON format\n \u0026#34;2020-12-10T16:00:00Z\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/to/","title":"to","tags":[],"description":"","content":"Return a new datetime (or timeval) object with new time zone information. Note that the proper time does not change, only the time zone will change.\nSee time_zones_info() for a list of all available time zones.\nIf zone information is given using a fixed offset (+hh[mm] or -hh[mm]), then the new datetime object has no proper time zone information and thus has no day-light-saving information.\n This function does not generate a change.\nFunction datetime.to(zone)\nArguments    Argument Type Description     zone str (required) May be a time zone like Europe/Amsterdam, UTC or the format +hh[mm] / -hh[mm].    Return value Returns a new datetime (or timeval) object.\nExample  This code uses to() as an example:\n datetime('2020-12-10T16:08:24Z').to('Europe/Kiev');  Return value in JSON format\n \u0026#34;2020-12-10T18:08:24+0200\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/week/","title":"week","tags":[],"description":"","content":"Return the week of the year as an integer between 0..53. Week 1 starts at the first Sunday in January.\nThis function does not generate a change.\nFunction datetime.week()\nArguments None\nReturn value Returns the week in the year as a number between 0 and 53.\nExample  This code uses week() as an example:\n datetime(2020, 12, 10).week();  Return value in JSON format\n 49 "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/weekday/","title":"weekday","tags":[],"description":"","content":"Return the number of days (0..6) since the last Sunday.\nThis function does not generate a change.\nFunction datetime.weekday()\nArguments None\nReturn value Returns the day of the week as a number between 0 (Sunday) and 6.\nExample  This code uses weekday() as an example:\n datetime(2020, 12, 10).weekday();  Return value in JSON format\n 4 "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/yday/","title":"yday","tags":[],"description":"","content":"Return the day in the year as an integer value between 0..365 where the first of January is day 0.\nThis function does not generate a change.\nFunction datetime.yday()\nArguments None\nReturn value Returns the day in the year as a number between 0 and 365.\nExample  This code uses yday() as an example:\n datetime(2020, 12, 10).yday();  Return value in JSON format\n 344 "},{"uri":"https://docs.thingsdb.net/v1/data-types/datetime/zone/","title":"zone","tags":[],"description":"","content":"Return zone information as a string about the datetime (or timeval) object. If no zone information is available, nil will be returned.\nThis function does not generate a change.\nFunction datetime.zone()\nArguments None\nReturn value Returns zone information or nil if no zone information is available.\nExample  This code uses zone() as an example:\n [ datetime().zone(), datetime().to('Europe/Amsterdam').zone(), datetime().to('+00').zone(), ]  Return value in JSON format\n [ \u0026#34;UTC\u0026#34;, \u0026#34;Europe/Amsterdam\u0026#34;, null ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/enum/","title":"enum","tags":[],"description":"","content":"Enumerators are a set of unique names coupled to a unique set of values. ThingsDB support enumerators for type int, float, str, bytes and thing, where all members must have the same type. Thus, it is not possible to have an enum type with for example both values of type int and str. Enumerators with type thing may contain both things and typed things as they are both compatible with type thing.\nFunctions    Function Description     name Return the name of the enum member.   value Return the value of the enum member.    Related functions    Function Description     del_enum Delete an enumerator type.   enum Get an enumerator member by value.   enum_info Return info about the enumerator type.   enums_info Return info about all the enumerator types in the current scope.   has_enum Determine if the current scope has a given enumerator type.   is_enum Test if a given value is a member of an enumerator type.   mod_enum Modify an existing enumerator type.   rename_enum Rename the enumerator type.   set_enum Create a new enumerator type.    Example // Create an enumeration type using `set_enum` set_enum('Severity', { CRITICAL: 1, MAJOR: 2, MINOR: 3, DEBUG: 4, }); // Get a member by name a = Severity{CRITICAL}; // Get a member by value b = Severity(2); // MAJOR // Dynamically by name c = Severity{||'MINOR'}; // Or, dynamically both by name and value d = enum('Severity', 4); // DEBUG // Variable `a`, `b`, `c` and `d` are all members of type `Severity` type_assert(a, 'Severity'); type_assert(b, 'Severity'); type_assert(c, 'Severity'); type_assert(d, 'Severity'); // The actual value can be accessed via the `.value()` function assert( b.value() == 2 ); // Or, the name can be returned using the `.name()` function assert( c.name() == 'MINOR'); // The value of the members will be returned in a response [a, b, c, d];  Return value in JSON format\n [ 1, 2, 3, 4 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/enum/name/","title":"name","tags":[],"description":"","content":"Returns the name of the enumerator member.\nThis function does not generate a change.\nFunction member.name()\nArguments None\nReturn value Returns the name of the enumerator member.\nExample  This code creates a closure with a doc string:\n set_enum(\u0026quot;Color\u0026quot;, { RED: '#f00' }); // Return the name of Color{RED} Color{RED}.name();  Return value in JSON format\n \u0026#34;RED\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/enum/value/","title":"value","tags":[],"description":"","content":"Returns the value of the enumerator member.\nThis function does not generate a change.\nFunction member.value()\nArguments None\nReturn value Returns the name of the enumerator member.\nExample  This code creates a closure with a doc string:\n set_enum(\u0026quot;Color\u0026quot;, { RED: '#f00' }); val = Color{RED}.value(); assert( is_str( val ) ); // the value is of type `str` val.upper(); // Return the value upper case  Return value in JSON format\n \u0026#34;#F00\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/error/","title":"error","tags":[],"description":"","content":"When an error occurs within a function, an object can be returned. The object, called an error, contains information about the error, including its type and a message.\nFunctions    Function Description     code Return the error code.   msg Return the error message.    Related functions    Function Description     err Initialize a new error.   raise Raise an error.   try Try a statement and catch if an error is raised.    Build-in errors See errors for a list of all the build-in error type.\n"},{"uri":"https://docs.thingsdb.net/v1/data-types/error/code/","title":"code","tags":[],"description":"","content":"Returns the error code of an error type.\nThis function does not generate a change.\nFunction error.code()\nArguments None\nReturn value Returns error code of an error.\nExample  This code uses code() to return the error code for an error:\n type_err(\u0026quot;incorrect type\u0026quot;).code();  Return value in JSON format\n -61 "},{"uri":"https://docs.thingsdb.net/v1/data-types/error/msg/","title":"msg","tags":[],"description":"","content":"Returns the error message of an error type.\nThis function does not generate a change.\nFunction error.msg()\nArguments None\nReturn value Returns error message of an error.\nExample  This code uses code() to return the error code for an error:\n type_err(\u0026quot;incorrect type\u0026quot;).msg();  Return value in JSON format\n \u0026#34;incorrect type\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/float/","title":"float","tags":[],"description":"","content":"ThingsDB uses 64bit to store float values and has support for the e notation and special float values like inf, -inf and nan.\nUseful functions    Function Description     float return a float type for a given value.   is_float check if the given value is of the float type.   is_inf check if the given value is infinite.   is_nan check if the given value is not-a-number.     This code creates a float property plank_constant to collection stuff:\n // Assign property `plank_constant` .plank_constant = 6.62607004e-34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/future/","title":"future","tags":[],"description":"","content":"Futures are mainly used for modules, but they can also be used to run some code at some later time. A future does not require a change. If the future is followed with a then or else closure, then the code inside this closure will generate it\u0026rsquo;s own event if required.\nFor example, the code below will always create a change, no matter what the value of x is. This is because ThingsDB has to know if a change is required before it knows the value of x.\nif (x \u0026gt; 10, { .answers.push(x); }); When using a future we could optimize the code:\nif (x \u0026gt; 10, { future(nil, x).then(|_, x| { .answers.push(x); // This will still require a *change*, but the event // is only created when x \u0026gt; 10. }); }); Instead of using the future(nil, ..).then(|_, ..| ..) construction, a future accepts a closure as first argument to be used as a shortcut. So the above can be written as:\nif (x \u0026gt; 10, { future(|x| { .answers.push(x); // This will still require a *change*, but the event // is only created when x \u0026gt; 10. }); }); Modules When a future is used to call a module, the first argument of the future will be the request for the module and must be a thing containing at least a module property.\nFor example, the code below will trigger the module DEMO. The module would receive {module: \u0026quot;DEMO\u0026quot;} as request.\nfuture({ module: 'DEMO' }); Besides the required module property, a property deep will be understood and will tell ThingsDB how deep the request must be packed. The default deep value is one (1).\nFor example:\n// Deep must be at least 2, otherwise the items are not packed for the module request future({ module: 'DEMO', deep: 2, items: [{ name: 'item1' }, { name: 'item2' }] }); Data from a module is returned to ThingsDB as mpdata by default. For example:\n// Suppose we have a DEMO module which accepts a message and returns with a reply message: future({ module: 'DEMO', message: 'This is a test' }).then(|reply| type(reply)); // type reply will be `mpdata`, not `str` !! The above is fine if we want the result, in this case the reply, back to our client. If we on the other hand want to do something with the reply message, we can either choose to call .load() on the reply value but a better option would be to set the load property to true in the request, for example:\n// Suppose we have a DEMO module which accepts a message and returns with a reply message: future({ module: 'DEMO', load: true, message: 'This is a test' }).then(|reply| type(reply)); // now `reply` is of type `str` Functions    Function Description     then Accepts a closure which will be executed when the future was successful.   else Accepts a closure which will be executed when the future has failed.    Related functions    Function Description     future Create a new future.   is_future Test if a given value is of type future.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/future/then/","title":"then","tags":[],"description":"","content":"Function then accepts a closure as argument which will be executed only when the future is successful. The code inside the closure will only generate a change then the closure code is executed. The return value of the closure will be used as the new future value.\nThe closure will be called with the same arguments as given to the future, except for the first argument, which can be the result of a module.\nThis function does not generate a change.\nFunction future.then(closure)\nArguments    Argument Type Description     callback closure (required) Closure when will be executed when successful    Return value Returns the parent future.\nExample  This code shows an example using then():\n a = 6; b = 7; future(nil, a, b).then(|_, a, b| { a * b; });  Example return value in JSON format\n 42 "},{"uri":"https://docs.thingsdb.net/v1/data-types/future/else/","title":"else","tags":[],"description":"","content":"Function else accepts a closure as argument which will be executed only when the future is using a module which has failed with some error. The code inside the closure will only generate a change when the closure code is executed. The return value of the closure will be used as the new future value.\nThe closure will be called with the same arguments as given to the future, except for the first argument, which is the error from the module.\nThis function does not generate a change.\nFunction future.else(closure)\nArguments    Argument Type Description     callback closure (required) Closure when will be executed when successful    Return value Returns the parent future.\nExample  This code shows an example using then():\n // This module will not work since `dummy` does not exist new_module('DUMMY', 'dummy'); // Some values for this example a = 6; b = 7; future({ module: 'DUMMY' }, a, b).else(|err, a, b| { assert( is_err(err) ); // the first argument is of type `error` assert (a * b == 42 ); // arguments are also available in the `else` case err.msg(); // set the error message as return value });  Example return value in JSON format\n \u0026#34;module `DUMMY` is not running (status: module not installed)\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/int/","title":"int","tags":[],"description":"","content":"ThingsDB can store 64bit signed integer values. When assigning integer values larger than 64bit, an overflow_err() will be returned. Other types can be converted to int by using the int function.\nNotations    Base Example Description     2 0b1111011 Binary notation starts with 0b (zero, lower case b), followed by binary digits (0-1).   8 0o173 Octal notation starts with 0o (zero, lower case o), followed by octal digits (0-8).   10 123 Decimal notation, numbers between zero and nine (0-9).   16 0x7b Hexadecimal notation start with a 0x (zero, lower case x), followed by hexadecimal digits (0-9, a-f or A-F).     This code creates a int property count to the root of a collection:\n .count = 123; "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/","title":"list","tags":[],"description":"","content":"An empty list can be constructed like this: list = [];\nNesting is also possible but each nested list will become a tuple which means the \u0026lsquo;list\u0026rsquo; will be immutable. ThingsDB does this because it wants to update all changes to subscribers and finds the subscribers by the parent object where the change is made. Since the parent of a nested \u0026lsquo;list\u0026rsquo; is another list, the thing holding the list would not be found.\nFunctions    Function Description     choice Return a random item from a list.   clear Remove all items from a list.   each Iterate over all items in a list.   every Check if all items pass a given test.   extend Add an array with items to the end of a list and returns the new length.   extend_unique Like extend but only append items which do not have a duplicate in the list.   filter Return a new list with items that passed a given test.   find Return the first item that passed a given test.   find_index Return the index of the first item that passed a given test.   first Return the first item from a list.   has Return true if a given value is found in the list, or false if not found.   index_of Return the index of a given value, or nil if not found.   is_unique Returns true if each item in a list is unique or false if a duplicate is found.   join Returns a string with all items joined.   last Return the last item from a list.   len Return the length of the list.   map Return a new list with the results of calling a provided closure on every item.   pop Remove the last item from a list and returns that item.   push Add new items to the end of a list and returns the new length.   reduce Execute a reducer function on each item, resulting in a single output value.   remove Remove items that pass a given test and returns the removed items in a list.   restriction Return the restriction of the list or nil when the list is not restricted.   reverse Return a new list with the items in reverse order.   shift Remove the first item from a list and returns that item.   some Check if at least one item passes a given test.   sort Return a new sorted list.   splice Change a list by removing or replacing existing items and/or adding new items.   unique Returns a new list without duplicate items.   unshift Add new items to the start of a list and returns the new length.    It is not possible to change a list while the list is in use, for example: tmp = [1, 2, 3]; tmp.map(|i| tmp.push(i)); \u0026hellip;will raise bad_data_err() (cannot change type list while the value is being used)\n Reference versus copy It might be useful to understand when ThingsDB uses a reference to a list, and when it makes copy. As long as a list is used as a variable, then ThingsDB uses a reference to the list. If a list will be assigned to a thing, or if a list which is assigned to a thing, will be assigned to a variable, then a copy will be made. For example:\na = [1, 2]; b = a; // both `a` and `b` are variable so a *reference* is used. .c = a; // `c` is assigned, so a *copy* will be made. a.push(3); // note that `.c` is not affected because `.c` is a *copy*. // Return the values [a, b, .c];  Response in JSON format:\n [ [1, 2, 3], [1, 2, 3], [1, 2] ] The same is true for when a list is used within a closure. For example:\na = []; // `list` assigned to a variable // `a` stays a variable, so a reference will be used a2 = range(3).reduce(|arr, val| {arr.push(val); arr;}, a); // [0, 1, 2] assert (a == a2); // both `a` and `a2` are a reference to the same list  And when a list is assigned to a thing\u0026hellip;\n .b = []; // `list` assigned to a thing // `.b` will be assigned to `arr`, so in the first iteration a *copy* will be made b2 = range(3).reduce(|arr, val| {arr.push(val); arr;}, .b); // [0, 1, 2] assert (.b != b2); // [] != [0, 1, 2] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/choice/","title":"choice","tags":[],"description":"","content":"This function returns a pseudo-random item from a list or tuple . The array must contain at least one item, otherwise a lookup_err() is raised.\nThis function does not generate a change.\nFunction array.choice()\nArguments None\nReturn value A pseudo-random item from the array.\nExample  This code shows an example using choice():\n // Returns either `a`, `b` or `c` ['a', 'b', 'c'].choice();  Example return value in JSON format\n \u0026#34;b\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/clear/","title":"clear","tags":[],"description":"","content":"Removes all items from a list.\nThis function generates a change\nFunction list.clear()\nArguments None\nReturn value Returns nil.\nExample  This code adds things to a set:\n arr = ['a', 'b', 'c']; arr.clear(); arr; // the list is empty  Return value in JSON format\n [] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/each/","title":"each","tags":[],"description":"","content":"Iterate over all the items in an list or tuple. Use this functions instead of map when you are not interested in the return value.\nThis function does not generate a change.\nFunction array.each(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over all items in the array. Both item and index are optional.    Return value None\nExample  Generate the first n values of the Fibonacci sequence.\n fibonacci = |n| { seq = range(2); // Return the first `n` items when `n` is less or equal to 1. n \u0026lt;= 1 \u0026amp;\u0026amp; return(seq[:n]); // Append the sum of the last two items, and do this `n` minus 2 times. // Function `each` is used since we do not use the return value. range(2, n).each(||seq.push(seq[-2]+seq[-1])); // Return the sequence. seq; }; // Return the first 10 items of the Fibonacci sequence. fibonacci(10);  Return value in JSON format\n [ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/every/","title":"every","tags":[],"description":"","content":"This function checks if all items in the list or tuple pass a given test. It returns a boolean value.\nCalling this function on an empty array returns true for any condition!\n This function does not generate a change.\nFunction array.every(callback)\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to false.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over items in the array. Both item and index are optional.    Return value Returns true if every item in the array satisfies the check in the callback function. Otherwise, false.\nExample  This code shows an example using every():\n a = [12, 5, 8, 130, 44].every(|x| x \u0026gt;= 10); // false b = [12, 54, 18, 130, 44].every(|x| x \u0026gt;= 10); // true // Return both a and b [a, b];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/extend/","title":"extend","tags":[],"description":"","content":"Adds a list or tuple with items to the end of a list, and returns the new length.\nThis function generates a change (except when called on a variable).\nFunction list.extend(list)\nArguments    Argument Type Description     list list/tuple The list or tuple to extend the list with.    Return value Returns the new length of the list.\nExample  This code extends a list with a given array:\n a = [1, 2, 3]; b = [4, 5, 6]; a.extend(b); // returns the new length, 6 a;  Return value in JSON format\n [ 1, 2, 3, 4, 5, 6 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/extend_unique/","title":"extend_unique","tags":[],"description":"","content":"Adds a list or tuple with items to the end of a list, and returns the new length. Only items which do not have a duplicate in the list will be added.\nAn item in the list is marked as a duplicate when an item is compared as equal to another item using the == operator.\nIf the original list contains duplicate items, those items remain untouched. See example 2.\n This function generates a change (except when called on a variable).\nFunction list.extend_unique(list)\nArguments    Argument Type Description     list list/tuple The list or tuple to extend the list with.    Return value Returns the new length of the list.\nExample 1  This code extends a list with a given array:\n a = [0, 1, 2]; b = range(6); a.extend_unique(b); // returns the new length, 6 (0, 1 and 2 are not added again) a;  Return value in JSON format\n [ 0, 1, 2, 3, 4, 5 ] Example 2  Existing duplicates remain untouched:\n list1 = ['A', 'A', 'B']; list2 = ['B', 'B', 'C']; list1.extend_unique(list2); // Note that list2 is untouched and pre-existing duplicates // in list1 are not removed { list1: list1, list2: list2 };  Return value in JSON format\n { \u0026#34;list1\u0026#34;: [ \u0026#34;A\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34; ], \u0026#34;list2\u0026#34;: [ \u0026#34;B\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34; ] } "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/filter/","title":"filter","tags":[],"description":"","content":"The function returns a new list with items that pass the test.\nThis function does not generate a change.\nFunction array.filter(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over all items in the array. Both item and index are optional.    Return value A new list with the items that pass the test. If no items passed the test, an empty list will be returned.\nExample  This code shows an example using filter():\n users = [{name: 'Iris', age: 6}, {name: 'Sasha', age: 34}]; /* * Return all users with age 18 or above */ users.filter(|user| user.age \u0026gt;= 18);  Return value in JSON format\n [ { \u0026#34;age\u0026#34;: 34, \u0026#34;name\u0026#34;: \u0026#34;Sasha\u0026#34; } ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/find/","title":"find","tags":[],"description":"","content":"This function returns the value of the first item in the list or tuple that passes the test. Otherwise nil is returned if no alternative return value is specified.\nThis function does not generate a change.\nFunction array.find(callback, [alt])\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to true.   alt any (optional) Alternative value which is returned if no item has passed the callback test.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over items in the array. Both item and index are optional.    The alt argument will be lazily evaluated. Consider the following example: elems.find(|e| e.name == \u0026quot;foo\u0026quot;, items.pop()); Here, the item will only be popped, in case e with name foo is not found in elems.\n Return value The value of the first item in the array that passes the test; otherwise, nil or a specified alternative value is returned.\nExample  This code shows an example using find():\n users.find(|user| user.name.starts_with('Jeroen'));  Example return value in JSON format\n { \u0026#34;#\u0026#34;: 16, \u0026#34;email\u0026#34;: \u0026#34;jeroen@cesbit.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Jeroen van der Heijden\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/find_index/","title":"find_index","tags":[],"description":"","content":"This function returns the index of the first item in a list or tuple that passes the test. Otherwise nil is returned.\nThis function does not generate a change.\nFunction array.find_index(callback)\nArguments    Argument Type Description     callback closure The statement to try.    Explanation of the callback argument:\n   Iterable Callback arguments Description     array item, index Iterate over items in the array. Both item and index are optional.    Return value The index of the first item in the array that passes the test; otherwise, nil is returned.\nExample  This code shows an example using find_index():\n // some sports as an example sports = ['cycling', 'baseball', 'running', 'tennis', 'skateboarding']; // return the index of `running` in list sports.find_index(|sport| sport == 'running');  Return value in JSON format\n 2 "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/first/","title":"first","tags":[],"description":"","content":"Returns the first item in the list. A lookup_err() is raised when this function is used on an empty list unless a default value is given, in which case the given value will be returned.\nThingsDB uses lazy-evaluation of function arguments. For this reason the default value might be a function call or code block which will only be evaluated when the list is empty.\n This function does not generate a change.\nFunction array.first([alt]])\nArguments    Argument Type Description     alt any (optional) Alternative value which is returned when the list is empty.    Return value First item in the list.\nExample  This code shows an example using first():\n [\u0026quot;January\u0026quot;, \u0026quot;February\u0026quot;, \u0026quot;March\u0026quot;, \u0026quot;April\u0026quot;].first();  Return value in JSON format\n \u0026#34;January\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/has/","title":"has","tags":[],"description":"","content":"Determines if a list or tuple has a given value.\nThis function does not generate a change.\nFunction array.has(value)\nArguments    Argument Type Description     value any (required) Value to check.    Return value Returns true if the given value is found in the list and otherwise false.\nExample  This code shows an example use case of has():\n months = [\u0026quot;January\u0026quot;, \u0026quot;February\u0026quot;, \u0026quot;March\u0026quot;, \u0026quot;April\u0026quot;]; [ months.has(\u0026quot;March\u0026quot;), months.has(\u0026quot;May\u0026quot;) ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/index_of/","title":"index_of","tags":[],"description":"","content":"The function returns the first index of the item in a list or tuple that matches the provided value, otherwise nil if it is not present. The index of an array starts at 0, so the first item has index 0 the second 1 and so on.\nThis function does not generate a change.\nFunction array.index_of(value)\nArguments    Argument Type Description     value any The value to find the index for.    Return value Index at which the first item matches a given value, or nil if it is not present.\nExample  This code shows an example using index_of():\n [\u0026quot;January\u0026quot;, \u0026quot;February\u0026quot;, \u0026quot;March\u0026quot;, \u0026quot;April\u0026quot;].index_of(\u0026quot;March\u0026quot;);  Return value in JSON format\n 2 "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/is_unique/","title":"is_unique","tags":[],"description":"","content":"This function determines whether each item in a list is unique or not.\nAn item in the list is marked as a duplicate when an item is compared as equal to another item using the == operator.\nThis function does not generate a change.\nFunction list.is_unique()\nArguments None\nReturn value Returns true if each item in the list is unique or false if not.\nExample  This code shows some return values for is_unique():\n [ [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;].is_unique(), [\u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;, \u0026quot;foo\u0026quot;].is_unique(), ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/join/","title":"join","tags":[],"description":"","content":"This function returns a new string by concatenating all items in a list or tuple. All items in the list or tuple must be of type str, otherwise a type_err() is raised.\nThis function does not generate a change.\nFunction array.join([separator])\nArguments    Argument Type Description     separator str (optional) Optional separator. The default separator is an empty string (\u0026quot;\u0026quot;) which results in a string with all items joined without any characters in between.    Return value Returns a string with all items joined. An empty string is returned if the list or tuple is empty.\nExample  This code shows an example using join():\n // Returns a new string ['Hello', 'ThingsDB'].join(\u0026quot; \u0026quot;);  Return value in JSON format\n \u0026#34;Hello ThingsDB\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/last/","title":"last","tags":[],"description":"","content":"Returns the last item in the list. A lookup_err() is raised when this function is used on an empty list unless a default value is given, in which case the given value will be returned.\nThingsDB uses lazy-evaluation of function arguments. For this reason the default value might be a function call or code block which will only be evaluated when the list is empty.\n This function does not generate a change.\nFunction array.last([alt]])\nArguments    Argument Type Description     alt any (optional) Alternative value which is returned when the list is empty.    Return value Last item in the list.\nExample  This code shows an example using last():\n [\u0026quot;January\u0026quot;, \u0026quot;February\u0026quot;, \u0026quot;March\u0026quot;, \u0026quot;April\u0026quot;].last();  Return value in JSON format\n \u0026#34;April\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/len/","title":"len","tags":[],"description":"","content":"Returns the length of a list or tuple.\nThis function does not generate a change.\nFunction array.len()\nArguments None\nReturn value Returns length of the array.\nExample  This code uses len() to return the number of items in a collection:\n [1, 2, 3, 4].len();  Return value in JSON format\n 4 "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/map/","title":"map","tags":[],"description":"","content":"The function iterates over items in an list or tuple and returns a new list based on the results of a given callback function.\nThis function does not generate a change.\nFunction array.map(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over all items in the array. Both item and index are optional.    Return value A new list of items that are the result of the callback function.\nExample  This code shows an example using map():\n users = [{name: \u0026quot;Iris\u0026quot;, age: 6}, {name: \u0026quot;Sasha\u0026quot;, age: 34}]; // returns [\u0026quot;Iris\u0026quot;, \u0026quot;Sasha\u0026quot;] users.map(|user| user.name);  Return value in JSON format\n [ \u0026#34;Iris\u0026#34;, \u0026#34;Sasha\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/pop/","title":"pop","tags":[],"description":"","content":"Removes the last item from a list and returns that item.\nThis function changes the length of the list. The pop() function works on a list type array, but not on a tuple since tuples are immutable.\nThis function generates a change (except when called on a variable).\nFunction list.pop()\nArguments None\nReturn value The removed item from the list. A lookup_err() is raised if the list is empty.\nExample  This code show an example usage of pop():\n (list = [1, 2, 3]).pop(); // 3 list;  Return value in JSON format\n [ 1, 2 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/push/","title":"push","tags":[],"description":"","content":"Adds new items to the end of a list, and returns the new length.\nThis function generates a change (except when called on a variable).\nFunction list.push(item1, item2, ..., itemX)\nReturn value Returns the new length of the list.\nExample  This code pushes values to a list:\n list = [1, 2, 3]; list.push(4, 5, 6); // Returns the new length, 6 list;  Return value in JSON format\n [1, 2, 3, 4, 5, 6] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/reduce/","title":"reduce","tags":[],"description":"","content":"Executes a given reducer closure on every item of the list, accumulating to a single return value.\nThis function does not generate a change.\nFunction array.reduce(reducer, [initial])\nArguments    Argument Type Description     reducer closure (required) Closure to execute on every value (except for the first, if no initial value is provided).   initial any (optional) The initial value serves as the first argument of the callback during the first call. If no initial value is provided, the first item in the array will be used instead and not processed by the callback. Calling reduce() on an empty list without an initial value will raise a lookup_err().    The reducer argument takes three optional arguments:\n   Argument Description     (0) accumulator An accumulated value that is returned by the previously invoked callback—or initial value.   (1) current The current item in the list that is being processed by the callback.   (2) index The index of the current item in the list that is being processed by the callback. If an initial value is given, it start from index 0, else, it starts from index 1.    Return value The single value that results from the reduction.\nExamples  Sum all the values of a list:\n [0, 1, 2, 3].reduce(|a, b| a+b);  Return value in JSON format\n 6  Sum values in a thing list:\n // An initial value is required [{x: 1}, {x: 2}, {x: 3}].reduce(|a, b| a+b.x, 0);  Return value in JSON format\n 6  Flatten a list with tuples:\n // Use an empty list as initial value [[1, 2], [3, 4], [5, 6]].reduce(|a, b| {a.extend(b); a}, []);  Return value in JSON format\n [1, 2, 3, 4, 5, 6] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/remove/","title":"remove","tags":[],"description":"","content":"This function removes all values in the list that satisfies the callback function. The removed values will be returned in a new list. An empty list is returned if no values are removed.\nThis function generates a change.\nFunction list.remove(callback, [limit])\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.   limit int (optional) Limit the number of items to remove. When negative, removal starts at the end of the list and removes at most the absolute value of limit.    Explanation of the callback argument:\n   Iterable Arguments Description     list item, index Iterate over items in the list. Both item and index are optional.    When limit is a negative value, removing starts at the end of the list. Note that in this case the returned list still contains the removed items in the same order as they were in the original list.\n Return value A list with the removed items from the list. The order of items in the new list will be the same as the original order in the list.\nExample  This code shows an example using remove() on a list:\n tmp = [1, 2, 3, 4]; [ tmp.remove(|x| x%2==0), tmp, ];  Return value in JSON format\n [ [ 2, 4 ], [ 1, 3 ] ]  Example with a negative limit:\n tmp = [1, 2, 3, 4, 5, 6, 7, 8]; // Remove the last two items from the list which pass the test [ tmp.remove(|x| x%2==0, -2), tmp, ];  Return value in JSON format (note that the order is equal to the original list)\n [ [ 6, 8 ], [ 1, 2, 3, 4, 5, 7 ] ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/restriction/","title":"restriction","tags":[],"description":"","content":"Returns the lst restriction as type str or nil when the list is not value restricted.\nThis function does not generate a change.\nFunction array.restriction()\nArguments None\nReturn value Returns restriction of the list or nil if not value restricted.\nExample  Using restriction() on a non-restricted list:\n [1, 2, 3, 4].restriction();  Return value in JSON format\n null  Using restriction() on a restricted list:\n // Create an example type set_type('X', {arr: '[int]'}); X{}.arr.restriction();  Return value in JSON format\n \u0026#34;int\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/reverse/","title":"reverse","tags":[],"description":"","content":"The function returns a new list with items in reverse order.\nThis function does not generate a change.\nFunction array.reverse()\nArguments None\nReturn value A new list in reverse order.\nExamples  Simple sort\n // return a range in reverse order range(5).reverse()  Return value in JSON format\n [ 4, 3, 2, 1, 0 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/shift/","title":"shift","tags":[],"description":"","content":"Removes the first item from a list and returns that item.\nThis function changes the length of the list. The shift() function works on a list type array, but not on a tuple since tuples are immutable.\nThis function generates a change (except when called on a variable).\nFunction list.shift()\nArguments None\nReturn value The removed item from the list. A lookup_err() is raised if the list is empty.\nExample  This code show an example usage of shift():\n (list = [1, 2, 3]).shift(); // 1 list;  Return value in JSON format\n [ 2, 3 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/some/","title":"some","tags":[],"description":"","content":"This function checks if at least one item in the list or tuple passes a given test. It returns a boolean value.\nCalling this function on an empty array returns false for any condition!\n This function does not generate a change.\nFunction array.some(callback)\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to true.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over items in the array. Both item and index are optional.    Return value Returns true if at least one item in the array satisfies the check in the callback function. Otherwise, false.\nExample  This code shows an example using some():\n a = [2, 5, 8, 1, 4].some(|x| x \u0026gt;= 10); // false b = [12, 5, 8, 1, 4].some(|x| x \u0026gt;= 10); // true // Return both a and b [a, b];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/sort/","title":"sort","tags":[],"description":"","content":"When this function is used on a list or tuple, a new sorted list is returned.\nThis function does not generate a change.\nFunction array.sort([closure, [reverse]])\nArguments    Argument Type Description     callback closure (optional) Closure to execute on each value, which is used to determine how the list should be sorted.   reverse bool (optional) Determines the order of the returned list.    The reverse argument cannot be used together with a closure which takes two arguments. In this case the order should be specified within the closure.\n Return value A new sorted list.\nExamples  Simple sort\n // return a new list in ascending order [3, 1, 2].sort();  Return value in JSON format\n [ 1, 2, 3 ] With the reverse argument set to true, a new list will be returned in descending order.\n Reverse sort\n // return a new list in descending order [3, 1, 2].sort(true);  Return value in JSON format\n [ 3, 2, 1 ] When using a closure the sort behavior depends on the number of arguments the closure accepts. With one argument, each item in the list will be passed to the closure and the return value of the closure will be used to compare. Below is an example which uses such a closure to do a case-insensitive sort. Another common use case is when you want to sort things based on a property. For example a closure like |u| u.age could be used to sort users based on an age property.\n Sort using an one-argument callback\n // return a new list in ascending order, case-insensitive [\u0026quot;charlie\u0026quot;, \u0026quot;alpha\u0026quot;, \u0026quot;Beta\u0026quot;].sort(|s| s.lower());  Return value in JSON format\n [ \u0026#34;alpha\u0026#34;, \u0026#34;Beta\u0026#34;, \u0026#34;charlie\u0026#34; ] As a second option the sort function can accept a closure with two arguments. The return value of the given closure must return an integer value. When this value is \u0026lt; 0 then a goes before b, when 0 then both a and b are considered equal, and when \u0026gt;0 then a goes after b.\n Sort using a two-argument callback\n // list with `nil` values arr = [nil, \u0026quot;charlie\u0026quot;, nil, \u0026quot;alpha\u0026quot;, \u0026quot;beta\u0026quot;]; // return a new list in ascending order with `nil` values at the end arr.sort(|a, b| is_nil(a) ? 1 : is_nil(b) ? -1 : a \u0026lt; b ? -1 : a \u0026gt; b ? 1 : 0);  Return value in JSON format\n [ \u0026#34;alpha\u0026#34;, \u0026#34;beta\u0026#34;, \u0026#34;charlie\u0026#34;, null, null ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/splice/","title":"splice","tags":[],"description":"","content":"The splice() function changes a list by removing or replacing existing items and/or adding new items.\nThis function generates a change (except when called on a variable).\nFunction list.splice(start, [delete_count, [item1, item2, ..., itemX]]))`\nArguments    Argument Type Description     start int (required) Start index in the list. If it is negative, it will start that many items from the end of the list.   delete_count int (optional) Number of item to remove from thestart of the list. If \u0026lt;= 0, no items will be removed.   item1, item2, \u0026hellip;, itemX any (optional) Items to add, beginning from the startof the list.    Return value A list containing the deleted items.\nExample  This code replaces an item in a list at position 2:\n months = ['Jan', 'Feb', 'April']; months.splice(2, 1, 'March'); /* Returns: ['April'] */ months;  Return value in JSON format\n [ \u0026#34;Jan\u0026#34;, \u0026#34;Feb\u0026#34;, \u0026#34;March\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/unique/","title":"unique","tags":[],"description":"","content":"This function returns a new list where each item in the list is unique. If duplicated items are found, the first item will be retained.\nAn item in the list is marked as a duplicate when an item is compared as equal to another item using the == operator.\nThis function does not generate a change.\nFunction list.unique()\nArguments None\nReturn value Returns a new list where each item in the list is unique. The original list stays untouched.\nExample  This code shows an example of unique():\n [\u0026quot;tic\u0026quot;, \u0026quot;tac\u0026quot;, \u0026quot;tic\u0026quot;, \u0026quot;toe\u0026quot;].unique(); // the second `tic` will not be retained in the new list  Return value in JSON format\n [ \u0026#34;tic\u0026#34;, \u0026#34;tac\u0026#34;, \u0026#34;toe\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/list/unshift/","title":"unshift","tags":[],"description":"","content":"Adds new items to the start of a list, and returns the new length.\nThis function generates a change (except when called on a variable).\nFunction list.unshift(item1, item2, ..., itemX)\nReturn value Returns the new length of the list.\nExample  This code inserts values to the start of a list:\n list = [4, 5, 6]; list.unshift(1, 2, 3); // Returns the new length, 6 list;  Return value in JSON format\n [1, 2, 3, 4, 5, 6] "},{"uri":"https://docs.thingsdb.net/v1/data-types/mpdata/","title":"mpdata","tags":[],"description":"","content":"This is a special type within ThingsDB and is returned by all the *_info() functions.\nAs an example we can take the node_info and view the type. This will tell us that the value is indeed of the mpdata type.\n// get the current node info node_info = node_info(); // return the type as string to verify this is indeed the `info` type type(node_info);  Return value in JSON format\n \u0026#34;mpdata\u0026#34; The mpdata type is also returned by default from all modules. This way ThingsDB does not require to load responses into memory if nothing has to be done with the result.\nFunctions    Function Description     len Return the length of the data in bytes.   load Load the data into ThingsDB.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/mpdata/len/","title":"len","tags":[],"description":"","content":"Returns the length of mpdata in bytes.\nThis function does not generate a change.\nFunction mpdata.len()\nArguments None\nReturn value Returns length in bytes.\nExample  This code uses len():\n user_info('admin').len();  Example return value in JSON format (size may be different)\n 358 "},{"uri":"https://docs.thingsdb.net/v1/data-types/mpdata/load/","title":"load","tags":[],"description":"","content":"Load mpdata into ThingsDB.\nThis function does not generate a change.\nFunction mpdata.load()\nArguments None\nReturn value Returns a ThingsDB object.\nExample  This code uses load():\n admin = user_info('admin').load(); // `admin` is now a ThingDB object. admin.name;  Return value in JSON format\n \u0026#34;admin\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/nil/","title":"nil","tags":[],"description":"","content":"Probably the most simple type, it can be used as no value.\nIt might be convenient to use nil as the last statement in a query to prevent returning data which is not required. See the code example.\n This code uses nil to prevent returning unused data:\n my_array = [1, 2, 3, 42]; nil; /* without nil, the array above would be returned */  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/data-types/room/","title":"room","tags":[],"description":"","content":"This type can be used to emit events to all clients which have joined the room.\nIt is possible to use emit on rooms with Id nil but then the event will be emitted to no one.\nFunctions    Function Description     emit Emit a change.   id Return id of the room or nil when the room is not stored.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/room/emit/","title":"emit","tags":[],"description":"","content":"Emit an event to all clients which have joined this room. The event is a string value which you are free to choose. It is possible, but not required, to send extra arguments with the event.\nThis function does not generate a change.\nUsing events enables a user to write code like this example of a ChatRoom in the Python language:\nimport asyncio from thingsdb.util import event, Room from thingsdb.client import Client class ChatRoom(Room): @event(\u0026#39;new-message\u0026#39;) def on_new_message(self, msg): pass # do something with the message client = Client() loop = asyncio.get_event_loop() loop.run_until_complete(client.connect(\u0026#39;localhost\u0026#39;)) loop.run_until_complete(client.authenticate(\u0026#39;admin\u0026#39;, \u0026#39;pass\u0026#39;)) chat = ChatRoom( client, # ThingsDB Client() instance room=\u0026#39;.chat.id();\u0026#39;, # The \u0026#39;room\u0026#39; to join. This might be an Id or # code to find the id. scope=\u0026#39;//stuff\u0026#39;) # Collection Scope, defaults the the default # scope of the client. loop.run_forever() Function room.emit([deep], event, ...)\nArguments    Argument Type Description     deep int (optional) Specify how deep the arguments must be send with the event. (defaults to 1)   event str (required) Event name to emit. (name must have at least 1 and at most 255 characters)   \u0026hellip; any (optional) Arguments send together with the event.    Return value None\nExample  This code shows an example using emit():\n .chat = room(); .chat.emit('new-message', 'Hello Everyone!');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/data-types/room/id/","title":"id","tags":[],"description":"","content":"Returns the id of a room or nil if the room is not stored.\nThis function does not generate a change.\nFunction room.id()\nArguments None\nReturn value Returns id of a room or nil when the room is not stored.\nExample  This code uses id() to return a room id:\n .chat = room(); .chat.id(); // Returns the room id  Example return value in JSON format\n 624 "},{"uri":"https://docs.thingsdb.net/v1/data-types/regex/","title":"regex","tags":[],"description":"","content":"Regular expression can be constructed using a literal which consists of a pattern enclosed between slashes, as follows: re = /ab+c/;. It is probably a good idea to store a regex in a variable if you plan to use the regular expression multiple times. This prevents the requirement to compile the regular expression each time.\nFlags    Flag Description     i Case-insensitive search.   m Multi-line search.   s Allows . to match newline characters.    Functions    Function Description     test Test if a given string has a match with the regular expression.    Related functions    Function Description     is_regex Test if a given value is of type regex.   regex Create a new regex.   str.replace Replace one or more occurrences of a regex pattern in a string.   str.split Split a string based on a regex pattern.     This code uses a regular expression for an oversimplified email check:\n // Note: the email check is oversimplified, do not use in production email_test = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/; /* example usage of our 'email_test' */ email_test.test('info@thingsdb.net');  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/data-types/regex/test/","title":"test","tags":[],"description":"","content":"Test if a string matches a given regular expression and return true or false.\nThis function does not generate a change.\nFunction regex.test(string)\nArguments    Argument Type Description     string str (required) The string to test.    Return value true if there is a match between the string and the regular expression, otherwise false.\nExample  Examples using test():\n // The first regex is case sensitive, the second is case insensitive [ regex(\u0026quot;^hello\u0026quot;).test('Hello world!!'), regex(\u0026quot;^hello\u0026quot;, \u0026quot;i\u0026quot;).test('Hello world!!'), ];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/","title":"set","tags":[],"description":"","content":"A set is a collection which is unordered and can only contain things. Each thing will only exists once in a collection.\nFunctions    Function Description     add Add things to a set.   clear Remove all things from a set.   each Iterate over all items in a set.   every Check if all things pass a given test.   filter Return a new set with things that pass a given test.   find Return the first thing which passes a given test.   has Test if a set contains a given thing.   len Return the length of a set.   map Return a list with the results of calling a provided closure on every thing.   reduce Execute a reducer function on each thing, resulting in a single output value.   remove Remove things from a set. Accepts one or more things to remove or a closure to be used as a test. The removed things are returned in a list.   restriction Return the restriction of the set or nil when the set is not restricted.   some Check if at least one thing passes a given test.    Operators    Operation Description     ` ` (union)   \u0026amp; (intersection) Set with things common to a and b.   - (difference) Set with things in a but not in b.   ^ (symmetric difference) Set with things in either a or b but not both.     Example set operators\n anna = {}; cato = {}; iris = {}; a = set(cato, iris); b = set(cato, anna); assert (a | b == set(anna, cato, iris)); // Union assert (a \u0026amp; b == set(cato)); // Intersection assert (a - b == set(iris)); // Difference assert (a ^ b == set(anna, iris)); // Symmetric difference  Be careful using assignment operators on stored sets. Although set operations are processed very efficient, a change to a stored set requires a change. This change* is still an assignment and will therefore contain the complete resulting set. In practice this means that it is perfect to write something like set_a |= set_b, but avoid using a stored set like .set_a |= set_b.\n Related functions    Function Description     set Create a new empty set or convert a list to a new set.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/add/","title":"add","tags":[],"description":"","content":"Adds a new thing to the set and returns the number of things which are actually added to the set. For example my_set.add(#42); will return 0 if my_set already contains thing #42.\nThis function generates a change (except when called on a variable).\nFunction set.add(thing1, thing1, ..., thingX)\nReturn value Returns the number of things which are added to the set.\nExample  This code adds things to a set:\n s = set(); a = {item: 'a'}; b = {item: 'b'}; // add both `a` and `b` to set `s`; note that `a` is only added once; s.add(a, a, b);  Return value in JSON format\n 2 "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/clear/","title":"clear","tags":[],"description":"","content":"Removes all things from a set.\nThis function generates a change\nFunction set.clear()\nArguments None\nReturn value Returns nil.\nExample  This code adds things to a set:\n a = {item: 'a'}; b = {item: 'b'}; s = set(a, b); s.clear(); s; // the set is empty  Return value in JSON format\n [] "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/each/","title":"each","tags":[],"description":"","content":"Iterate over items in a set.\nBe aware that the order when iterating over a set or a thing is not guaranteed.\n This function does not generate a change.\nFunction set.each(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, Id Iterate over things in the set. Both thing and id are optional.    Return value None\nExample  This code shows an example using each():\n users = set( {name: \u0026quot;Iris\u0026quot;, age: 6}, {name: \u0026quot;Sasha\u0026quot;, age: 34} ); // Just an example, the same could be achieved using `filter` and `map`. old_enough = []; users.each(|user| user.age \u0026gt;= 18 \u0026amp;\u0026amp; old_enough.push(user.name)); // Return all the names of user which are old enough: old_enough;  Return value in JSON format\n [ \u0026#34;Sasha\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/every/","title":"every","tags":[],"description":"","content":"This function checks if all things in the set pass a given test. It returns a boolean value.\nCalling this function on an empty set returns true for any condition!\n This function does not generate a change.\nFunction set.every(callback)\nArguments    Argument Type Description     callback closure Closure to execute on each thing until the closure evaluates to false.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, Id Iterate over things in the set. Both thing and id are optional.    Return value Returns true if every thing in the set satisfies the check in the callback function. Otherwise, false.\nExample  This code shows an example using every():\n users = set({ name: 'Iris', age: 7, }, { name: 'Tess', age: 6 }); a = users.every(|user| user.age \u0026gt; 6); // false b = users.every(|user| user.age \u0026gt; 3); // true // Return both a and b [a, b];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/filter/","title":"filter","tags":[],"description":"","content":"The function returns a new set with things that pass the test.\nThis function does not generate a change.\nFunction set.filter(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, Id Iterate over things in the set. Both thing and id are optional.    Return value A new set with the things that pass the test. If no items passed the test, an empty set will be returned.\nExample  This code shows an example using filter():\n users = set({name: 'Iris', age: 6}, {name: 'Sasha', age: 34}); /* * Return all users with name 'Iris'. */ users.filter(|user| (user.name == 'Iris'));  Return value in JSON format\n [ { \u0026#34;age\u0026#34;: 6, \u0026#34;name\u0026#34;: \u0026#34;Iris\u0026#34; } ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/find/","title":"find","tags":[],"description":"","content":"This function returns the value of the first item in the set that passes the test. Otherwise nil is returned if no alternative return value is specified.\nThis function does not generate a change.\nThe return value when called on a set might be unpredictable since a set is not ordered. set({name: 'Iris'}, {name: 'Cato'}).find(||true); \u0026hellip;will return {Iris} or {Cato}.\n Function set.find(callback, [alt])\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to true.   alt any (optional) Alternative value which is returned if no item has passed the callback test.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, Id Iterate over things in the set. Both thing and id are optional.    The alt argument will be lazily evaluated. Consider the following example: elems.find(|e| (e.name == \u0026quot;foo\u0026quot;), items.pop()); Here, the item will only be popped, in case e with name foo is not found in elems.\n Return value The value of the first item in the set that passes the test; otherwise, nil or a specified alternative value is returned.\nExample  This code shows an example using find():\n users.find(|user| user.name.starts_with('Jeroen'));  Example return value in JSON format\n { \u0026#34;#\u0026#34;: 16, \u0026#34;email\u0026#34;: \u0026#34;jeroen@cesbit.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Jeroen van der Heijden\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/has/","title":"has","tags":[],"description":"","content":"Determines if a set has a given thing.\nThis function does not generate a change.\nFunction set.has(thing)\nArguments    Argument Type Description     thing thing (required) Thing to check.    Return value Returns true if the given thing is found in the set and otherwise false.\nExample  This code shows an example use case of has():\n iris = {name: 'Iris'}; s = set(iris); /* Check if iris is in set `s` */ s.has(iris);  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/len/","title":"len","tags":[],"description":"","content":"Returns the length of a set.\nThis function does not generate a change.\nFunction set.len()\nArguments None\nReturn value Returns length of the set.\nExample  This code uses len() to return the number of items in a set:\n set({item: 'a'}, {item: 'b'}).len();  Return value in JSON format\n 2 "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/map/","title":"map","tags":[],"description":"","content":"The function iterates over items in a set and returns a new list based on the results of a given callback function.\nBe aware that the order when iterating over a set or a thing is not guaranteed.\n This function does not generate a change.\nFunction set.map(callback)\nArguments Explanation of the callback argument:\n   Iterable Arguments Description     set thing, Id Iterate over things in the set. Both thing and id are optional.    Return value A new list of items that are the result of the callback function.\nExample  This code shows an example using map():\n users = [{name: \u0026quot;Iris\u0026quot;, age: 6}, {name: \u0026quot;Sasha\u0026quot;, age: 34}]; // returns [\u0026quot;Iris\u0026quot;, \u0026quot;Sasha\u0026quot;] set(users).map(|user| user.name).sort();  Return value in JSON format\n [ \u0026#34;Iris\u0026#34;, \u0026#34;Sasha\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/reduce/","title":"reduce","tags":[],"description":"","content":"Executes a given reducer closure on every thing in the set, accumulating to a single return value.\nA set is unordered and therefore the order how things are processed by the reducer might be different from what you expect.\n This function does not generate a change.\nFunction set.reduce(reducer, [initial])\nArguments    Argument Type Description     reducer closure (required) Closure to execute on every thing (except for the first, if no initial value is provided).   initial any (optional) The initial value serves as the first argument of the callback during the first call. If no initial value is provided, the first thing in the set will be used instead and not processed by the callback. Calling reduce() on an empty set without an initial value will raise a lookup_err().    The reducer argument takes three optional arguments:\n   Argument Description     (0) accumulator An accumulated value that is returned by the previously invoked callback—or initial value.   (1) current The current thing in the set that is being processed by the callback.   (2) Id Id of the current thing in the set that is being processed by the callback.    Return value The single value that results from the reduction.\nExamples  Sum all the values of a list:\n users = set({ name: 'Iris', age: 7, }, { name: 'Tess', age: 6 }); users.reduce(|total, user| total + user.age, 0);  Return value in JSON format\n 13 "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/remove/","title":"remove","tags":[],"description":"","content":"This function can be used to remove things from a set.\nIf a closure is used, then all things that satisfy the test are removed from the set and returned as list. The order of the removed things is not guaranteed since the set itself is unordered.\nIt is also possible to specify things as arguments. In this case a list is returned with all the things which are removed from the set, in the order that the arguments are used. Things which are not found in the set are ignored.\nThis function generates a change.\nFunction set.remove(callback, [limit])\nWhere limit is an optional positive integer which limits the things to remove. For example, a limit of 1 removes at most one thing from the set.\nOr\nset.remove(thing1, thing2, ..., thingX)\nIf a callback satisfies more than a given limit of things, it is not reliable which things are removed as the order of things in a set is not guaranteed.\n Arguments Explanation of the callback argument:\n   Iterable Arguments Description     set thing, thing Id Iterate over things in the set. Both thing and thing ID are optional.    Return value A list with the removed things from the set or an empty list if nothing is removed.\nExample  This code shows an example using remove() on a set:\n t1 = {x:1}; t2 = {x:2}; t3 = {x:3}; t4 = {x:4}; s = set(t1, t2, t3, t4); [ s.remove(|t| t.x \u0026lt; 3), s.remove(t1, t2, t3, t4), ]  Example return value in JSON format\n [ [ { \u0026#34;x\u0026#34;: 1 }, { \u0026#34;x\u0026#34;: 2 } ], [ { \u0026#34;x\u0026#34;: 3 }, { \u0026#34;x\u0026#34;: 4 } ] ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/restriction/","title":"restriction","tags":[],"description":"","content":"Returns the set restriction as type str or nil when the set is not value restricted.\nThis function does not generate a change.\nFunction set.restriction()\nArguments None\nReturn value Returns restriction of the set or nil if not value restricted.\nExample  Using restriction() on a non-restricted set:\n set().restriction();  Return value in JSON format\n null  Using restriction() on a restricted set:\n // Create an example type new_type('S'); set_type('Y', {set: '{S}'}); Y{}.set.restriction();  Return value in JSON format\n \u0026#34;S\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/set/some/","title":"some","tags":[],"description":"","content":"This function checks if at least one thing in the set passes a given test. It returns a boolean value.\nCalling this function on an empty set returns false for any condition!\n This function does not generate a change.\nFunction set.some(callback)\nArguments    Argument Type Description     callback closure Closure to execute on each thing until the closure evaluates to true.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, Id Iterate over things in the set. Both thing and id are optional.    Return value Returns true if at least one thing in the set satisfies the check in the callback function. Otherwise, false.\nExample  This code shows an example using some():\n users = set({ name: 'Iris', age: 7, }, { name: 'Tess', age: 6 }); a = users.some(|user| user.age \u0026gt; 18); // false b = users.some(|user| user.age \u0026gt; 6); // true // Return both a and b [a, b];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/","title":"str","tags":[],"description":"","content":"This is the string type of ThingsDB. A value of type str should contain valid UTF-8 characters. This is not guaranteed but rather depends on MessagePack to pack data correctly. There is an is_utf8 function which can be used to test a str value for valid UTF-8 data and it is also possible to create an utf8 property on a custom Type which only allows strings with valid UTF-8 data.\nFunctions    Function Description     contains Determine if a given string is a substring of a string.   ends_with Determine if a string ends with characters given by another string.   len Return the length of a string.   lower Return a new string in which all case-based characters are in lower case.   replace Returns a new string in witch occurrences of a given substring or regular expression match are replaced with another substring.   split Split a string into a new list with substrings.   starts_with Determine if a string starts with characters given by another string.   trim Returns a new string with whitespace characters removed from both the start and end of a string.   trim_left Returns a new string with whitespace characters removed from the start of a string.   trim_right Returns a new string with whitespace characters removed from the the end of a string.   upper Return a new string in which all case-based characters are in upper case.     This code creates a raw property greet to collection stuff:\n .greet = 'Hello world!!'; "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/contains/","title":"contains","tags":[],"description":"","content":"Determines if a given string is a substring of a string.\nThis function does not generate a change.\nFunction str.contains(search_string)\nArguments    Argument Type Description     search_string str (required) The characters to be searched for in the string.    Return value Returns true if the given characters are found as a substring and otherwise false.\nExample  This code shows an example using contains():\n 'the answer to life the universe and everything'.contains('life');  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/ends_with/","title":"ends_with","tags":[],"description":"","content":"Determines if a string ends with characters given by another string.\nThis function does not generate a change.\nFunction str.ends_with(search_string)\nArguments    Argument Type Description     search_string str (required) The characters to be searched for at the end of this string.    Return value Returns true if the given characters are found at the end of the string and otherwise false.\nExample  This code shows an example using ends_with():\n 'the answer to life the universe and everything'.ends_with('everything');  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/len/","title":"len","tags":[],"description":"","content":"Returns the length of a string.\nBe aware that the length represents the number of bytes and not the number of characters. see example below.\n This function does not generate a change.\nFunction str.len()\nArguments None\nReturn value Returns length of the string.\nExample  This code uses len() to return the length of a string:\n [ {'Hello'.len(); /* 5 bytes */ }, {'π'.len(); /* 2 bytes, not 1 */ }, ]  Return value in JSON format\n [ 5, 2 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/lower/","title":"lower","tags":[],"description":"","content":"Return a new string in which all case-based characters are in lower case.\nThis function does not generate a change.\nFunction str.lower()\nArguments None\nReturn value Returns a new string with all characters in lower case.\nExample  Example using lower():\n 'Hello World!!'.lower();  Return value in JSON format\n \u0026#34;hello world!!\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/replace/","title":"replace","tags":[],"description":"","content":"Return a new string in which in which the occurrences of old have been replaced with new. Instead of an old string it is also possible to use a regular expression and the new string may also be a closure which then in turn should return a new string to replace the old part with.\nOptionally, the number of replacements can be restricted and may start from either left or right (Unless a regular expression is used, in which case the number of replacements can only be restricted from the left).\nThis function does not generate a change.\nFunction str.replace(old, new, [number])\nArguments    Argument Type Description     old str/regex (required) The old substring to replace, or a regular expression to search for matches.   new str/closure (required) String which will replace the old substring. If a closure is used, the return value of the closure will be used to replace the old substring with (see closure arguments).   number int (optional) Maximum number of replacements. If not given, all occurrences of the old substring will be replaced. If negative, replacement starts at the end of the string (a negative replacement is only possible when old is of type str).    Closure Arguments This are the arguments which are given when a closure is used for new instead of a plain string:\n   Argument Description     groups 0..X The first arguments are all the capture groups. (Only when old is a regular expression)   full match After the capture groups, the next argument will be the full match. (Only when old is a regular expression)   start position Start position of the match in the original string.   end position End position of the match in the original string.   original string The original string. The full match thus is original[start:end].    Return value Returns a new string with all occurrences of old have been replaced with new, optionally limited by a maximum number of replacements.\nExample  Example using replace():\n [ { // Replace all occurrences of `blue` with `black` 'My favorite color is blue and I have a blue bicycle.'.replace('blue', 'black'); }, { // Replace the first occurrence of `white` with `black` 'My favorite color is white and I have a white car.'.replace('white', 'black', 1); }, { // Replace the last occurrence of `red` with `black` 'My favorite color is red and I have a red mountainbike.'.replace('red', 'black', -1); } ]  Return value in JSON format\n [ \u0026#34;My favorite color is black and I have a black bicycle.\u0026#34;, \u0026#34;My favorite color is black and I have a white car.\u0026#34;, \u0026#34;My favorite color is red and I have a black mountainbike.\u0026#34; ]  Example using replace() with a regular expression:\n s = 'Iris is 8 years old, has 3 bikes and about 25 books'; s.replace(/\\d+/, |m| str(int(m)+1));  Return value in JSON format\n \u0026#34;Iris is 9 years old, has 4 bikes and about 26 books\u0026#34;  Example using replace() with a regular expression and capture groups:\n s = 'This is an _example_!!'; s.replace(/_(\\w*)_/, |a| `\u0026lt;strong\u0026gt;{a}\u0026lt;/strong\u0026gt;`);  Return value in JSON format\n \u0026#34;This is an \u0026lt;strong\u0026gt;example\u0026lt;/strong\u0026gt;!!\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/split/","title":"split","tags":[],"description":"","content":"Return a new string in which all case-based characters are in lower case.\nThis function does not generate a change.\nFunction str.split([separator], [limit])\nArguments    Argument Type Description     separator str/regex (optional) The string used to split the original string. If omitted, white-space will be used as separator. Instead of a string, a regular expression may be used as well, see regular expression.   limit int (optional) Split at most limit times. If this value is negative, splitting starts from the end of the string. If omitted, no limit is used.    Regular expression If separator is a regular expression with capturing parentheses, then each time separator matches, the results of the capturing parentheses are added into the output list.\nReturn value Returns a new list with substrings.\nExamples  Example using split() without arguments:\n 'How are you doing?'.split();  Return value in JSON format\n [ \u0026#34;How\u0026#34;, \u0026#34;are\u0026#34;, \u0026#34;you\u0026#34;, \u0026#34;doing?\u0026#34; ]  Example using split() with a limit:\n 'This is a test'.split(1);  Return value in JSON format\n [ \u0026#34;This\u0026#34;, \u0026#34;is a test\u0026#34; ]  Example using split() with a negative limit:\n 'This is a test'.split(-1);  Return value in JSON format\n [ \u0026#34;This is a\u0026#34;, \u0026#34;test\u0026#34; ]  Example using split() with a separator:\n 'title,subject,body'.split(',');  Return value in JSON format\n [ \u0026#34;title\u0026#34;, \u0026#34;subject\u0026#34;, \u0026#34;body\u0026#34; ]  Example using split() with a regular expression:\n 'Found 143 songs of 3 minutes and 45 seconds.'.split(/\\d+/);  Return value in JSON format\n [ \u0026#34;Found \u0026#34;, \u0026#34; songs of \u0026#34;, \u0026#34; minutes and \u0026#34;, \u0026#34; seconds.\u0026#34; ]  Example using split() with a regular expression and capture groups:\n 'Found 143 songs of 3 minutes and 45 seconds.'.split(/\\s*(\\d+)\\s*/);  Return value in JSON format\n [ \u0026#34;Found\u0026#34;, \u0026#34;143\u0026#34;, \u0026#34;songs of\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;minutes and\u0026#34;, \u0026#34;45\u0026#34;, \u0026#34;seconds.\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/starts_with/","title":"starts_with","tags":[],"description":"","content":"Determines if a string starts with characters given by another string.\nThis function does not generate a change.\nFunction str.starts_with(search_string)\nArguments    Argument Type Description     search_string str (required) The characters to be searched for at the start of this string.    Return value Returns true if the given characters are found at the start of the string and otherwise false.\nExample  This code shows an example using starts_with():\n 'the answer to life the universe and everything'.starts_with('the answer');  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/trim/","title":"trim","tags":[],"description":"","content":"This function can be used to remove all white-space characters from both the start and end of a string. Whitespace characters include spaces, tabs, new-line characters etc.\nThis function does not generate a change.\nFunction str.trim()\nArguments None\nReturn value Returns a new string with whitespace characters removed from the start and end of the string.\nSee also  trim_left trim_right  Example  Example using trim():\n ' Hello World!! '.trim();  Return value in JSON format\n \u0026#34;Hello World!!\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/trim_left/","title":"trim_left","tags":[],"description":"","content":"This function can be used to remove all white-space characters from the start of a string. Whitespace characters include spaces, tabs, new-line characters etc.\nThis function does not generate a change.\nFunction str.trim_left()\nArguments None\nReturn value Returns a new string with whitespace characters removed from the start of the string.\nSee also  trim trim_right  Example  Example using trim_left():\n ' Hello World!! '.trim_left();  Return value in JSON format\n \u0026#34;Hello World!! \u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/trim_right/","title":"trim_right","tags":[],"description":"","content":"This function can be used to remove all white-space characters from the end of a string. Whitespace characters include spaces, tabs, new-line characters etc.\nThis function does not generate a change.\nFunction str.trim_right()\nArguments None\nReturn value Returns a new string with whitespace characters removed from the end of the string.\nSee also  trim trim_left  Example  Example using trim_right():\n ' Hello World!! '.trim_right();  Return value in JSON format\n \u0026#34; Hello World!!\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/str/upper/","title":"upper","tags":[],"description":"","content":"Return a new string in which all case-based characters are in upper case.\nThis function does not generate a change.\nFunction str.upper()\nArguments None\nReturn value Returns a new string with all characters in upper case.\nExample  Example using upper():\n 'Hello World!!'.upper();  Return value in JSON format\n \u0026#34;HELLO WORLD!!\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/","title":"task","tags":[],"description":"","content":"Functions    Function Description     again_at Re-schedule a task at a specific date/time.   again_in Re-schedule a task relative to the original start time.   args Get a new list with then task arguments.   at Get the task scheduled date/time.   cancel Cancel a task.   closure Return the closure of the task.   del Delete a task.   err Get the task error (if any).   id Return id of the task or nil when the task is removed.   owner Return the owner name of the task.   set_args Set task arguments.   set_closure Set a new closure (code to execute) for an existing task.   set_owner Change the owner of a task.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/again_at/","title":"again_at","tags":[],"description":"","content":"Re-schedules the task to a new date/time. The task will run again at the new date/time, even if the task returns with an error.\nIt is only possible to use again_at within the callback of the parent task. If may however be used within a future or other closure, as long as this closure is nested within the tasks callback.\n This function generates a change.\nFunction task.again_at(start)\nArguments    Argument Type Description     start datetime (required) Date/time when the task should start again.    Return value Returns nil when successful.\nExample  This code creates a repeating task:\n start = datetime(); // Create a repeating task (daily at 23:00) task(start, |task| { // Run the task again in one day, relative to the current time. // tip: use again_in() to move the task relative to the task scheduled time. task.again_at(datetime().move('days', 1)); log('Daily task'); });  Example return value in JSON format\n \u0026#34;\u0026lt;task:12 owner:admin run_at:2021-11-02T13:05:11Z status:nil\u0026gt;\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/again_in/","title":"again_in","tags":[],"description":"","content":"Re-schedules the task to a new date/time. The task will run again at the new date/time, even if the task returns with an error.\nIt is only possible to use again_at within the callback of the parent task. If may however be used within a future or other closure, as long as this closure is nested within the tasks callback.\n This function generates a change.\nFunction task.again_in(unit, num)\nArguments    Argument Type Description     unit str (required) One of years, months, weeks, days, hours, minutes or seconds.   num int (required) How many times to move the unit. A negative number will not work as this would shift the task to run in the past.    Return value Returns nil when successful.\nExample  This code create a repeating task:\n start = datetime().replace({ hour: 23, minute: 0, second: 0, }); // Create a repeating task (daily at 23:00) task(start, |task| { task.again_in('days', 1); log('Daily task'); });  Example return value in JSON format\n \u0026#34;\u0026lt;task:13 owner:admin run_at:2021-11-02T23:00:00Z status:nil\u0026gt;\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/args/","title":"args","tags":[],"description":"","content":"Get task arguments as a new list. As this function returns a new list, making changes to this list does not affect the task arguments.\nThis function does not generate a change.\nFunction task.args()\nArguments None\nReturn value Returns a new list with arguments.\nExample  This code will will be called every minute for 10 times and then the task will be removed.\n t = task( datetime().move('days', 1), |task, a, b| { .sum = a + b; }, [4, 6] ); t.args(); // Return the task arguments  Return value in JSON format\n [ 4, 6 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/at/","title":"at","tags":[],"description":"","content":"Get the scheduled start time of a task or nil if the task is not scheduled.\nThis function does not generate a change.\nFunction task.at()\nArguments None\nReturn value Returns the scheduled start time of a task or nil if the task is not scheduled.\nExample  Example usage task.at():\n t = task(datetime('2022-01-01'), ||log('Dummy task')); t.at();  Return value in JSON format\n \u0026#34;2022-01-01T00:00:00Z\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/err/","title":"err","tags":[],"description":"","content":"When a task as failed with an error, the error is stored on the task and the task will not be removed automatically. With this function you may get the error to view and/or debug the problem.\nThis function does not generate a change.\nFunction task.err()\nArguments None\nReturn value Returns the error when a task has failed or nil if the task is empty or without error.\nExample  Example usage task.err():\n .my_task = task(datetime(), || 1/0); Suppose we wait a few seconds and then check the task for errors:\n.my_task.err()  Return value in JSON format\n \u0026#34;division or modulo by zero\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/cancel/","title":"cancel","tags":[],"description":"","content":"Cancel a task. Using this function sets the task error to cancelled_err and the task will not be executed. This function differs from del() as it will not remove the task.\nThis function generates a change.\nFunction task.cancel()\nArguments None\nReturn value Returns nil.\nExample  Example usage task.cancel():\n t = task(datetime(), ||log('Dummy task')); t.cancel(); // cancel the task before it can start  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/closure/","title":"closure","tags":[],"description":"","content":"Get the closure of a task.\nThis function does not generate a change.\nFunction task.closure()\nArguments None\nReturn value Returns the closure of the task.\nExample  Example usage task.closure():\n t = task(datetime(), ||log('Dummy task')); t.closure();  Return value in JSON format\n \u0026#34;||log(\u0026#39;Dummy task\u0026#39;)\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/del/","title":"del","tags":[],"description":"","content":"Delete a task. After calling this function, the task will be removed from ThingsDB. If there are references to this task, then those references will no longer contain the original task but an empty task instead.\nThis function generates a change.\nFunction task.del()\nArguments None\nReturn value Returns nil.\nExample  Example usage task.del():\n t = task(datetime(), ||log('Dummy task')); t.del(); // delete the task before it can start  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/id/","title":"id","tags":[],"description":"","content":"Returns the id of a task or nil if the task is removed (empty).\nNotice that every task will be stored, thus all new tasks will get an Id. Only when a task is successfully finished or removed using del(), the task will be empty and therefore the Id will be nil.\nThis function does not generate a change.\nFunction task.id()\nArguments None\nReturn value Returns id of a task or nil if the task is removed (empty).\nExample  This code uses id() to return a task id:\n t = task(datetime().move('days', 1), ||log('Dummy task')); t.id(); // Returns the Id of the task.  Example return value in JSON format\n 624 "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/owner/","title":"owner","tags":[],"description":"","content":"Get the owner of the the task as string value.\nThis function does not generate a change.\nFunction task.owner()\nArguments None\nReturn value Returns the name of the owner from the task.\nExample  Example code to get the owner of a task:\n t = task(datetime(), ||nil); t.owner(); // Returns the owner of the task  Return value in JSON format\n \u0026#34;admin\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/set_args/","title":"set_args","tags":[],"description":"","content":"Set task arguments.\nIf less than the required arguments are given, then the remaining arguments will be set using nil. A num_arguments_err() is raised if the task too much arguments are used.\nWhen the task is created in the @thingsdb scope, only (some) immutable types like int, float, str etc. can be used as argument values.\n This function generates a change.\nFunction task.set_args(args)\nArguments    Argument Type Description     args list (required) List with task arguments.    Return value Returns nil when successful.\nExample  This code will will be called every minute for 10 times and then the task will be removed.\n task( datetime(), |task, x| { task.set_args([x+1]); if (x \u0026lt; 10, { log(`x = {x}`); task.again_in('seconds', 10); return(); }); log('Task `count x` is Done!'); }, [1] ); "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/set_closure/","title":"set_closure","tags":[],"description":"","content":"Change the closure to execute. Obsolete closure arguments will be removed when the new closure accepts less arguments than the previous closure. If the new closure accepts more arguments, the argument list will be extended with nil values.\nThis function generates a change.\nFunction task.set_closure(code)\nArguments    Argument Type Description     code closure (required) New closure to attach to the task.    Return value Returns nil when successful.\nExample  This code will change the closure of a task.\n t = task(datetime(), ||nil); // Change the closure of the task t.set_closure(|| { log('New closure!'); }); "},{"uri":"https://docs.thingsdb.net/v1/data-types/task/set_owner/","title":"set_owner","tags":[],"description":"","content":"Change the owner of a task. The new owner must have at least CHANGE permissions on scope where the task is created.\nChanging the owner is useful if you plan to remove an existing user as removing a user will also delete the tasks of the user.\n This function generates a change.\nFunction task.set_owner(name)\nArguments    Argument Type Description     name str (required) Name of the new owner.    Return value Returns nil when successful.\n"},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/","title":"thing","tags":[],"description":"","content":"Functions    Function Description     assign Copies properties from a thing.   clear Remove all properties from a thing.   copy Copy a thing to a new thing. A Type is not preserved.   del Remove a property.   dup Duplicate a thing while preserving the Type.   each Iterate over all properties of a thing.   equals Test if two things are equal.   filter Return a new thing with properties that pass a given test.   get Return the value of a property on a thing by a given property name.   has Determine if a thing has a given property.   id Return id of the thing or nil when the thing is not stored.   keys Return a list with all the property names of a thing.   len Return the number of items.   map Return a list with the results of calling a provided closure on every property.   remove Remove properties that pass a given test and returns the removed values in a list.   restrict Set or remove a value restriction on a thing.   restriction Return the restriction of the thing or nil when the thing is not restricted.   set Create a new or overwrite an existing property on a thing.   to_type Converts a thing into a typed thing.   values Return a list with all the property values of a thing.   wrap Wrap the thing with a Type.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/assign/","title":"assign","tags":[],"description":"","content":"Copies properties from a given thing. Existing properties will be overwritten and new properties will be added. If this function is used on a typed thing, all properties of the source must be valid according the type specification, otherwise an exception will be raised and no properties will be copied.\nIt is not possible to use assign(..) to set a property with a relation unless the source if of the same Type.\n This function generates a change.\nFunction thing.assign(source)\nArguments    Argument Type Description     source thing (required) Thing from which the properties are copied.    Return value Returns the thing to which the properties are assigned.\nExample  This code shows an example using assign():\n scores = { iris: 10, job: 20 }; scores.assign({ job: 80, tijs: 90 });  Return value in JSON format\n { \u0026#34;iris\u0026#34;: 10, \u0026#34;job\u0026#34;: 80, \u0026#34;tijs\u0026#34;: 90 } "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/clear/","title":"clear","tags":[],"description":"","content":"Removes all properties from a thing.\nThis function generates a change\nFunction thing.clear()\nArguments None\nReturn value Returns nil.\nExample  This code adds things to a set:\n my_thing = { a: 'Property A', b: 'Property B', c: 'Property C' }; my_thing.clear(); my_thing; // the thing is empty  Return value in JSON format\n {} "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/copy/","title":"copy","tags":[],"description":"","content":"Copy a thing.\nThe function does not preserve the Type of a thing. Use dup(..) if you want a copy of the same type.\n This function does not generate a change.\nFunction thing.copy([deep]])\nArguments    Argument Type Description     deep int (optional) How deep to copy the thing. Default is 1.    Return value A new thing.\nExample  This code shows an example using copy():\n a = {x: 123}; b = a.copy(); // `b` is a copy, so `a.x` will not change b.x = 456; [a.x, b.x];  Return value in JSON format\n [ 123, 456 ]  Note that a copy is a new thing and Type information will be lost:\n set_type('Person', { name: 'str' }); p = Person{ name: 'Foo' }; o = p.copy(); type(o); // just a normal `thing`  Return value in JSON format\n \u0026#34;thing\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/del/","title":"del","tags":[],"description":"","content":"Delete a property from a thing.\nWhile almost all functions on things are also available on Type instances, this one is not. This is because a Type instance has a fixed set of properties and so you are not allowed to delete one of them on a single instance. Use mod_type() instead, to delete the property from all instances if this is what you want.\n This function generates a change.\nFunction thing.del(property)\nArguments    Argument Type Description     property str (required) Name of the property to delete.    Return value Returns the removed value if successful. A lookup_err() is returned if the property does not exist or bad_data_err() in case the given property is not a valid name.\nIn versions before v0.9.3 the return value of .del(..) used to be nil when successful.\n Example  This code shows some return values for del():\n .x = 'create and delete this prop'; .del('x');  Return value in JSON format\n \u0026#34;create and delete this prop\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/dup/","title":"dup","tags":[],"description":"","content":"Create a duplicate of a thing.\nThe function preserves the Type of a thing. Use copy(..) to copy into a plain thing.\n This function does not generate a change.\nFunction thing.dup([deep]])\nArguments    Argument Type Description     deep int (optional) How deep to duplicate the thing. Default is 1.    Return value A new thing.\nExample  This code shows an example using dup():\n a = {x: 123}; b = a.dup(); // `b` is a duplicate, so `a.x` will not change b.x = 456; [a.x, b.x];  Return value in JSON format\n [ 123, 456 ]  Note that a duplicate keeps the Type information:\n set_type('Person', { name: 'str' }); p = Person{ name: 'Foo' }; o = p.dup(); type(o); // type `Person`  Return value in JSON format\n \u0026#34;Person\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/each/","title":"each","tags":[],"description":"","content":"Iterate over all properties on a thing.\nBe aware that the order when iterating over a thing is not guaranteed.\n This function does not generate a change.\nFunction thing.each(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     thing name, value Iterate over the thing properties. Both name and value are optional.    Return value None\nExample  This code shows an example using each():\n scores = { cato: 99, iris: 110, job: 170, sasha: 67, tijs: 159, }; // Just an example, the same could be achieved using `filter` and `map`. above100 = []; scores.each(|name, score| score \u0026gt; 100 \u0026amp;\u0026amp; above100.push(name) ); // Return all players with a score above 100 above100;  Return value in JSON format\n [ \u0026#34;iris\u0026#34;, \u0026#34;job\u0026#34;, \u0026#34;tijs\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/equals/","title":"equals","tags":[],"description":"","content":"Determines if a thing is equal to another thing.\nComparing things is usually done with a strict compare, for example:\n{} == {}; // This is *false* because left and right are not the same object Function equals can be used to perform a weak compare, for example:\n{}.equals({}); // This is *true*, both objects have the same content.  By default the equals function will only compare values one level deep. An optional second argument can be used to change this behavior. Any integer value between 0 and 127 is allowed.\n This function does not generate a change.\nFunction thing.equals(other, [deep])\nArguments    Argument Type Description     other any (required) Value to compare.   deep int (optional) How deep to compare the values. Default is 1.    Return value Returns true when the other thing has the same properties and values as the original thing, otherwise false.\nExample  This code shows an example use case of equals():\n a = { name: 'Iris', sport: { name: 'Cycling' } }; b = { name: 'Iris', sport: { name: 'Swimming' } }; assert (a != b ); // a and b are not equal assert (a.equals(b) ); // a and b are equal on the first \u0026quot;level\u0026quot; a.equals(b, 2); // return `false`, as sport is different  Return value in JSON format\n false "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/filter/","title":"filter","tags":[],"description":"","content":"The function returns a new thing with properties that pass the test.\nThis function does not generate a change.\nFunction thing.filter(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     thing name, value Iterate over the thing properties. Both name and value are optional.    Return value A new thing with the properties that pass the test. If no properties pass the test, a empty thing will be returned.\nExample  This code shows an example using filter():\n user = {name: 'Iris', age: 6}; /* * Return a thing with only property age */ user.filter(|prop| prop == 'age');  Return value in JSON format\n { \u0026#34;age\u0026#34;: 6 } "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/get/","title":"get","tags":[],"description":"","content":"Return the value of a property on a thing by a given property name. If the property is not found then the return value will be nil, unless an alternative return value is given.\nThis function does not generate a change.\nFunction thing.get(name [, alt])\nArguments    Argument Type Description     name str (required) Name of the property where to return the value for.   alt any (optional) Optional return value.    Return value Returns the value for the given property name. If the property is not found the the return value will be nil unless an alternative return value is given as second argument.\nExample  This code shows an example use case of get():\n tmp = {name: 'Iris'}; tmp.get('name');  Return value in JSON format\n \u0026#34;Iris\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/has/","title":"has","tags":[],"description":"","content":"Determines if a thing has a given property.\nThis function does not generate a change.\nFunction thing.has(name)\nArguments    Argument Type Description     name str (required) Name of the property to check.    Return value Returns true when the given property name is found and otherwise false.\nExample  This code shows an example use case of has():\n tmp = {name: 'Iris'}; /* Check if `tmp` has a property `name` */ tmp.has('name');  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/id/","title":"id","tags":[],"description":"","content":"Returns the id of a thing or nil if the thing is not stored.\nThis function does not generate a change.\nFunction thing.id()\nArguments None\nReturn value Returns id of a thing or nil when the thing is not stored.\nExample  This code uses id() to return a collection id:\n .id(); // Returns the collection id  Example return value in JSON format\n 3 "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/keys/","title":"keys","tags":[],"description":"","content":"keys The function returns a list with all the property names of a thing. The same could be returned using map so the following statement is true:\n.keys() == .map(|k| k)\nAlthough the keys() and map() functions in the example above will return a list with the same order, the order of keys in the list is not guaranteed and may be different each time you run the query.\n This function does not generate a change.\nFunction thing.keys()\nArguments None\nReturn value Returns a list with property names.\nExample  This code shows how to use keys():\n {a: 1, b: 2, c: 3}.keys();  Return value in JSON format (Warning: the order is NOT guaranteed)\n [ \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/len/","title":"len","tags":[],"description":"","content":"Returns the number of items in a thing.\nThis function does not generate a change.\nFunction thing.len()\nArguments None\nReturn value Returns the number of items in a thing.\nExample  This code uses len() to return the number of items in a thing:\n {name: 'Iris', age: 6}.len();  Return value in JSON format\n 2 "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/map/","title":"map","tags":[],"description":"","content":"The function iterates over all properties on a thing and returns a new list based on the results of a given callback function.\nBe aware that the order when iterating over a thing is not guaranteed.\n This function does not generate a change.\nFunction thing.map(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     thing name, value Iterate over the thing properties. Both name and value are optional.    Return value A new list of items that are the result of the callback function.\nExample  This code shows an example using map():\n user = {name: \u0026quot;Iris\u0026quot;, age: 6}; user.map(|property| property.len());  Return value in JSON format\n [ 4, 3 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/remove/","title":"remove","tags":[],"description":"","content":"This function removes all properties from a thing that satisfies the callback function. The removed values will be returned in a new list. An empty list is returned if no values are removed.\nThis function generates a change.\nFunction list.remove(callback, [limit])\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.   limit int (optional) Limit the number of properties to remove.    Explanation of the callback argument:\n   Iterable Arguments Description     thing key, value Iterate over properties of the thing. Both key and value are optional.    If a callback satisfies more than a given limit of properties, it is not reliable which properties are removed as the order of properties on a thing is not guaranteed.\n Return value A list with the values from the removed properties.\nExample  This code shows an example using remove() on a thing:\n tmp = { a: 1, b: 2, c: 3, d: 4 }; // Return the removed values and tmp with the remaining properties [ tmp.remove(|k, v| v%2==0), tmp, ];  Return value in JSON format\n [ [ 2, 4 ], { \u0026#34;a\u0026#34;: 1, \u0026#34;c\u0026#34;: 3 } ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/restrict/","title":"restrict","tags":[],"description":"","content":"Set or remove a value restriction on a thing. Function restriction() can be used to view the current restriction.\nThis function generates a change.\nFunction thing.restrict(type)\nArguments    Argument Type Description     type str/nil (required) Restriction to set on the thing or nil to remove a restriction.    Return value Returns the thing\nExample  Use restrict() to force int values on a thing;\n example = {}.restrict('int'); example.x = 10; assert ( is_err ( try ( example.name = 'Iris' ))); // values must be float example;  Return value in JSON format\n { \u0026#34;x\u0026#34;: 10 } "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/restriction/","title":"restriction","tags":[],"description":"","content":"Returns the value restriction of a thing as type str or nil when the thing is not value restricted.\nThis function does not generate a change.\nFunction thing.restriction()\nArguments None\nReturn value Returns restriction of the thing or nil if not value restricted.\nExample  Using restriction() on a non-restricted thing:\n {}.restriction();  Return value in JSON format\n null  Using restriction() on a restricted thing:\n {}.restrict('str').restriction();  Return value in JSON format\n \u0026#34;str\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/set/","title":"set","tags":[],"description":"","content":"Creates a new property on a thing. If the property already exists then the old property will be overwritten. This function is equal to an assignment except that it can be used when the name of the property is dynamic.\nThis function generates a change.\nFunction thing.set(name, value)\nArguments    Argument Type Description     name str (required) The name of the property to set.   value any (required) The value which will be assigned to the property.    Return value The value which will be assigned.\nExample  This code shows how to use set():\n [ .set('the_answer', 42), .the_answer, ];  Return value in JSON format\n [ 42, 42 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/to_type/","title":"to_type","tags":[],"description":"","content":"Converts a thing into an typed thing.\nBefore a thing may be converted, all the properties of the thing must have an exact match with the properties defined by the Type. It you later want to change tome properties, the function mod_type can be used.\nSince the root of a collection is also a thing, it is possible to use this function to make the collection strict.\nIt is not possible to convert a thing into a Type with relations. Relations can be made after the conversion.\n This function works only on a thing and can not be undone. Converting a thing is therefore permanent.\n This function generates a change.\nFunction thing.to_type(type)\nArguments    Argument Type Description     type str Name of the Type to convert the thing into.    Return value Returns nil when successful.\nExample  This code converts a collection into a Type using the to_type() function:\n // Create a type `Root` set_type('Root', { name: 'str' }); // Create a name property so the collection will match with type `Root` .name = 'Example'; // Convert the collection into type `Root` .to_type('Root');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/values/","title":"values","tags":[],"description":"","content":"Returns a list with all the property values of a thing. The same could be returned using map so the following statement is true:\n(.values() == .map(|_, v| v))\nAlthough the values() and map() in the example above will return a list with the same order, the order of values in the list is not guaranteed and may be different each time you run the query.\n This function does not generate a change.\nFunction thing.values()\nArguments None\nReturn value Returns a list with property values.\nExample  This code shows how to use values():\n {a: 1, b: 2, c: 3}.values();  Return value in JSON format (Warning: the order is NOT guaranteed)\n [ 1, 2, 3 ] "},{"uri":"https://docs.thingsdb.net/v1/data-types/thing/wrap/","title":"wrap","tags":[],"description":"","content":"Wrap a thing with a Type to filter out properties, while preserving the Id. A wrapped thing inherits the methods from the type it is wrapped with.\nFor a more advanced example using wrap() and unwrap() see \u0026lt;Type\u0026gt;.\nFunction thing.wrap(Type)\nArguments    Argument Arguments Description     Type str (optional) Type\u0026rsquo;s name to wrap the thing with. If not given, the thing will be wrapped with it\u0026rsquo;s own type.    Return value A wrapped thing.\nExample  This code shows an example using wrap():\n // Create a Type to return just an email field. set_type('_Email', {email: 'str'}); // Store a thing .joente = { name: 'Jeroen van der Heijden', email: 'jeroen@cesbit.com', gender: 'male', }; // Return the email field and Id (#) .joente.wrap('_Email');  Example return value in JSON format\n { \u0026#34;#\u0026#34;: 42, \u0026#34;email\u0026#34;: \u0026#34;jeroen@cesbit.com\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/data-types/timeval/","title":"timeval","tags":[],"description":"","content":"Type timeval is exactly the same as type datetime. The only difference is the default return. The return value of a timeval type is the value as a UNIX time stamp, while type datetime returns with the time as a string in ISO8601 format.\nWhy type timeval? It is possible to return a datetime as int(datetime) to get the UNIX time stamp, so why use timeval? It is often easier to work with time stamps then with time as string values.\nSome\ntv = timeval(2020, 12, 10); /* type timeval, 10 December 2020 */ dt = datetime(2020, 12, 10); /* type datetime, 10 December 2020 */ assert (tv == dt); /* true, both have the same time */ assert (type(tv) == 'timeval'); assert (type(dt) == 'datetime'); { dt: dt, tv: tv }; // Return value is different  Return value in JSON format\n { \u0026#34;dt\u0026#34;: \u0026#34;2020-12-10T00:00:00Z\u0026#34;, \u0026#34;tv\u0026#34;: 1607558400 } Functions    Function Description     extract Return a thing with second, minute, hour, day, month, year and gmt_offset as individual properties.   format Returns a string representation using a custom format string.   move Return a new timeval which is shifted in time relative to the original date/time.   replace Return a new timeval with new values for given time units.   to Return a new timeval with new time zone information.   week Return the week of the year as an integer between 0..53. Week 1 starts at the first Sunday in January.   weekday Return the number of days (0..6) since the last Sunday.   yday Return the day in the year as an integer value between 0..365 where the first of January is day 0.   zone Return the time zone as a string, of nil if not zone information is available.    The above functions correspond to those of a datetime object. For that reason, they are only listed under the data type datetime.\n Related functions    Function Description     timeval Create a new timeval value.   is_timeval Test if a given value is of type timeval.    "},{"uri":"https://docs.thingsdb.net/v1/data-types/tuple/","title":"tuple","tags":[],"description":"","content":"All nested arrays are immutable and thus tuples.\nlist = []; list.push(['this list will be nested and therefore convert to a tuple']); // Check that the first item in `list` is indeed a `tuple` assert(is_tuple(list[0])); // Check that the `tuple` is indeed immutable assert(is_err(try(list[0].push('cannot be added to a tuple')))); A tuple only becomes a tuple when it is nested inside another tuple or list, which means the tuple will be immutable.\nFunctions    Function Description     choice Return a random item from a tuple.   each Iterate over all items in a tuple.   every Check if all items pass a given test.   filter Return a new list with items that pass a given test.   find Return the first item that pass a given test.   find_index Return the index of the first item that pass a given test.   first Return the first item from a tuple.   has Return true if a given value is found in the tuple, or false if not found.   index_of Return the index of a given value, or nil if not found.   is_unique Returns true if each item in a tuple is unique or false if a duplicate is found.   join Returns a string with all items joined.   last Return the last item from a tuple.   len Return the length of the tuple.   map Return a new list with the results of calling a provided closure on every item.   reduce Execute a reducer function on each item, resulting in a single output value.   reverse Return a new list with the items in reverse order.   some Check if at least one item passes a given test.   sort Return a new sorted list.   unique Returns a new list without duplicate items.    The above functions correspond to those of a list. For that reason, they are only listed under the data type list.\n "},{"uri":"https://docs.thingsdb.net/v1/data-types/typed/","title":"typed","tags":[],"description":"","content":"A typed thing is a thing with pre-defined properties and/or methods with are defined by a Type. When creating a typed thing, all defined properties of the Type are guaranteed to exist with a value matching the type definition.\nMost, but not all, functions of a thing work on typed things as well. Next to the functions below, a typed thing may have additional methods which are defined by the Type.\nFunctions    Function Description     assign Copies properties from a typed thing.   copy Copy a typed thing as a new thing. The Type is not preserved.   dup Duplicate a typed thing while preserving the Type.   each Iterate over all properties of a typed thing.   equals Test if two things are equal.   filter Return a new thing with properties that pass a given test.   get Return the value of a property on a typed thing by a given property name.   has Determine if a typed thing has a given property.   id Return id of the typed thing or nil when the typed thing is not stored.   keys Return a list with all the property names of a typed thing.   len Return the number of items.   map Return a list with the results of calling a provided closure on every property.   set Set a property of a typed thing to a new value.   values Return a list with all the property values of a typed thing.   wrap Wrap the typed thing with a Type.    The above functions correspond to those of a thing. For that reason, they are only listed under the data type thing.\n "},{"uri":"https://docs.thingsdb.net/v1/data-types/wtype/","title":"˂Type˃","tags":[],"description":"","content":"It is sometimes useful to get things with their Id (#) but still be able to filter-out properties which are not required.\nA solution to return only specific properties from a thing, is to work with wrapped Types. This feature is especially useful (and fast) if your source thing is a typed thing.\nBesides filtering properties, a wrapped thing also inherits the methods from the type it is wrapped with (see example 3). When a wrapped type is returned to the client, those methods act as computed properties. (see example 4, example 5 and example 6)\nWhen ThingsDB wraps a thing with a Type, each property must be compared to the definition of that Type to determine if it comes in the end result. However, if the source is typed thing, ThingsDB only needs to do this once and can use an internal cache for every other transition from that Type to Type.\n In the example below we show a use case for wrapping a book type. The set-up requires some code but once the Types are defined, it is rather easy to use.\nFunctions    Function Description     copy Copy the wrapped thing to a new thing.   dup Duplicate the wrapped thing as-is and keep the wrap.   unwrap Unwrap to access the wrapped thing..    Example 1 new_type('Writer'); // Create type `Book` set_type('Book', { title: 'str', author: 'Writer' }); // Create type `Writer` set_type('Writer', { name: 'str', books: '{Book}', }); // Create a Type to just return a writer's `name` set_type('_WriterName', { name: 'any' }); // Create a Type for returning a `title` and author as `_WriterName` set_type('_Book', { title: 'any', author: '_WriterName' }); // Create a Type for returning only a set of `books` as `_Book` set_type('_AllBooks', { books: '{_Book}' }); // Create two sets, `writers` and `books`, to store all books and writers in .writers = set(); .books = set(); // A closure function to return a writer by name and create if not exists .upsert_writer = |name| { \u0026quot;Return the writer if exists, or create a new one\u0026quot;; .writers.find(|w| w.name == author_name) || { new_writer = Writer{ name: author_name, books: set() }; .writers.add(new_writer); new_writer; }; }; // Create a procedure for adding a new book new_procedure('add_book', |author_name, book_title| { writer = .upsert_writer(author_name); new_book = Book{ title: book_title, author: writer, }; .books.add(new_book); writer.books.add(new_book); }); // Add some sample books run('add_book', 'Alice', 'Foo'); run('add_book', 'Alice', 'Bar'); run('add_book', 'Bob', 'Baz'); /* * Now we can simply wrap the collection to return the books with titles and * the author names including the thing-ids. */ return(.wrap('_AllBooks'), 3); { \u0026#34;#\u0026#34;: 4, \u0026#34;books\u0026#34;: [ { \u0026#34;#\u0026#34;: 6, \u0026#34;author\u0026#34;: { \u0026#34;#\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34; }, \u0026#34;title\u0026#34;: \u0026#34;Foo\u0026#34; }, { \u0026#34;#\u0026#34;: 7, \u0026#34;author\u0026#34;: { \u0026#34;#\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34; }, \u0026#34;title\u0026#34;: \u0026#34;Bar\u0026#34; }, { \u0026#34;#\u0026#34;: 9, \u0026#34;author\u0026#34;: { \u0026#34;#\u0026#34;: 8, \u0026#34;name\u0026#34;: \u0026#34;Bob\u0026#34; }, \u0026#34;title\u0026#34;: \u0026#34;Baz\u0026#34; } ] } What if a Type is removed? When a Type is removed that was wrapping things, all these things are not filtered anymore. However these things are still connected to the removed Type\u0026rsquo;s name. In case you decide to add a Type with the same name, then the wrapped things will be filtered again according to the Type\u0026rsquo;s new definition. The following example will demonstrate this event.\nExample 2 // Create type `Person` set_type('Person', { firstName: 'str', lastName: 'str', age: 'int', gender: 'str', }); // Create type `PersonName`, only includes the names of the person. set_type('PersonName', { firstName: 'str', lastName: 'str', }); // Create a thing with type `Person` .Bob = Person{ firstName: 'Bob', lastName: 'Lightyear', age: 43, gender: 'male', }; // Wrap .Bob and store the wrapped thing. .WrappedBob = .Bob.wrap('PersonName'); // Return the wrapped type .WrappedBob; The output:\n{ \u0026#34;#\u0026#34;: 21, \u0026#34;firstName\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Lightyear\u0026#34; } But now the type PersonNamewill be deleted.\n// Delete type `PersonName`. After deleting this Type `.WrappedBob` is not filtered del_type('PersonName'); // ...but returns all properties stored. .WrappedBob; The output of the property .WrappedBob is not filtered, but in fact returns all its containing properties.\n{ \u0026#34;#\u0026#34;: 21, \u0026#34;age\u0026#34;: 43, \u0026#34;firstName\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Lightyear\u0026#34; } If we subsequently add a type called PersonNameagain (with in this case a different set of properties), then the output to querying .WrappedBob is filtered by the type PersonName again.\n// Create the type `PersonName` again, but with a different set of properties. set_type('PersonName', { lastName: 'str', }); // And return `.WrappedBob` again. .WrappedBob; The output now only includes the lastName property. Thus the property .WrappedBob did not loose its wrapping with type PersonName after it got deleted.\n{ \u0026#34;#\u0026#34;: 21, \u0026#34;lastName\u0026#34;: \u0026#34;Lightyear\u0026#34; } Example 3  This last example show how methods of a type are inherited by a wrapped type:\n set_type('MathXY', { multiply: |this| this.x * this.y, add: |this| this.x + this.y, }); set_type('Point2d', { x: 'number', y: 'number', }); point = Point2d{ x: 6, y: 7, }; point.wrap('MathXY').multiply();  Return value in JSON format:\n 42 Computed properties Sometimes you want to wrap a type and compute some additional properties. A good example might be the count for some messages.\nExample 4 set_type('Person', { name: 'str', messages: '[str]', }); // Now we want to return a person but only need the number of message, // not the actual messages... // Create a `wrap-only` type and specify the name and an additional `mcount` method set_type('_Pmcount', { name: 'any', mcount: |p| p.messages.len() }, true); // If we now, with the above in place, create a person and wrap the person with _Pmcount: p = Person{ name: 'iris', messages: ['hi', 'hello', 'bye'] }; p.wrap('_Pmcount');  Return value in JSON format\n { \u0026#34;name\u0026#34;: \u0026#34;iris\u0026#34;, \u0026#34;mcount\u0026#34;: 3 } Example 5 It is also possible to overwrite the same property name, for example:\nset_type('Person', { name: 'str', messages: '[str]', }); // Overwriting properties is possible set_type('_Poverwrite', { name: |p| p.name.upper(), messages: |p| p.messages.len(), }, true); p = Person{ name: 'iris', messages: ['hi', 'hello', 'bye'] }; p.wrap('_Poverwrite');  The code above Will give the following result in JSON format\n { \u0026#34;name\u0026#34;: \u0026#34;IRIS\u0026#34;, \u0026#34;messages\u0026#34;: 3 } Example 6 Computed properties may also have their own depth which does not affect the other properties\nset_type('Foo', { bar: 'thing', }); set_type('_Pexample', { bar: 'any', other: || return({a: {b: 5}}, 2) }, true); foo = Foo{ bar: {x: {y: 6}}, }; foo.wrap(_Pexample); // Return one deep, note that `other` has it's own depth  Return value in JSON format\n { \u0026#34;bar\u0026#34;: {}, \u0026#34;other\u0026#34;: {\u0026#34;x\u0026#34;: {\u0026#34;y\u0026#34;: 6}} } "},{"uri":"https://docs.thingsdb.net/v1/data-types/wtype/copy/","title":"copy","tags":[],"description":"","content":"Copy a wrapped thing.\nThe function does not preserve the wrap or Type of a thing. Use dup(..) if you want a true duplicate.\n This function does not generate a change.\nFunction \u0026lt;Type\u0026gt;.copy([deep]])\nArguments    Argument Type Description     deep int (optional) How deep to copy the wrapped thing. Default is 1.    Return value A new thing.\nExample  This code shows an example using copy() on a wrapped thing:\n set_type('Person', { name: 'str' }); robot = { name: 'Foo', isHuman: false }; foo = robot.wrap('Person').copy(); foo; // note that only `name` is copied  Return value in JSON format\n { \u0026#34;name\u0026#34;: \u0026#34;Foo\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/data-types/wtype/dup/","title":"dup","tags":[],"description":"","content":"Duplicate a wrapped thing.\nThe function preserves both the wrap and Type of a thing. Use copy(..) if you want a new plain thing.\n This function does not generate a change.\nFunction \u0026lt;Type\u0026gt;.dup([deep]])\nArguments    Argument Type Description     deep int (optional) How deep to duplicate the wrapped thing. Default is 1.    Return value A new wrapped thing.\nExample  This code shows an example using dup() on a wrapped thing:\n set_type('Person', { name: 'str' }); robot = { name: 'Foo', isHuman: false }; foo = robot.wrap('Person').dup(); foo.unwrap(); // foo is still wrapped, the underlying `robot` is being duplicated.  Return value in JSON format\n { \u0026#34;name\u0026#34;: \u0026#34;Foo\u0026#34;, \u0026#34;isHuman\u0026#34;: false } "},{"uri":"https://docs.thingsdb.net/v1/data-types/wtype/unwrap/","title":"unwrap","tags":[],"description":"","content":"Unwrap a wrapped thing.\nFunction \u0026lt;Type\u0026gt;.unwrap()\nArguments None\nReturn value Returns the wrapped thing.\nExample  This code shows an example using unwrap():\n // Create a Type to return just an email field. set_type('_Email', {email: 'str'}); // Store a thing .joente = { name: 'Jeroen van der Heijden', email: 'jeroen@cesbit.com', gender: 'male', }; // Wrap `joente` with the `_Email` type. .w = .joente.wrap('_Email'); // Return the original `thing` .w.unwrap();  Example return value in JSON format\n { \u0026#34;#\u0026#34;: 42, \u0026#34;name\u0026#34;: \u0026#34;Jeroen van der Heijden\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;jeroen@cesbit.com\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/operators/","title":"Operators","tags":[],"description":"","content":"Operators Operators are special symbols in ThingsDB that carry out arithmetic or logical computation.\n"},{"uri":"https://docs.thingsdb.net/v1/operators/arithmetic-operators/","title":"Arithmetic operators","tags":[],"description":"","content":"   Operator Description     + Addition operator.   - Subtraction operator.   / Division operator   * Multiplication operator.   % Modulo operator.    Division uses float division if either the numerator or denominator is of type float.\n  Arithmetic examples:\n [ 5 + 2, 5 - 2, 5 / 2.0, 5 / 2, 5 * 2, 5 % 2, ];  Return value in JSON format\n [ 7, 3, 2.5, 2, 10, 1 ] "},{"uri":"https://docs.thingsdb.net/v1/operators/assignments/","title":"Assignments","tags":[],"description":"","content":"Assignments will generate a change.\n   Operator Description     = Assignment operator.   *= Multiplication assignment.   /= Float division assignment.   %= Modulo assignment.   += Addition assignment.   -= Subtraction assignment   \u0026amp;= Bitwise AND assignment.   ^= Bitwise XOR assignment.   ` =`    "},{"uri":"https://docs.thingsdb.net/v1/operators/binary-bitwise-operators/","title":"Binary bitwise operators","tags":[],"description":"","content":"Can be used on integer values.\n   Operator Description     \u0026amp; Bitwise AND, true if both a and b are 1.   ` `   ^ Bitwise XOR, true if a and b are different.     Binary bitwise operator examples:\n [ 0b110 \u0026amp; 0b011, 0b110 | 0b011, 0b110 ^ 0b011, ];  Return value in JSON format\n [ 2, 7, 5 ] "},{"uri":"https://docs.thingsdb.net/v1/operators/conditional-ternary-operator/","title":"Conditional ternary operator","tags":[],"description":"","content":"The conditional operator returns one of two values based on the logical value of the condition.\nSyntax: expression ? if-true : if-false\n Conditional (ternary) operator examples:\n 2 \u0026gt; 1 ? 'two is greater than one' : 'two is less than one';  Return value in JSON format\n \u0026#34;two is greater than one\u0026#34; It is possible to use block scopes for the if-true and if-false part for the conditional operator.\n For example:\n .sessions.len() \u0026lt; .licenses ? { // we have a license, do something... .sessions.add(Session{ timestamp: now() }); } : { // no licenses left raise('no licenses left'); } "},{"uri":"https://docs.thingsdb.net/v1/operators/logical-operators/","title":"Logical operators","tags":[],"description":"","content":"Logical operators are generally used with bool values.\n   Operator Description     \u0026amp;\u0026amp; Logical AND.   `     As logical expressions are evaluated left to right, they are tested for possible \u0026ldquo;short-circuit\u0026rdquo; evaluation. This means that the evaluation of an expression is stopped when the outcome is determined. This applies in the following two cases:\n  expression_1 \u0026amp;\u0026amp; expression_2 : if expression_1 evaluates to false then expression_2 is not evaluated. Any side effects of doing so do not take place.\n  expression_1 || expression_2: if expression_1 evaluates to true then expression_2 is not evaluated. Any side effects of doing so do not take place.\n   Logical short-circuit examples:\n x = 0; [ false \u0026amp;\u0026amp; x += 1, true || x += 1, x ]; // expression x += 1 will never be executed  Return value in JSON format\n [ false, true, 0 ] "},{"uri":"https://docs.thingsdb.net/v1/operators/precedence-and-associativity/","title":"Precedence and associativity","tags":[],"description":"","content":"   Symbol Type of operation Associativity     () Expression parenthesis Left-to-right   ! Not operator Right-to-left   * / % Multiplication, Modulo, Division Left-to-right   + - Add, Subtract Left-to-right   \u0026amp; Bitwise AND Left-to-right   ^ Bitwise XOR Left-to-right   ` ` Bitwise OR   == != \u0026lt;= \u0026gt;= \u0026lt; \u0026gt; Compare Left-to-right   \u0026amp;\u0026amp; Logical AND Left-to-right   `  `   ? : Conditional Right-to-left   = *= /= %= += -= \u0026amp;= ^= ` =` Assignments    "},{"uri":"https://docs.thingsdb.net/v1/collection-api/","title":"Collection API","tags":[],"description":"","content":"Collection API The collection scope can be used to manage data within a collection.\nMost of the functions in the Collection API can also be used in the thingsdb and node scopes.\n "},{"uri":"https://docs.thingsdb.net/v1/collection-api/alt_raise/","title":"alt_raise","tags":[],"description":"","content":"This function will try a statement. If the statement is successful it will just return the result but in case of an error, it will re-raise the error using a given error code. The following code below will illustrate how alt_raise works:\n Without an optional error message\n // the following code: res = alt_raise(statement, error_code); // is equivalent to: res = try(statement); if (is_err(res), { raise(error_code, res.msg()); });  With an error message\n // the following code: res = alt_raise(statement, error_code, err_msg); // is equivalent to: res = try(statement); if (is_err(res), { raise(error_code, err_msg); }); This function does not generate a change.\nFunction alt_raise(statement, code, [message])\nArguments    Argument Type Description     statement any (required) The statement to try.   code int (required) Integer error code between -127 and -50.   message str (optional) Optional error message.    Return value The value for the specified statement when the statement is successful.\nExample  Some examples on how alt_raise() can be used:\n set_type('Person', { name: 'str\u0026lt;3:20\u0026gt;' }); alt_raise({ // The code below will raise a value error since the name is not long enough Person{ name: 'x' }; }, -100, \u0026quot;Type `Person` expects a name between 3 and 20 characters\u0026quot;); "},{"uri":"https://docs.thingsdb.net/v1/collection-api/assert/","title":"assert","tags":[],"description":"","content":"Raises an assert_err() if the specified expression evaluates to false.\nThis function does not generate a change.\nFunction assert(expression [, error_msg])\nArguments    Argument Type Description     expression any (required) The expression to evaluate.   error_msg str (optional) Custom error message.    Return value Returns nil if the type of the expression evaluates to true. Otherwise an assert_err() is raised.\nIn versions before v0.9.4 the return value of assert(..) used to be the return value from the expression (when evaluated as true).\n Example  This code shows how assert can be used:\n assert(1 \u0026gt; 2, 'one is still smaller than two');  Raises an assert_err() exception\n { \u0026#34;error_msg\u0026#34;: \u0026#34;one is still smaller than two\u0026#34;, \u0026#34;error_code\u0026#34;: -50 } "},{"uri":"https://docs.thingsdb.net/v1/collection-api/base64_decode/","title":"base64_decode","tags":[],"description":"","content":"Decode a Base64 encoded string.\nSee base64_encode for Base64 encoding.\nThis function does not generate a change.\nFunction base64_decode(encoded)\nArguments    Argument Type Description     encoded str/bytes The string value to decode.    Return value Decoded bytes value is returned.\nExample  This code shows an example for base64_decode:\n encoded = 'YmFzZTY0IGVuY29kZWQgc3RyaW5n'; // decode data = base64_decode(encoded); // result is of type bytes assert(type(data) == 'bytes'); // return as string str(data);  Return value in JSON format\n \u0026#34;base64 encoded string\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/collection-api/base64_encode/","title":"base64_encode","tags":[],"description":"","content":"Encode a str or bytes value using Base64.\nSee base64_decode for Base64 decoding.\nThis function does not generate a change.\nFunction base64_encode(string)\nArguments    Argument Type Description     string str/bytes The value to encode.    Return value Encoded str value is returned.\nExample  This code shows an example for base64_encode:\n encoded = base64_encode('base64 encoded string'); // result is of type str assert(type(encoded) == 'str'); // return encoded;  Return value in JSON format\n \u0026#34;YmFzZTY0IGVuY29kZWQgc3RyaW5n\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/collection-api/bool/","title":"bool","tags":[],"description":"","content":"Returns a bool from a specified value. If no value is given, false is returned.\nTypes with a length evaluate to true when the length is not 0, and false otherwise.\nThis function does not generate a change.\nFunction bool(value)\nArguments    Argument Type Description     value any (optional) The value to convert to a boolean value.    Return value A boolean value.\nExample  This code shows some return values for bool():\n [ \u0026quot;false:\u0026quot;, { bool(); /* default bool is false */}, { bool(0); /* zero (0) evaluates to false */}, { bool(0.0); /* zero float (0.0) evaluates to false */}, { bool(nil); /* nil evaluates to false */}, { bool({}); /* an empty thing evaluates to false */}, { bool(err()); /* all errors evaluate to false */}, { bool(''); /* an empty string evaluates to false */}, { bool([]); /* an empty array evaluates to false */}, { bool(set()); /* an empty set evaluates to false */}, { bool(room()); /* a non-stored room (no Id) evaluates to false */}, { bool({ t = task(datetime(), ||0); t.cancel(); t; }); /* non-scheduled tasks evaluate to false */}, \u0026quot;true:\u0026quot;, { bool(42); /* non zero integers evaluates to true */}, { bool(-1.0); /* non zero float values evaluates to true */}, { bool({answer: 42}); /* non empty thing evaluates to true */}, { bool([1, 2, 3]); /* non empty array evaluates to true */}, { bool('forty two'); /* non empty string evaluates to true */}, { bool(set({}, {})); /* non empty set evaluates to true */}, { bool(.room = room()); /* a stored room (with Id) evaluates to true */}, { bool(future(||nil)); /* futures evaluate to true */}, { bool(timeval(0)); /* datetime and timeval always evaluate to true */}, { bool(task(datetime(), ||0)); /* scheduled tasks evaluate to true */}, ];  Return value in JSON format\n [ \u0026#34;false:\u0026#34;, false, false, false, false, false, false, false, false, false, false, false, \u0026#34;true:\u0026#34;, true, true, true, true, true, true, true, true, true, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/bytes/","title":"bytes","tags":[],"description":"","content":"Convert a value to a byte sequence. If no value is given, an empty byte sequence is returned.\nThis function does not generate a change.\nFunction bytes(value)\nArguments    Argument Type Description     value any (optional) The value where to create a bytes value for.    "},{"uri":"https://docs.thingsdb.net/v1/collection-api/change_id/","title":"change_id","tags":[],"description":"","content":"Returns the current change Id for the running query. The return value will be nil if the query does not require a change.\nThis function does not generate a change.\nFunction change_id()\nArguments None\nReturn value The current change Id or nil when the query does not require a change.\nExample  Example using change_id():\n change_id(); // nil, since no change is required  Return value in JSON format\n null  Using change_id() when the query does require an change:\n wse(change_id()); // `wse` enforces a change  Example return value in JSON format\n 2593159 "},{"uri":"https://docs.thingsdb.net/v1/collection-api/datetime/","title":"datetime","tags":[],"description":"","content":"Returns a datetime depending on some optional values.\nThis function does not generate a change.\nFunction    Interface Arguments Description     datetime() None Return a datetime with the current date/tine.   datetime(ts) int/float Return a datetime from a given UNIX time stamp.   datetime(str, [fmt]) str Return a datetime from a given string. See initialize from string for a details.   datetime(int, int, int, [int, [int, [int]]], [zone]) int, int,\u0026hellip; str Return a datetime using values for individual time units, with optional time zone.    Initialize from string The following formats will be understood by both the datetime(..) and timeval(..) functions without an explicit format:\n   Format Example Description     YYYY \u0026quot;2020\u0026quot; A datetime on the first of January at 00:00 in the given year using the time zone from the collection.   YYYY-mm \u0026quot;2020-09\u0026quot; A datetime at the first of a given month and year, at 00:00 using the time zone from the collection.   YYYY-mm-dd \u0026quot;2020-09-14\u0026quot; A datetime at the given date, at 00:00 using the time zone from the collection.   YYYY-mm-ddTHH \u0026quot;2020-09-14T20\u0026quot; A datetime at the given date, at HH:00 using the time zone from the collection.   YYYY-mm-ddTHH:MM \u0026quot;2020-09-14T20:52\u0026quot; A datetime at the given date, at HH:MM using the time zone from the collection.   YYYY-mm-ddTHH:MM:SS \u0026quot;2020-09-14T20:52:28\u0026quot; A datetime using the time zone from the collection..   YYYY-mm-ddTHH:MM:SSZ \u0026quot;2020-09-14T20:52:28Z\u0026quot; A datetime using the Coordinated Universal Time (UTC).   YYYY-mm-ddTHH:MM:SS+-hh \u0026quot;2020-09-14T20:52:28+01\u0026quot; A datetime relative to the Coordinated Universal Time (UTC) with a given offset +hh or -hh.   YYYY-mm-ddTHH:MM:SS+-hhmm \u0026quot;2020-09-14T20:52:28+0100\u0026quot; A datetime with an offset relative to the Coordinated Universal Time (UTC).    The T in the formats above is optional and may be replace with a space ( ).\n Optionally, a second fmt argument may be given in which you may specify a custom format. The most important field descriptors for the formatter are listed below. In case a string (such as the name of a day of the week or a month name) is to be matched, the comparison is case insensitive. In case a number is to be matched, leading zeros are permitted but not required.\n   Specifier Description     %a / %A The name of the day, in abbreviated form or the full name.   %b / %B/ %h The month name, in abbreviated form or the full name.   %c The date and time representation, for example: Thu Dec 10 13:50:28 2020   %C The century number (0–99).   %d / %e The day of month (1–31).   %D Equivalent to %m/%d/%y (American style date).   %H The hour (0–23).   %I The hour on a 12-hour clock (1–12).   %j The day number in the year (1–366).   %m The month number (1–12).   %M The minute (0–59).   %n Arbitrary whitespace.   %p AM or PM.   %r The 12-hour clock time, for example: 12:00:00 AM   %R Equivalent to %H:%M.   %S The second (0–59).   %t Arbitrary whitespace.   %T Equivalent to %H:%M:%S.   %U The week number with Sunday the first day of the week (0–53). The first Sunday of January is the first day of week 1.   %w The ordinal number of the day of the week (0–6), with Sunday as 0.   %W The week number with Monday the first day of the week (0–53). The first Monday of January is the first day of week 1.   %y The year within century (0–99). When a century is not otherwise specified, values in the range 69–99 refer to years in the twentieth century, values in the range 00–68 refer to years in the twenty-first century.   %Y The year, including century (for example, 2013).    Example, creating a datetime object using a custom formatter:\ndatetime('2013 37', '%Y %j'); // day 37 in the year 2013  Return value in JSON format\n \u0026#34;2013-02-06T00:00:00Z\u0026#34; Return value Returns a datetime object.\nExample  This code shows a few examples for datetime():\n [ {datetime(); /* current time */ }, {datetime(1607609782); /* Thu, 10 Dec 2020 14:16:22 */ }, {datetime(2013, 2, 6, 12); /* Wed, 06 Feb 2013 */ }, {datetime(2013, 2, 6, 13, 'Europe/Amsterdam'); /* with a time zone */ }, {datetime('1978-08-07T13:30:00Z'); /* Mon, 07 Aug 1978 13:30 */ }, {datetime('12/10/2020', '%M/%s/%Y'); /* Thu, 10 Dec 2020 */ }, ];  Return value in JSON format with the collection time zone configured as UTC:\n [ \u0026#34;2020-12-17T15:58:25Z\u0026#34;, \u0026#34;2020-12-10T14:16:22Z\u0026#34;, \u0026#34;2013-02-06T12:00:00Z\u0026#34;, \u0026#34;2013-02-06T13:00:00+0100\u0026#34;, \u0026#34;1978-08-07T13:30:00Z\u0026#34;, \u0026#34;2020-01-01T00:00:10Z\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/deep/","title":"deep","tags":[],"description":"","content":"Set or return the current deep value for the running query. The deep value indicates how far down the result of a query is returned. For example, thing1 may contain a thing2 that contains a thing3. A deep value of 1 would only show the content of thing1 and a deep value of 3 will go as deep as the content of thing3.\nBesides this function the deep value can change after a closure with a return(..) is called which has changed the deep value for this query.\nThis function does not generate a change.\nFunction deep([deep])\nArguments    Argument Type Description     deep int (optional) Set a new \u0026ldquo;deep\u0026rdquo; level. If not given, the current deep level is returned.    Return value The current deep value for the running query.\nExample  This code uses deep() to set deep to a new value:\n deep(3); // Set the `deep` value to 3 for this query { v: \u0026quot;Level 1\u0026quot;, a: { v: \u0026quot;Level 2\u0026quot;, b: { v: \u0026quot;Level 3\u0026quot;, c: { v: 'Level 4' } } } };  Return value in JSON format (c, level 4, is not included as we use deep 3)\n { \u0026#34;a\u0026#34;: { \u0026#34;b\u0026#34;: { \u0026#34;c\u0026#34;: {}, \u0026#34;v\u0026#34;: \u0026#34;Level 3\u0026#34; }, \u0026#34;v\u0026#34;: \u0026#34;Level 2\u0026#34; }, \u0026#34;v\u0026#34;: \u0026#34;Level 1\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/collection-api/del_enum/","title":"del_enum","tags":[],"description":"","content":"Deletes an existing enumerator type.\nIt is not possible to delete a enumerator type which is used by a Type or if one of the enumerator members is still being used. See example below.\nThis function generates a change.\nFunction del_enum(enum)\nArguments    Argument Type Description     enum string Name of the enumerator type to be deleted.    Return value The value nil.\nExample  This code shows how to use del_enum():\n // Create enum `Status` with two members set_enum('Status', { OK: 0, NOK: -1, }); status = enum('Status', 0); // Cannot delete `Status` since one of the members is being used assert(is_err(try(del_enum('Status')))); // Assign `nil` to status so the enum member is released status = nil; // Now we can remove enum `Status` del_enum('Status');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/del_type/","title":"del_type","tags":[],"description":"","content":"Deletes an existing Type.\nIt is not possible to delete a Type which is used by another Type. You should first change or delete the other Type before you are able to delete this Type. See the example below.\nIf there are still things of the Type you delete, then all things will be converted to non-typed things. No properties will be removed in this process. With type_count(..) you can view the number of things of a certain Type.\n This function generates a change.\nFunction del_type(type)\nArguments    Argument Type Description     type string Name of the Type to be deleted.    Return value The value nil.\nExample  This code shows how to use del_type():\n // Create type `A` new_type('A'); // Create type `B` which has a reference to type `A` set_type('B', { a: 'A' }); // Cannot delete `A` since it is referenced by type `B`. assert(is_err(try(del_type('A')))); // First change type `B` mod_type('B', 'mod', 'a', 'thing'); // Now we can remove type `A` del_type('A');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/enum/","title":"enum","tags":[],"description":"","content":"Returns a enum member from a given value. A lookup_err() is raised if either the enum or value is not found.\nThis function does not generate a change.\nFunction enum(enum, [value])\nArguments    Argument Type Description     enum str (required) The name of the enumeration type.   value any (optional) The value to search the enum member for. If omitted, the default member is returned.    Return value Member within the given enum equal to the given value.\nExample  This code shows some return values for enum(..):\n set_enum('Status', { OK: 0, NOK: -1 }); // get the `Status` member with value `0` status = enum('Status', 0); status.name(); // return the `name` of the enum member  Return value in JSON format\n \u0026#34;OK\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/collection-api/enum_info/","title":"enum_info","tags":[],"description":"","content":"Returns information about a given enumeration type.\n   Value Description     enum_id Internal enum Id (can be used to identify Enums in collection events).   created_at Time Stamp when the enum is created.   default Default member of this enumerator. The default member is used when implicitly creating a value of this enumerator type. See mod_enum(..) to change the deafult member.   modified_at Time Stamp when the enum is last modified or nil if never modified.   name Enum\u0026rsquo;s name.   members Array with arrays containing two strings, the name and value.    This function does not generate a change.\nFunction enum_info(enum)\nArguments    Argument Type Description     enum str The name of the enum for which the information has to be returned.    Return value Returns mpdata about the enumeration type.\nExample  This code shows the output of enum_info():\n // Just a simple enum as an example set_enum('Color', { RED: '#ff0000', GREEN: '#00ff00', BLUE: '#0000ff', }); // Return enum info enum_info('Color');  Example return value in JSON format\n { \u0026#34;enum_id\u0026#34;: 0, \u0026#34;created_at\u0026#34;: 1589917348, \u0026#34;default\u0026#34;: \u0026#34;RED\u0026#34;, \u0026#34;modified_at\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;Color\u0026#34;, \u0026#34;members\u0026#34;: [ [\u0026#34;RED\u0026#34;, \u0026#34;#ff0000\u0026#34;], [\u0026#34;GREEN\u0026#34;, \u0026#34;#00ff00\u0026#34;], [\u0026#34;BLUE\u0026#34;, \u0026#34;#0000ff\u0026#34;] ] } "},{"uri":"https://docs.thingsdb.net/v1/collection-api/enums_info/","title":"enums_info","tags":[],"description":"","content":"Returns enumeration type information about all the enum\u0026rsquo;s within a collection scope.\nSee the enum_info() function documentation for an example of the exposed information.\nThis function does not generate a change.\nFunction enums_info()\nArguments None\nReturn value List with mpdata about all enumeration types in the collection scope.\n"},{"uri":"https://docs.thingsdb.net/v1/collection-api/err/","title":"err","tags":[],"description":"","content":"Returns an error.\nThis function does not generate a change.\nFunction err([code, [message]])\nArguments    Argument Type Description     code int (optional) Integer error code between -127 and -50, defaults to -100. See error documentation for build-in errors.   message str (optional) Optional error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows some return values for err():\n // Error 59 is the internal integer overflow error [ err(), err(-100, 'some error occurred'), err(-101), err(-59), ];  Return value in JSON format\n [ \u0026#34;error:-100\u0026#34;, \u0026#34;some error occurred\u0026#34;, \u0026#34;error:-101\u0026#34;, \u0026#34;integer overflow\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/float/","title":"float","tags":[],"description":"","content":"Returns a float from a specified value. If no value is given, the default float 0.0 is returned.\nIf the specified value is of type str, then the initial characters of the string are converted until a non-digit character is found. Initial white space is ignored and the number may start with an optional + or - sign.\nType bool values are converted to 1.0 for true and 0.0 for false.\nThis function does not generate a change.\nFunction float(value)\nArguments    Argument Type Description     value any (optional) The value where to create a floating point value for.    Return value A floating point value. Other type than float, str, bool, datetime, timeval or int will raise a bad_data_err().\nExample  This code shows some return values for float():\n [ float(), float(42), float('0.365e+3 days'), float('0xFF'), float(true), float(false), float(datetime('2013-06-02T00:00:00Z')), ];  Return value in JSON format\n [ 0, 42.0, 365.0, 255.0, 1.0, 0.0, 1370131200.0 ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/future/","title":"future","tags":[],"description":"","content":"Returns a future. It is not possible to assign a future to a collection or add the future to a list. If you do, then nil will be assigned instead.\nIf you want to use the return value from a future, you need to use then(..) and errors might be captured using the else(..) function.\nA future\u0026rsquo;s callback will get its own change-Id in case one is required. This means that it is possible to use a future to prevent a change in a query on some conditions (see last example).\nThis function does not generate a change.\nFunction future(request, arg1, arg2, ..., argX)\nArguments    Argument Type Description     request thing/closure/nil (required) The request or nil for a plain future. A closure can be used as a shortcut for `future(..).then(   arg1..argX any (optional) Arguments which will be used in the result.    Return value A list with as first value the return value from the optional module or nil followed by the future arguments.\nExample  This code shows an example usage of future():\n future(nil, 42);  Return value in JSON format\n [null, 42]  Use a future to prevent a change in some cases:\n // dummy condition condition = 2 \u0026gt; 1; if (condition, future(|| { // a change is only required if the condition evaluates to `true` .only_if_condition = true; })); "},{"uri":"https://docs.thingsdb.net/v1/collection-api/has_enum/","title":"has_enum","tags":[],"description":"","content":"Determines if a enumerator type exists in the current @collection scope.\nThis function does not generate a change.\nFunction has_enum(enum)\nArguments    Argument Type Description     enum str (required) Enum name to check.    Return value Returns true if a enumerator type with a given name exists and otherwise false.\nExample  This code shows an example use case of has_enum():\n has_enum('XXX');  Return value in JSON format\n false "},{"uri":"https://docs.thingsdb.net/v1/collection-api/has_type/","title":"has_type","tags":[],"description":"","content":"Determines if a Type exists in the current @collection scope.\nThis function does not generate a change.\nFunction has_type(type)\nArguments    Argument Type Description     type str (required) Type name to check.    Return value Returns true if a Type with a given name exists and otherwise false.\nExample  This code shows an example use case of has_type():\n has_type('XXX');  Return value in JSON format\n false "},{"uri":"https://docs.thingsdb.net/v1/collection-api/if/","title":"if","tags":[],"description":"","content":"Runs a block code based on the result of a given condition.\nThingsDB uses lazy-evaluation of function arguments. For this reason if() is a function call, and not a statement like in most other languages.\n This function does not generate a change.\nFunction if(condition, if_true, [if_false])\nArguments    Argument Type Description     condition any (required) The condition to evaluate.   if_true any (required) Will be executed when the condition evaluated to true.   if_false any (optional) Will be executed when the condition evaluated to false.    Return value Returns nil.\nExample  This code shows how if(..) can be used:\n if(2 \u0026gt; 1, { return(\u0026quot;two is more than one\u0026quot;); }); \u0026quot;math is broken\u0026quot;;  Return value in JSON format\n \u0026#34;two is more than one\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/collection-api/int/","title":"int","tags":[],"description":"","content":"Returns an int from a specified value. If no value is given, the default integer 0 is returned.\nIf the specified value was a float value, then the new integer value will be rounded towards zero.\nIf the specified value is of type str, then the initial characters of the string are converted until a non-digit character is found. Initial white space is ignored and the number may start with an optional + or - sign.\nType bool values are converted to 1 for true and 0 for false.\nThis function does not generate a change.\nFunction int(value)\nArguments    Argument Type Description     value any (optional) The value where to create an integer value for.    Return value An integer value. In case the integer value is too large for a 64bit integer, an overflow_err() is raised. Other type than float, str, bool, datetime, timeval or int will raise a bad_data_err().\nExample  This code shows some return values for int():\n [ int(), int(2.718), int(-1.9), int('365 days'), int('0xFF'), int(true), int(false), int(datetime('2013-06-02T00:00:00Z')), ];  Return value in JSON format\n [ 0, 2, -1, 365, 255, 1, 0, 1370131200 ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_array/","title":"is_array","tags":[],"description":"","content":"This function determines whether the provided value is of type list or tuple or not. The functions is_list and is_tuple can be used to check if the array is mutable.\nThis function does not generate a change.\nFunction is_array(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the value passed is an array, else it returns false.\nExample  This code shows some return values for is_array():\n [ is_array( [] ), is_array( tmp = [['nested']] ), is_array( tmp[0] ), ];  Return value in JSON format\n [ true, true, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_ascii/","title":"is_ascii","tags":[],"description":"","content":"This function determines whether the provided value is of type str and contains only valid ascii characters.\nThis function does not generate a change.\nFunction is_ascii(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type str and contains only ascii characters, else false.\nExample  This code shows some return values for is_ascii():\n [ is_ascii( 'ԉ' ), is_ascii( 'pi' ), ];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_bool/","title":"is_bool","tags":[],"description":"","content":"This function determines whether the provided value is a bool or not.\nThis function does not generate a change.\nFunction is_bool(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a boolean, else it returns false.\nExample  This code shows some return values for is_bool():\n [ is_bool( true ), is_bool( 'true' ), is_bool( nil ), ];  Return value in JSON format\n [ true, false, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_bytes/","title":"is_bytes","tags":[],"description":"","content":"This function determines whether the provided value is of type bytes or not.\nThis function does not generate a change.\nFunction is_bytes(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type bytes, else it returns false.\nExample  This code shows some return values for is_bytes():\n [ is_bytes( bytes() ), is_bytes( 'abc' ), ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_closure/","title":"is_closure","tags":[],"description":"","content":"This function determines whether the provided value is a closure or not.\nThis function does not generate a change.\nFunction is_closure(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a closure, else it returns false.\nExample  This code shows some return values for is_closure():\n [ is_closure( || nil ), is_closure( nil ), ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_datetime/","title":"is_datetime","tags":[],"description":"","content":"This function determines whether the provided value is of type datetime.\nThis function does not generate a change.\nFunction is_datetime(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type timeval, else false.\nExample  This code shows some return values for is_utf8():\n [ is_datetime( timeval(2013, 2, 6) ), is_datetime( datetime(2013, 2, 6) ), ];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_enum/","title":"is_enum","tags":[],"description":"","content":"This function determines whether the provided value is an enumeration type member or not.\nThis function does not generate a change.\nFunction is_enum(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type enum, else it returns false.\nExample  This code shows some return values for is_enum():\n set_enum('Status', { OK: 0, NOK: -1, }); [ is_enum( Status{OK} ), is_enum( 0 ), ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_err/","title":"is_err","tags":[],"description":"","content":"This function determines whether the provided value is a error or not.\nThis function does not generate a change.\nFunction is_err(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is an error, else it returns false.\nExample  This code shows some return values for is_err():\n [ is_err( err() ), is_err( zero_div_err() ), is_err( try((1 / 0)) ), is_err( try((1 / 1)) ), ];  Return value in JSON format\n [ true, true, true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_float/","title":"is_float","tags":[],"description":"","content":"This function determines whether the provided value is a floating point value or not.\nThis function does not generate a change.\nFunction is_float(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a float, else it returns false.\nExample  This code shows some return values for is_float():\n [ is_float( 42.0 ), is_float( 0.42e+2 ), is_float( 42 ), ];  Return value in JSON format\n [ true, true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_future/","title":"is_future","tags":[],"description":"","content":"This function determines whether the provided value is a future value or not.\nThis function does not generate a change.\nFunction is_future(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a future, else it returns false.\nExample  This code shows some return values for is_float():\n [ is_future( future(nil) ), is_future( future(nil).then(||nil) ), is_future( ||nil ), ];  Return value in JSON format\n [ true, true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_inf/","title":"is_inf","tags":[],"description":"","content":"This function determines whether the provided value is a positive or negative infinity.\nThis function does not generate a change.\nFunction is_inf(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a positive or negative infinity, else it returns false.\nExample  This code shows some return values for is_inf():\n [ is_inf( -inf ), is_inf( inf ), is_inf( 0 ), is_inf( nan ), ];  Return value in JSON format\n [ true, true, false, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_int/","title":"is_int","tags":[],"description":"","content":"This function determines whether the provided value is an integer or not.\nThis function does not generate a change.\nFunction is_int(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is an integer, else it returns false.\nExample  This code shows some return values for is_int():\n [ is_int( 42 ), is_int( 0x2a ), is_int( 42.0 ), is_int( '42' ), is_int( true ), ];  Return value in JSON format\n [ true, true, false, false, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_list/","title":"is_list","tags":[],"description":"","content":"This function determines whether the provided value is a list or not.\nThis function does not generate a change.\nFunction is_list(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a list, else it returns false.\nExample  This code shows some return values for is_list():\n [ is_list( [] ), is_list( tmp = [['nested']] ), is_list( tmp[0] ), ];  Return value in JSON format\n [ true, true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_mpdata/","title":"is_mpdata","tags":[],"description":"","content":"This function determines whether the provided value is of type mpdata or not.\nThis function does not generate a change.\nFunction is_mpdata(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type mpdata, else it returns false.\nExample  This code shows some return values for is_mpdata():\n [ is_mpdata( user_info(\u0026quot;admin\u0026quot;) ), is_mpdata( user_info(\u0026quot;admin\u0026quot;).load() ), ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_nan/","title":"is_nan","tags":[],"description":"","content":"This function determines whether the provided value is a number.\nThis function does not generate a change.\nFunction is_nan(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is not a number, else false.\nExample  This code shows some return values for is_nan():\n [ is_nan( true ), is_nan( 123 ), is_nan( 3.14 ), is_nan( inf ), is_nan( [] ), is_nan( {} ), is_nan( nan ), is_nan( '123' ), ];  Return value in JSON format\n [ false, false, false, false, true, true, true, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_nil/","title":"is_nil","tags":[],"description":"","content":"This function determines whether the provided value is nil.\nThis function does not generate a change.\nFunction is_nil(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is nil, else false.\nExample  This code shows some return values for is_nil():\n [ is_nil( nil ), is_nil( 0 ), ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_raw/","title":"is_raw","tags":[],"description":"","content":"This function determines whether the provided value is of type str or bytes.\nThis function does not generate a change.\nFunction is_raw(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type str or bytes, else false.\nExample  This code shows some return values for is_raw():\n [ is_raw( 'some string' ), is_raw( bytes('xxxx') ), ];  Return value in JSON format\n [ true, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_regex/","title":"is_regex","tags":[],"description":"","content":"This function determines whether the provided value is of type regex or not.\nThis function does not generate a change.\nFunction is_regex(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type regex, else it returns false.\nExample  This code shows some return values for is_regex():\n [ is_regex( /.*/ ), is_regex( regex(\u0026quot;.*\u0026quot;) ), is_regex( \u0026quot;.*\u0026quot; ), ];  Return value in JSON format\n [ true, true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_room/","title":"is_room","tags":[],"description":"","content":"This function determines whether the provided value is a room or not.\nThis function does not generate a change.\nFunction is_room(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a room, else it returns false.\nExample  This code shows some return values for is_room():\n [ is_room( thing() ), is_room( room() ), ];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_set/","title":"is_set","tags":[],"description":"","content":"This function determines whether the provided value is a set or not.\nThis function does not generate a change.\nFunction is_set(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a set, else it returns false.\nExample  This code shows some return values for is_set():\n [ is_set( [] ), is_set( set() ), ];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_str/","title":"is_str","tags":[],"description":"","content":"This function determines whether the provided value is of type str.\nThe value is not explicitly checked for valid UTF-8 characters, use is_utf8() if you want to check for valid UTF-8 data.\nThis function does not generate a change.\nFunction is_str(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type str, else false.\nExample  This code shows some return values for is_utf8():\n [ is_str( 'ԉ' ), is_str( 'pi' ), ];  Return value in JSON format\n [ true, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_task/","title":"is_task","tags":[],"description":"","content":"This function determines whether the provided value is a task or not.\nThis function does not generate a change.\nFunction is_task(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a task, else it returns false.\nExample  This code shows some return values for is_task():\n [ is_task( thing() ), is_task( task(datetime(), ||nil) ), ];  Return value in JSON format\n [ false, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_thing/","title":"is_thing","tags":[],"description":"","content":"This function determines whether the provided value is a thing or not.\nTyped things are also things, so this function returns true for both typed and non-typed things.\n This function does not generate a change.\nFunction is_thing(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a thing, else it returns false.\nExample  This code shows some return values for is_thing():\n new_type('A'); [ is_thing( {} ), is_thing( A{} ), is_thing( [] ), ];  Return value in JSON format\n [ true, true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_time_zone/","title":"is_time_zone","tags":[],"description":"","content":"This function determines whether the provided value is of type str and contains a valid time zone (see time_zones_info() for a list with all available time zones).\nThis function does not generate a change.\nFunction is_time_zone(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type str and contains a valid time zone, else false.\nExample  This code shows some return values for is_time_zone():\n [ is_time_zone( 'Europe/Amsterdam' ), is_time_zone( '@Work' ), ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_timeval/","title":"is_timeval","tags":[],"description":"","content":"This function determines whether the provided value is of type timeval.\nThis function does not generate a change.\nFunction is_timeval(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type timeval, else false.\nExample  This code shows some return values for is_utf8():\n [ is_timeval( timeval(2013, 2, 6) ), is_timeval( datetime(2013, 2, 6) ), ];  Return value in JSON format\n [ true, false ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_tuple/","title":"is_tuple","tags":[],"description":"","content":"This function determines whether the provided value is a tuple or not. At least nested arrays are of kind tuple.\nThis function does not generate a change.\nFunction is_tuple(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a tuple, else it returns false.\nExample  This code shows some return values for is_tuple():\n [ is_tuple( [] ), is_tuple( tmp = [['nested'], set()] ), is_tuple( tmp[0] ), is_tuple( tmp[1] ), ];  Return value in JSON format\n [ false, false, true, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/is_utf8/","title":"is_utf8","tags":[],"description":"","content":"This function determines whether the provided value is of type str and contains valid UTF-8 characters.\nThis function does not generate a change.\nFunction is_utf8(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type raw and contains valid utf8, else false.\nExample  This code shows some return values for is_utf8():\n [ is_utf8( 'ԉ' ), is_utf8( 'pi' ), ];  Return value in JSON format\n [ true, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/json_dump/","title":"json_dump","tags":[],"description":"","content":"Converts a ThingsDB value in to a JSON string.\nThis function does not generate a change.\nFunction json_dump(value, [options])\nArguments    Argument Type Description     value any The value to convert into a JSON string.   options thing Thing with options.    Options    Option Type Description     deep int Specify how deep the value must be converted. (defaults to 1)   beautify bool Generate a JSON string with new lines and indentation to make the string more readable.    Return value JSON string.\nExample  This code shows an example for json_dump:\n json_dump({ success: true });  Return value in JSON format\n \u0026#34;{\\\u0026#34;success\\\u0026#34;:true}\u0026#34;  Another example with extra options:\n data = { people: [ {name: 'Iris'}, {name: 'Tess'}, ] }; json_dump(data, {deep: 2});  Return value in JSON format\n \u0026#34;{\\\u0026#34;people\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;Iris\\\u0026#34;},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;Tess\\\u0026#34;}]}\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/collection-api/json_load/","title":"json_load","tags":[],"description":"","content":"Converts a JSON string into a ThingsDB value.\nThis function does not generate a change.\nFunction json_load(string)\nArguments    Argument Type Description     string str JSON string to convert.    Return value ThingsDB value.\nExample  This code shows an example for json_load:\n json_load('{\u0026quot;success\u0026quot;: true}');  Return value in JSON format\n { \u0026#34;success\u0026#34;: true } "},{"uri":"https://docs.thingsdb.net/v1/collection-api/list/","title":"list","tags":[],"description":"","content":"Returns a new empty list or returns a list for a given set.\nThis function does not generate a change.\nFunction list([value])\nArguments    Argument Type Description     value set/list/tuple (optional) Optional value to initialize the list.    Return value A new list.\nExample  This code shows some return values for list():\n list( set({}, {}) );  Return value in JSON format\n [ {}, {} ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/log/","title":"log","tags":[],"description":"","content":"Might be used for debugging code. The message will be logged as a warning message on the console of the node which is processing the request. When you are connected using a socket stream, then a warning message with code 2 will be send to the client as well.\nThis function does not generate a change.\nFunction log(value)\nArguments    Argument Type Description     value str/any (required) Value to log. If not a string, an attempt will be made to convert the value into a string. A type_err() will be raised when the conversion has failed.    Return value Returns nil.\nExample  Returns the reference count of a given value:\n log(\u0026quot;Test.., one, two, three\u0026quot;);  Example return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_enum/","title":"mod_enum","tags":[],"description":"","content":"This function is used to modify an existing enumerator type. A number of actions can be performed with this function.\nThis function generates a change.\nActions    Action Description     add Add a member to an existing enumerator type.   def Set a member as default for an existing enumerator type.   del Delete a member of an existing enumerator type.   mod Modify a member value of an existing enumerator type.   ren Rename a member of an existing enumerator type.    "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_enum/add/","title":"add","tags":[],"description":"","content":"Adds a member to an existing enumerator type.\nAction mod_enum(enum, 'add', name, value)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be added to.   'add' str Passing this argument will result in an add action.   name str Name of the member that has to be added.   value depends Value of the member that has to be added. The type of the member must be equal to the other enum values.    Return value The value nil.\nExample  This code shows how to use the action add:\n // Create enum `Color` set_enum('Color', { RED: '#ff0000', BLUE: '#00ff00' }); // Add `GREEN` to enum `Color` mod_enum('Color', 'add', 'GREEN', '#0000ff');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_enum/def/","title":"def","tags":[],"description":"","content":"Set a member from an existing enumerator type as default member. The default member is also selected when a instance of a Type is created using the enumerator as a required property.\nAction mod_enum(enum, 'def', name)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be removed from.   'def' str Passing this argument will result in a set default action.   name str Name of the member to set as default.    Return value The value nil.\nExample  This code shows how to use the action def:\n set_enum('Color', { RED: '#f00', GREEN: '#0f0', BLUE: '#00f' }); // set GREEN as the default color mod_enum('Color', 'def', 'GREEN'); enum('Color').name(); // color now defaults to GREEN  Return value in JSON format\n \u0026#34;GREEN\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_enum/del/","title":"del","tags":[],"description":"","content":"Delete a member from an existing enumerator type.\nA member may only be removed if the member is no longer being used. Otherwise an operation_err() is raised.\n Action mod_enum(enum, 'del', name)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be removed from.   'del' str Passing this argument will result in a delete action.   name str Name of the member to be removed.    Return value The value nil.\nExample  This code shows how to use the action del:\n // Create enum `Color` set_enum('Color', { RED: '#ff0000', BLUE: '#00ff00' }); // Remove `BLUE` from enum `Color` mod_enum('Color', 'del', 'BLUE');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_enum/mod/","title":"mod","tags":[],"description":"","content":"Modify a member value from an existing enumerator type.\nAction mod_enum(enum, 'mod', name, value)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be removed from.   'mod' str Passing this argument will result in a modify action.   name str Name of the member that has to be modified.   value any New value for the member that has to be modified.    Return value The value nil.\nExample  This code shows how to use the action mod:\n // Create enum `Color` set_enum('Color', { RED: '#ff0000', BLUE: '#00ff00', GREEN: '#0000aa', }); // Modify the value for `GREEN` mod_enum('Color', 'mod', 'GREEN', '#0000ff');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_enum/ren/","title":"ren","tags":[],"description":"","content":"Rename a member value from an existing enumerator type.\nAction mod_enum(enum, 'ren', name, to)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be removed from.   'ren' str Passing this argument will result in a rename action.   name str Name of the member that has to be modified.   to str New name for the member that has to be modified.    Return value The value nil.\nExample  This code shows how to use the action ren:\n // Create enum `Color` set_enum('Color', { RED: '#ff0000', BLUE: '#00ff00', GRAS: '#0000ff', }); // Modify `GRAS` to `GREEN` mod_enum('Color', 'ren', 'GRAS', 'GREEN');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_type/","title":"mod_type","tags":[],"description":"","content":"This function is used to modify an existing Type. A number of actions can be performed with this function.\nThis function generates a change.\nActions    Action Description     add Add a property to an existing Type.   all Iterate over all instances of a given Type.   del Delete a property of an existing Type.   mod Modify a property of an existing Type.   rel Create a relation between existing Type/properties.   ren Rename a property of an existing Type.   wpo Enable or disable wrap-only mode.    "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_type/add/","title":"add","tags":[],"description":"","content":"Adds a property to an existing Type.\nSince version v0.9.2 an initial value is no longer required when having active instances of the given Type. If the initial value is omitted, then a single default value according the Type definition will be created and applied to all instances. See section \u0026ldquo;init using callback\u0026rdquo; for information on how to create a new initial value for each instance.\n Action mod_type(type, 'add', name, definition/closure, [init])\nArguments    Argument Type Description     type str Name of the Type where the property has to be added to.   'add' str Passing this argument will result in an add action.   name str Name of the property that has to be added.   definition/closure str/closure Type definition of the property or closure for the method that has to be added   init any/closure The default value to set on existing instances of this Type. If a closure is used, then the closure will be called on each existing instance, see init using callback. The init argument is only accepted when adding a new property on a type with wrap-only mode disabled and must be omitted when adding a new method or changing a type with wrap-only mode enabled.    Return value The value nil.\nExample  This code shows how to use the action add:\n // Create type `Person` set_type('Person', { name: 'str', age: 'int' }); // Add `hobbies` to type `Person` mod_type('Person', 'add', 'hobbies', '[str]'); // Add a `whoami` method to type `Person` mod_type('Person', 'add', 'whoami', |this| `My name is {this.name} and I am {this.age} years old.`);  Return value in JSON format\n null Init using callback Instead of a fixed initial value, a closure may be used. The closure will be called on each instance of the Type, with the instance as it\u0026rsquo;s first argument.\nFor types with wrap-only mode enabled there are no instances to migrate. Therefore it is not possible to use the init argument in combination with a wrap-only type.\n The return value of the closure will be used as the new value, unless:\n nil is returned by the closure. The return value does not match the definition. In this case an operation_err() is raised after mod_type(..) has finished. An error is raised inside the closure. In this case an operation_err() is raised after mod_type(..) has finished.  In all three cases above, the value will be untouched after the callback. Thus, unless you have changed the property yourself, the default will be applied.\nSuppose we want to add a chat property or type Chat to type Room:\nset_type('Chat', { messages: '[str]' }); set_type('Room', { name: 'str' }); .room_a = Room{ name: 'room A' }; .room_b = Room{ name: 'room B' }; /* * Suppose we want to add a `chat` property or type `Chat` to type `Room` and * used the following code: * * mod_type('Room', 'add', 'chat', 'Chat'); * * This would give `room A` and `room B` both the SAME instance of type Chat. * Thus when adding for example a message to room A, the message would also * appear in room B. * * This can be solved using a closure to assign a new instance to each instance of room. * * mod_type('Room', 'add', 'chat', 'Chat', || Chat{}); * * Alternatively, you could also perform some additional work based on the room, see code below: */ mod_type('Room', 'add', 'chat', 'Chat', |room| { room.chat = Chat{ messages: [`Welcome in {room.name}`] }; nil; // Return `nil` since we have chosen to set `chat` inside the closure }); .room_a.chat.messages; // Return the chat messages of room A  Return value in JSON format\n [ \u0026#34;Welcome in room A\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_type/all/","title":"all","tags":[],"description":"","content":"Run a given callback on all the instances of a given Type.\nThis function should be used for migration purposes and not for common queries as the function is rather slow. When calling this action, ThingsDB requires to loop over all the things in the collection, including the things which are marked for garbage collection.\n Action mod_type(type, 'all', callback)\nArguments    Argument Type Description     type str Name of the Type to iterate over.   'all' str Passing this argument will result in a iterate-all action.   callback closure The closure will be called on each instance.    Return value The value nil.\nExample  This code shows the return value for the action all:\n // Create type `Player` set_type('Player', { score: 'int', }); // Create a player with score \u0026quot;10\u0026quot; player = Player{score: 10}; // Update all the current scores times 10 mod_type('Player', 'all', |p| p.score *= 10); player;  Return value in JSON format\n { \u0026#34;score\u0026#34;: 100 } "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_type/del/","title":"del","tags":[],"description":"","content":"Deletes a property or method from an existing Type.\nA property will be removed from all the active instances of that Type.\n Action mod_type(type, 'del', name)\nArguments    Argument Type Description     type str Name of the Type where the property has to be removed from.   'del' str Passing this argument will result in a delete action.   name str Name of the property or method that has to be removed.    Return value The value nil.\nExample  This code shows how to use the action del:\n // Create type `Person` set_type('Person', { name: 'str', age: 'int', hobbies: '[str]' }); // Delete `hobbies` from type `Person` mod_type('Person', 'del', 'hobbies');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_type/mod/","title":"mod","tags":[],"description":"","content":"Modifies the type definition of a property or the closure of a method from an existing Type. It is not possible to convert a property to a method or the other way around.\nWithout an additional callback it is possible to modify to a less \u0026lsquo;strict\u0026rsquo; definition. So for example, age: 'int' can become age: 'int?', but not the other way around. Since version v0.9.3 it is possible to migrate to a more strict or completely different definition by using an additional callback closure for generating new values.\n Action mod_type(type, 'mod', name, definition, [callback])\nArguments    Argument Type Description     type str Name of the Type where the property has to be modified from.   'mod' str Passing this argument will result in a modify action.   name str Name of the property that has to be modified.   definition/closure str/closure New type definition of the property or closure for the method that has to be modified.   callback closure The closure will be called on each existing instance and can be used to set a new value, see modify using callback. The callback argument is only accepted when modifying a property on a type with wrap-only mode disabled and must be omitted when modifying a method or changing a type with wrap-only mode enabled.    Return value The value nil.\nExample  This code shows the return value for the action mod:\n // Create type `Person` set_type('Person', { name: 'str', age: 'int', whoami: |this| `My name is {this.name} and I am {this.age} years old.` }); // Make `age` nillable mod_type('Person', 'mod', 'age', 'int?'); // Change the `whoami` method mod_type('Person', 'mod', 'whoami', |this| { is_int(this.age) ? `My name is {this.name} and I am {this.age} years old.` : `My name is {this.name} and my age is a well kept secret.`; });  Return value in JSON format\n null Modify using callback If you want to migrate an exiting property definition to a complete different or more strict definition, an addition closure argument must be used to generate new values for existing instances (with the exception of types with wrap-only mode enabled).\nFor types with wrap-only mode enabled there are no instances to migrate and therefore the callback argument cannot be used.\n The return value of the closure will be used as the new value, unless:\n nil is returned by the closure. The return value does not match the new definition. In this case an operation_err() is raised after mod_type(..) has finished. An error is raised inside the closure. In this case an operation_err() is raised after mod_type(..) has finished.  In all three cases above, the value will be untouched after the callback unless the existing property does not match with the new definition. In the latter case, a default value will be applied after the callback has finished.\nDuring the migration, each instance has any definition for the property which is being modified. This is done by ThingsDB so we ensure that both the old value, and the new value will match the definition. This means that when the callbacks are executed, everything may be attached to the property. This value will be corrected by ThingsDB if there is no match between the value and the new definition.\nSuppose we want to modify a chat property on type Room from definition \u0026quot;str\u0026quot; to definition \u0026quot;Chat\u0026quot;:\nset_type('Room', { chat: 'str' }); my_room = Room{ chat: 'My Chat Room!' }; // Create a new Chat type set_type('Chat', { messages: '[str]', name: 'str', }); // Replace the `chat` string with the `Chat` type. // As name for the new Chat type we apply the `old` chat string mod_type('Room', 'mod', 'chat', 'Chat', |room| Chat{name: room.chat}); my_room.chat; // Return my chat room  Return value in JSON format\n { \u0026#34;messages\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;My Chat Room!\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_type/rel/","title":"rel","tags":[],"description":"","content":"Add or delete a relation between properties of the same or different types.\nRelations can only be created between nillable type definitions and/or restricted sets. This results in the following combinations:\n   Combination Description     Type? \u0026lt;-\u0026gt; Type? One to one relation.   Type? \u0026lt;-\u0026gt; {Type} One to many relation.   {Type} \u0026lt;-\u0026gt; {Type} Many to many relation.    All missing relations on existing instances will be automatically created by ThingsDB once you add a new relation.\nWith a one-to-one or a one-to-many relation it may mot be possible to automatically create all missing relations because you might be in a state where the existing instances are not related correctly. For example, you want to create a one-to-many relation but one of the things exists in a set on another thing than being referenced to. Either the set or the reference is obviously incorrect. In such state ThingsDB will raise a type_err() and does not create the relation.\n Action mod_type(type, 'rel', property, to)\nArguments    Argument Type Description     type str Name of the Type where to set the wrap-mode for.   'rel' str Passing this argument will result in a relation action.   property str Property to create a relation for.   to str/nil Property on the other type to create a relation with. When nil, an existing relation will be removed.    Return value The value nil.\nExample  This code shows a one-to-many relation between two types:\n new_type('Workspace'); new_type('Person'); set_type('Workspace', { people: '{Person}' }); set_type('Person', { workspace: 'Workspace?' }); /* Create a relation between Person.workspace and Workspace.people * * Note: We could have used mod_type('Workspace', ...); just as well, * it does not matter from which direction the relation is made. */ mod_type('Person', 'rel', 'workspace', 'people'); // Create a workspace foo = Workspace{}; // Create a person and assign workspace `foo`: alice = Person{ workspace: foo }; // alice is automatically assigned to people in workspace foo: foo.people.has(alice); // true  Return value in JSON format\n true Another example using a many-to-many relation within a single type:\nnew_type('Album'); set_type('Album', { title: 'str', similar: '{Album}' }); // Create a relation for Album.similar mod_type('Album', 'rel', 'similar', 'similar'); hoss = Album{title: 'Hoss'}; punk_in_drublic = Album{title: 'Punk in Drublic'}; // Add `punk_in_drublic` as a similar album to `hoss` hoss.similar.add(punk_in_drublic); // note that `hoss` is also added as a similar album to `punk_in_drublic`: punk_in_drublic.similar.has(hoss); // true  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_type/ren/","title":"ren","tags":[],"description":"","content":"Rename a property or method from an existing Type.\nAction mod_type(type, 'ren', name, to)\nArguments    Argument Type Description     type str Name of the Type where the property or method has to be modified from.   'ren' str Passing this argument will result in a modify action.   name str Name of the property or method that has to be modified.   to str New name for the property or method that has to be modified.    Return value The value nil.\nExample  This code shows the return value for the action ren:\n // Create type `Person` set_type('Person', { name: 'str', a: 'int', }); // Rename `a` to `age` mod_type('Person', 'ren', 'a', 'age');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/mod_type/wpo/","title":"wpo","tags":[],"description":"","content":"Enable or disable wrap-only mode for an existing Type.\nWhen wrap-only mode is enabled, no instances of the type can be created and the type can not be used by other type unless that type is also in wrap-only mode. The only purpose of a type in wrap-only mode is to wrap things with but this gives you the assurance that no data is created using this type.\nEnable wrap-only mode To enable wrap-only mode, make sure no instances of this type exist, and also be sure that no other type without wrap-only mode is dependent on the type you want to change. Loosely dependencies, like nillable (\u0026quot;Type?\u0026quot;), array-of (\u0026quot;[Type]\u0026quot;) or set-of (\u0026quot;{Type}\u0026quot;) dependencies are allowed.\nDisable wrap-only mode To disable wrap-only mode, make sure the type has no dependencies to type with wrap-only mode enabled. Loosely dependencies, like nillable (\u0026quot;Type?\u0026quot;), array-of (\u0026quot;[Type]\u0026quot;) or set-of (\u0026quot;{Type}\u0026quot;) dependencies are allowed.\nAction mod_type(type, 'wpo', mode)\nArguments    Argument Type Description     type str Name of the Type where to set the wrap-mode for.   'wpo' str Passing this argument will result in a set-wrap-mode action.   mode bool Enable or disable wrap-mode.    Return value The value nil.\nExample  This code shows the return value for the action wpo:\n // Create type `Person` set_type('Person', { name: 'str', a: 'int', }); // Set type Person in wrap-only mode mod_type('Person', 'wpo', true); // Raises a type error Person{}; Raises a type_err(): type Person has wrap-only mode enabled\n"},{"uri":"https://docs.thingsdb.net/v1/collection-api/new/","title":"new","tags":[],"description":"","content":"Creates a new typed thing of a defined Type.\nWhen possible it is preferred to use the syntax MyType{...} to create a thing of a certain Type. However, sometimes you need to create an thing dynamically with the Type\u0026rsquo;s name as variable and then new() can be used.\n Since version v0.9.2 the value argument is no longer required. If not given all properties will be set to their default values.\n Since version v0.9.5 it is also possible to create a typed thing using the shorter syntax Type(thing) (instead of writing new(\u0026quot;Type\u0026quot;, thing)).\n This function generates a change.\nFunction new(type, [value])\nArguments    Argument Type Description     type str The name of the Type that a thing must be made of.   value thing (optional) Thing containing all the properties that must be added to the new thing of the given Type.    Return value A Thing containing all the properties which have been added to the new thing of the given Type.\nExample  This code shows how to use new():\n // Create type `Person` set_type('Person', { name: 'str', age: 'int', hobbies: '[str]' }); // Create a typed thing of type `Person` new('Person', { name: 'John', age: 34, hobbies: ['Football'] });  Return value in JSON format\n { \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;age\u0026#34;: 34, \u0026#34;hobbies\u0026#34;: [\u0026#34;Football\u0026#34;] }  The property names and (data) types of the values that are added to a typed thing of an existing type must exactly match that Type.\n "},{"uri":"https://docs.thingsdb.net/v1/collection-api/new_type/","title":"new_type","tags":[],"description":"","content":"Creates a new Type. This function only creates a new type and does not allow you to specify any fields. With the set_type() function you can define the fields for the new type.\nIt is possible to use set_type directly without calling new_type first. However, sometimes you want to cross reference two types so you want both type to exists before calling set_type.\n This function generates a change.\nFunction new_type(type, [wrap_only])\nArguments    Argument Type Description     type string Name of the Type to be created.   wrap_only bool (optional) When true the new type will be created with wrap-only mode enabled. Default is false.    If wrap-only mode is enabled, no typed thing of this type can be created nor can the type be used by other type. In wrap-only mode the only purpose of the type is to wrap other things.\n Return value The name of the newly created Type.\nExample  This code shows a use case where new_type() is helpful:\n new_type('A'); new_type('B'); set_type('A', { b: 'B?' }); set_type('B', { a: 'A?' }); // Return type information types_info();  Example return value in JSON format\n [ { \u0026#34;created_at\u0026#34;: 1594384634, \u0026#34;fields\u0026#34;: [ [\u0026#34;b\u0026#34;, \u0026#34;B?\u0026#34;] ], \u0026#34;methods\u0026#34;: {}, \u0026#34;modified_at\u0026#34;: 1594384634, \u0026#34;name\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;type_id\u0026#34;: 0, \u0026#34;wrap_only\u0026#34;: false }, { \u0026#34;created_at\u0026#34;: 1594384634, \u0026#34;fields\u0026#34;: [ [\u0026#34;a\u0026#34;, \u0026#34;A?\u0026#34;] ], \u0026#34;methods\u0026#34;: {}, \u0026#34;modified_at\u0026#34;: 1594384634, \u0026#34;name\u0026#34;: \u0026#34;B\u0026#34;, \u0026#34;type_id\u0026#34;: 1, \u0026#34;wrap_only\u0026#34;: false } ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/now/","title":"now","tags":[],"description":"","content":"Return the time in seconds since the epoch as a floating point number.\nIf you require the same time multiple times within a query, then call now() only once and save it to a variable, for example now = now();\nThis function does not generate a change.\nFunction now()\nArguments None\nReturn value Current timestamp.\nExample  This code shows the current timestamp:\n // current timestamp now();  Example return value in JSON format\n 1551093313.6622682 "},{"uri":"https://docs.thingsdb.net/v1/collection-api/raise/","title":"raise","tags":[],"description":"","content":"Raises an error.\nThis function does not generate a change.\nFunction raise([error])\nArguments    Argument Type Description     value error/str (optional) The error to raise.    Return value None\nExample  Some examples on how raise() can be used:\n raise (); // raise a default error 'This code is not reached'; raise ('no licenses left'); // raise with a custom message 'This code is not reached'; raise (value_err()); // raise a value error 'This code is not reached'; "},{"uri":"https://docs.thingsdb.net/v1/collection-api/rand/","title":"rand","tags":[],"description":"","content":"Returns pseudo-random number between 0.0 and 1.0.\nDo not use rand() when the purpose is security related since the linear congruential algorithms used by this function are too easy to break.\n This function does not generate a change.\nFunction rand()\nArguments None\nReturn value A pseudo-random float number between 0.0 and 1.0.\nExample  Some examples on how raise() can be used:\n // Return a pseudo-random number between 0.0 and 1.0 rand(); Example return value in JSON format:\n0.54747654169214726 "},{"uri":"https://docs.thingsdb.net/v1/collection-api/randint/","title":"randint","tags":[],"description":"","content":"Returns pseudo-random integer number between a given range.\nThe first argument specifies the start of the range and must have a value less than the second argument when specifies the end of the range. The start is inclusive and the end is exclusive, for example: randint(0, 2) will return either 0 or 1.\nDo not use randint() when the purpose is security related since the linear congruential algorithms used by this function are too easy to break.\n This function does not generate a change.\nFunction randint(start, end)\nArguments    Argument Type Description     start int (required) Start of the range (inclusive).   end int (required) End of the range (exclusive).    Return value A pseudo-random int between start (inclusive) and end (exclusive).\nExample  Example on how randint(..) can be used:\n // Return a pseudo-random number between 10 (inclusive) and 20 (exclusive) randint(10, 20); Example return value in JSON format:\n13 "},{"uri":"https://docs.thingsdb.net/v1/collection-api/randstr/","title":"randstr","tags":[],"description":"","content":"Returns a string with random characters.\nThe default characters to generate a string are URL-safe and contain the characters 0-9, A-Z, a-z, - and _.\nInstead of the default character set, it is possible to use your own set. This custom set may contain duplicated characters which increase the chance for certain characters to occur in the final string. For example, a random string based on the character set AAB will most likely contain more A\u0026rsquo;s than B\u0026rsquo;s.\nThis function is using the SYS_getrandom system call to generate random data and is therefore more secure compared to the other random functions in ThingsDB.\n This function does not generate a change.\nFunction randstr(length, [character-set])\nArguments    Argument Type Description     length int (required) Length of the output string.   character-set str (optional) Custom character set, used to generate the output string.    Return value A random string of a given length.\nExample  Some examples on how randstr(..) can be used:\n // Returns a string of 16 random characters using the default character set. randstr(16); Example return value in JSON format:\n\u0026#34;kKoi4jZ-bFtc5Pwg\u0026#34; // Returns a string of 10 random characters using only HEX characters randstr(10, '0123456789ABCDEF'); Example return value in JSON format:\n\u0026#34;7AFBAE572B\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/collection-api/range/","title":"range","tags":[],"description":"","content":"This function returns a list of numbers, starting from 0 (by default), increments by 1 (by default), and ends at a specified number.\nFunction range() may only be used for relatively small lists. An operation_err() (maximum range length exceeded) will be raised when trying to create a list with more than 1024 numbers.\n Function range(start, stop, step)\nArguments    Argument Type Description     start int (optional) An integer number specifying at which position to start. Default is 0   stop int (required) An integer number specifying at which position to end (exclusive).   step int (optional) An integer number specifying the increment value. Default is 1 and this value must not be zero.    Return value Returns a list of numbers.\nExamples  Return a list with numbers 0 to 5:\n range(6); [0, 1, 2, 3, 4, 5]  Return a list with numbers 0 to 5 but increment by 2:\n range(0, 6, 2); [0, 2, 4]  The step argument may also be a negative value:\n range(2, -3, -1); [2, 1, 0, -1, -2] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/refs/","title":"refs","tags":[],"description":"","content":"Returns the reference count of a value.\nGenerally, the count returned is one higher than you might expect, because it includes the (temporary) reference.\nDifferent nodes might return different reference values since the reference counter can be higher or lower depending on how the value is stored and used.\n This function does not generate a change.\nFunction refs(value)\nArguments    Argument Type Description     value any (required) The value to return the reference count for.    Return value Reference count of the given value.\nExample  Returns the reference count of a given value:\n [ refs( 'some string' ), refs( a = b = c = 42 ), ];  Example return value in JSON format\n [ 2, 5 ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/regex/","title":"regex","tags":[],"description":"","content":"Create a new regular expression.\nThis function can be used to create a regular expression from a given pattern with optional flags.\nThis function does not generate a change.\nFunction regex(pattern, [flags])\nArguments    Argument Type Description     pattern str (required) The pattern to use as a regular expression.   flags str (optional) Optional flags, see the regex for more information.    Return value A new regular expression.\nExample  Returns a new regular expression from a pattern.\n // match strings which start with \u0026quot;the \u0026quot;, case in-sensitive (`i` flag) re = regex(\u0026quot;^the\\s\u0026quot;, \u0026quot;i\u0026quot;); re.test(\u0026quot;The Pretenders\u0026quot;);  Example return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/collection-api/rename_enum/","title":"rename_enum","tags":[],"description":"","content":"Rename an enum type.\nThis function generates a change.\nFunction rename_enum(current_name, new_name)\nArguments    Argument Type Description     current_name str (required) Current enum type name.   new_name str (required) New name for the enum type.    Return value Returns nil when successful.\n"},{"uri":"https://docs.thingsdb.net/v1/collection-api/rename_type/","title":"rename_type","tags":[],"description":"","content":"Rename a type.\nThis function generates a change.\nFunction rename_type(current_name, new_name)\nArguments    Argument Type Description     current_name str (required) Current type name.   new_name str (required) New name for the type.    Return value Returns nil when successful.\n"},{"uri":"https://docs.thingsdb.net/v1/collection-api/return/","title":"return","tags":[],"description":"","content":"The return function moves the argument to the output of the current query/closure call.\nIf no return is specified, then the last value will be the value which is returned. A second argument can be given to the return function which can be used to specify how deep the result should be returned. The default deep value is set to 1, but any value between 0 and 127 is possible. See the deep section for a detailed explanation of this argument.\nA query can run different procedures and/or closures which might have changed the deep value. In case you need to know the current deep value, the function deep() can be used.\nBe careful with using a deep value greater than one, especially when circular references are made since this can result in returning a large amount of data.\n When no arguments are used the return value will be nil.\nThis function does not generate a change.\nFunction return([value[, deep]])\nArguments    Argument Type Description     value any (optional) The value which will be moved to the output of the query or closure.   deep int (optional) Specify the deep value for the query (the current deep value will be overwritten).    Return value The return function has no real return value but will move directly to the output of the current query or closure.\nExample  This code shows how return() can be used:\n // return .colors, two levels deep if .colors exists try(return(.colors, 2)); // if .colors could not be returned, create the property .colors = { aegean: { R: 0x5e, G: 0x8e, B: 0xc9, }, }; return(.colors, 2);  Example return value in JSON format (the #ids might be different)\n { \u0026#34;#\u0026#34;: 23, \u0026#34;aegean\u0026#34;: { \u0026#34;#\u0026#34;: 24, \u0026#34;B\u0026#34;: 201, \u0026#34;G\u0026#34;: 142, \u0026#34;R\u0026#34;: 94 } } Deep To understand the deep argument, suppose you have the following data:\n.artists = [{ artist: \u0026quot;David Bowie\u0026quot;, albums: [{ name: \u0026quot;The Rise and Fall of Ziggy Stardust and the Spiders from Mars\u0026quot;, songs: [{ title: \u0026quot;Five Years\u0026quot;, duration: 4.42 }] }] }]; If you only require the ID\u0026rsquo;s from all .artists and do not any other properties, a value of 0 should be used for deep:\nreturn(.artists, 0); Something like this will be returned. (the Id # might be different since this is auto generated)\n[ { \u0026#34;#\u0026#34;: 34580 } ] Here are some more examples using different values of deep:\n Return the artists, albums will be returned only with (#) ID\u0026rsquo;s:\n .artists; // Uses the default deep value of `1` [ { \u0026#34;#\u0026#34;: 34580, \u0026#34;albums\u0026#34;: [ { \u0026#34;#\u0026#34;: 34581 } ], \u0026#34;artist\u0026#34;: \u0026#34;David Bowie\u0026#34; } ]  Return the artists and albums, songs will be returned only with (#) ID\u0026rsquo;s:\n return(.artists, 2); [ { \u0026#34;#\u0026#34;: 34580, \u0026#34;albums\u0026#34;: [ { \u0026#34;#\u0026#34;: 34581, \u0026#34;name\u0026#34;: \u0026#34;The Rise and Fall of Ziggy Stardust and the Spiders from Mars\u0026#34;, \u0026#34;songs\u0026#34;: [ { \u0026#34;#\u0026#34;: 34582 } ] } ], \u0026#34;artist\u0026#34;: \u0026#34;David Bowie\u0026#34; } ]  Return the artists, albums and songs:\n return(.artists, 3); [ { \u0026#34;#\u0026#34;: 34580, \u0026#34;albums\u0026#34;: [ { \u0026#34;#\u0026#34;: 34581, \u0026#34;name\u0026#34;: \u0026#34;The Rise and Fall of Ziggy Stardust and the Spiders from Mars\u0026#34;, \u0026#34;songs\u0026#34;: [ { \u0026#34;#\u0026#34;: 34582, \u0026#34;duration\u0026#34;: 4.42, \u0026#34;title\u0026#34;: \u0026#34;Five Years\u0026#34; } ] } ], \u0026#34;artist\u0026#34;: \u0026#34;David Bowie\u0026#34; } ]  Use custom Type and the wrap() function to gain more control on which properties to return.\n "},{"uri":"https://docs.thingsdb.net/v1/collection-api/room/","title":"room","tags":[],"description":"","content":"Returns a room from a specified value, that may be dynamic. If no value is given, a new room is returned.\nThis function does not generate a change.\nFunction room([id])\nArguments    Argument Type Description     id int (optional) The Id for the room to return.    Return value Returns a room. A lookup_err() is returned in case a room Id is given which is not found inside the collection.\nExample  This code shows an example usage of room():\n // Create a room which we can use in the example id = (.my_room = room()).id(); [ room(id), room(), ];  Example return value in JSON format\n [ \u0026#34;room:18\u0026#34;, \u0026#34;room:nil\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/set/","title":"set","tags":[],"description":"","content":"Returns a new empty set. If an array is given, then all items in the given array must be of type thing and a new set is returned based on the given things. Instead of an array, it is also possible to provide one thing or multiple comma-separated things.\nThis function does not generate a change.\nFunction set(array_or_things)\nArguments    Argument Type Description     array_or_things array/things (optional) Optional array or things to initialize the set.    Return value A new set.\nExample  This code shows some return values for set():\n set({name: 'Iris'});  Return value in JSON format\n [ { \u0026#34;name\u0026#34;: \u0026#34;Iris\u0026#34; } ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/set_enum/","title":"set_enum","tags":[],"description":"","content":"Creates a new enumerator type.\nThis function generates a change.\nFunction set_enum(enum, members)\nArguments    Argument Type Description     enum str The name of the enumerator type to create.   members thing Thing containing all the members to be set.    Return value The value nil.\nExample  This code shows how to use set_enum():\n set_enum('Status', { OK: 0, NOK: -1 });  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/set_type/","title":"set_type","tags":[],"description":"","content":"Defines the properties of a Type. Function set_type works only on a new Type. Use mod_type() if you want to change an existing Type, see mod_type.\nThis function generates a change.\nFunction set_type(type, value, [wrap_only])\nArguments    Argument Type Description     type str The name of the Type where the properties have to be set.   value thing Thing containing all the properties to be set.   wrap_only bool (optional) When true the type will be configured with wrap-only mode enabled. Default is false for a new type, or untouched if the type already existed.    If wrap-only mode is enabled, no instances of this type can be created nor can the type be used by other type unless they also have wrap-only mode enabled. In wrap-only mode the only purpose of the type is to wrap other things.\n Return value The value nil.\nExample  This code shows how to use set_type():\n set_type('Person', { name: 'str', age: 'uint', hobbies: '[str]' });  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/str/","title":"str","tags":[],"description":"","content":"Convert a value to a string. If no value is given, an empty string \u0026quot;\u0026quot; is returned.\nWhen bytes are converted to str then the data will be checked if it contains valid UTF-8 characters. If this is not the case, a value_err() will be raised.\nThis function does not generate a change.\nFunction str(value)\nArguments    Argument Type Description     value any (optional) The value to create a string from.    Return value A new string\nExample  This code shows some return values for str():\n [ str(), str(42), str(true) ];  Return value in JSON format\n [ \u0026#34;\u0026#34;, \u0026#34;42\u0026#34;, \u0026#34;true\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/task/","title":"task","tags":[],"description":"","content":"Create a new task or get an existing task by Id.\nUsing an Id as a single argument, this function can be used to return an existing task. With tasks() you can get a list with all available tasks.\nThis function generates a change.\nFunction task(Id) (get a task by Id) task(start, code, [args]) (create a new task)\nArguments    Argument Type Description     Id int (required) The Id of the task to return.       Argument Type Description     start datetime (required) Date/time to execute the task.   code closure (required) Closure to execute at the scheduled date/time.   args list (optional) Optional list with task arguments.    Return value A new task or existing task if called with an Id.\nExample  The following code creates a one-time task:\n start = datetime().move('minutes', 1); task(start, || { log('One time task!'); });  The code below is an example of a repeating task:\n start = datetime().move('days', 1).replace({ hour: 20, minute: 0, second: 0 }); task(start, |task| { task.again_in('days', 7); log('Weekly task'); }); "},{"uri":"https://docs.thingsdb.net/v1/collection-api/tasks/","title":"tasks","tags":[],"description":"","content":"Return a list with all the tasks in the current scope.\nThis function does not generate a change.\nFunction tasks()\nArguments None\nReturn value A list with all the tasks in the current scope.\nExample  Example tasks():\n tasks();  Example return value in JSON format\n [ \u0026#34;\u0026lt;task:9 owner:admin run_at:nil status:err\u0026gt;\u0026#34;, \u0026#34;\u0026lt;task:10 owner:admin run_at:2021-11-03T12:43:57Z status:nil\u0026gt;\u0026#34;, \u0026#34;\u0026lt;task:26 owner:admin run_at:2021-11-03T20:00:00Z status:nil\u0026gt;\u0026#34; ]  Example how to use tasks() to get all task Ids:\n tasks().map(|t| t.id());  Example return value in JSON format\n [ 9, 10, 26 ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/thing/","title":"thing","tags":[],"description":"","content":"Returns a thing from a specified value, that may be dynamic. If no value is given, a new thing is returned.\nThis function does not generate a change.\nFunction thing([id])\nArguments    Argument Type Description     id int (optional) The Id for the thing to return.    Return value Returns a thing. A lookup_err() is returned in case an Id is given which is not found inside the collection.\nExample  This code shows an example usage of thing():\n .greet = \u0026quot;Hello world!\u0026quot;; [ thing(.id()), thing(), ];  Example return value in JSON format\n [ { \u0026#34;#\u0026#34;: 42, \u0026#34;greet\u0026#34;: \u0026#34;Hello world!\u0026#34; }, {} ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/time_zones_info/","title":"time_zones_info","tags":[],"description":"","content":"Returns all available time zones in ThingsDB.\nThe function is_time_zone(..) can be used to check if a given str contains a time zone known by ThingsDB.\n This function does not generate a change.\nFunction time_zones_info()\nArguments None\nReturn value Returns a list with all available time zones in ThingsDB.\nAvailable Time Zones  Africa/Abidjan Africa/Accra Africa/Addis_Ababa Africa/Algiers Africa/Asmara Africa/Bamako Africa/Bangui Africa/Banjul Africa/Bissau Africa/Blantyre Africa/Brazzaville Africa/Bujumbura Africa/Cairo Africa/Casablanca Africa/Ceuta Africa/Conakry Africa/Dakar Africa/Dar_es_Salaam Africa/Djibouti Africa/Douala Africa/El_Aaiun Africa/Freetown Africa/Gaborone Africa/Harare Africa/Johannesburg Africa/Juba Africa/Kampala Africa/Khartoum Africa/Kigali Africa/Kinshasa Africa/Lagos Africa/Libreville Africa/Lome Africa/Luanda Africa/Lubumbashi Africa/Lusaka Africa/Malabo Africa/Maputo Africa/Maseru Africa/Mbabane Africa/Mogadishu Africa/Monrovia Africa/Nairobi Africa/Ndjamena Africa/Niamey Africa/Nouakchott Africa/Ouagadougou Africa/Porto-Novo Africa/Sao_Tome Africa/Tripoli Africa/Tunis Africa/Windhoek America/Adak America/Anchorage America/Anguilla America/Antigua America/Araguaina America/Argentina/Buenos_Aires America/Argentina/Catamarca America/Argentina/Cordoba America/Argentina/Jujuy America/Argentina/La_Rioja America/Argentina/Mendoza America/Argentina/Rio_Gallegos America/Argentina/Salta America/Argentina/San_Juan America/Argentina/San_Luis America/Argentina/Tucuman America/Argentina/Ushuaia America/Aruba America/Asuncion America/Atikokan America/Bahia America/Bahia_Banderas America/Barbados America/Belem America/Belize America/Blanc-Sablon America/Boa_Vista America/Bogota America/Boise America/Cambridge_Bay America/Campo_Grande America/Cancun America/Caracas America/Cayenne America/Cayman America/Chicago America/Chihuahua America/Costa_Rica America/Creston America/Cuiaba America/Curacao America/Danmarkshavn America/Dawson America/Dawson_Creek America/Denver America/Detroit America/Dominica America/Edmonton America/Eirunepe America/El_Salvador America/Fort_Nelson America/Fortaleza America/Glace_Bay America/Goose_Bay America/Grand_Turk America/Grenada America/Guadeloupe America/Guatemala America/Guayaquil America/Guyana America/Halifax America/Havana America/Hermosillo America/Indiana/Indianapolis America/Indiana/Knox America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Tell_City America/Indiana/Vevay America/Indiana/Vincennes America/Indiana/Winamac America/Inuvik America/Iqaluit America/Jamaica America/Juneau America/Kentucky/Louisville America/Kentucky/Monticello America/Kralendijk America/La_Paz America/Lima America/Los_Angeles America/Lower_Princes America/Maceio America/Managua America/Manaus America/Marigot America/Martinique America/Matamoros America/Mazatlan America/Menominee America/Merida America/Metlakatla America/Mexico_City America/Miquelon America/Moncton America/Monterrey America/Montevideo America/Montserrat America/Nassau America/New_York America/Nipigon America/Nome America/Noronha America/North_Dakota/Beulah America/North_Dakota/Center America/North_Dakota/New_Salem America/Nuuk America/Ojinaga America/Panama America/Pangnirtung America/Paramaribo America/Phoenix America/Port-au-Prince America/Port_of_Spain America/Porto_Velho America/Puerto_Rico America/Punta_Arenas America/Rainy_River America/Rankin_Inlet America/Recife America/Regina America/Resolute America/Rio_Branco America/Santarem America/Santiago America/Santo_Domingo America/Sao_Paulo America/Scoresbysund America/Sitka America/St_Barthelemy America/St_Johns America/St_Kitts America/St_Lucia America/St_Thomas America/St_Vincent America/Swift_Current America/Tegucigalpa America/Thule America/Thunder_Bay America/Tijuana America/Toronto America/Tortola America/Vancouver America/Whitehorse America/Winnipeg America/Yakutat America/Yellowknife Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Macquarie Antarctica/Mawson Antarctica/McMurdo Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Arctic/Longyearbyen Asia/Aden Asia/Almaty Asia/Amman Asia/Anadyr Asia/Aqtau Asia/Aqtobe Asia/Ashgabat Asia/Atyrau Asia/Baghdad Asia/Bahrain Asia/Baku Asia/Bangkok Asia/Barnaul Asia/Beirut Asia/Bishkek Asia/Brunei Asia/Chita Asia/Choibalsan Asia/Colombo Asia/Damascus Asia/Dhaka Asia/Dili Asia/Dubai Asia/Dushanbe Asia/Famagusta Asia/Gaza Asia/Hebron Asia/Ho_Chi_Minh Asia/Hong_Kong Asia/Hovd Asia/Irkutsk Asia/Jakarta Asia/Jayapura Asia/Jerusalem Asia/Kabul Asia/Kamchatka Asia/Karachi Asia/Kathmandu Asia/Khandyga Asia/Kolkata Asia/Krasnoyarsk Asia/Kuala_Lumpur Asia/Kuching Asia/Kuwait Asia/Macau Asia/Magadan Asia/Makassar Asia/Manila Asia/Muscat Asia/Nicosia Asia/Novokuznetsk Asia/Novosibirsk Asia/Omsk Asia/Oral Asia/Phnom_Penh Asia/Pontianak Asia/Pyongyang Asia/Qatar Asia/Qostanay Asia/Qyzylorda Asia/Riyadh Asia/Sakhalin Asia/Samarkand Asia/Seoul Asia/Shanghai Asia/Singapore Asia/Srednekolymsk Asia/Taipei Asia/Tashkent Asia/Tbilisi Asia/Tehran Asia/Thimphu Asia/Tokyo Asia/Tomsk Asia/Ulaanbaatar Asia/Urumqi Asia/Ust-Nera Asia/Vientiane Asia/Vladivostok Asia/Yakutsk Asia/Yangon Asia/Yekaterinburg Asia/Yerevan Atlantic/Azores Atlantic/Bermuda Atlantic/Canary Atlantic/Cape_Verde Atlantic/Faroe Atlantic/Madeira Atlantic/Reykjavik Atlantic/South_Georgia Atlantic/St_Helena Atlantic/Stanley Australia/Adelaide Australia/Brisbane Australia/Broken_Hill Australia/Currie Australia/Darwin Australia/Eucla Australia/Hobart Australia/Lindeman Australia/Lord_Howe Australia/Melbourne Australia/Perth Australia/Sydney Canada/Atlantic Canada/Central Canada/Eastern Canada/Mountain Canada/Newfoundland Canada/Pacific Europe/Amsterdam Europe/Andorra Europe/Astrakhan Europe/Athens Europe/Belgrade Europe/Berlin Europe/Bratislava Europe/Brussels Europe/Bucharest Europe/Budapest Europe/Busingen Europe/Chisinau Europe/Copenhagen Europe/Dublin Europe/Gibraltar Europe/Guernsey Europe/Helsinki Europe/Isle_of_Man Europe/Istanbul Europe/Jersey Europe/Kaliningrad Europe/Kiev Europe/Kirov Europe/Lisbon Europe/Ljubljana Europe/London Europe/Luxembourg Europe/Madrid Europe/Malta Europe/Mariehamn Europe/Minsk Europe/Monaco Europe/Moscow Europe/Oslo Europe/Paris Europe/Podgorica Europe/Prague Europe/Riga Europe/Rome Europe/Samara Europe/San_Marino Europe/Sarajevo Europe/Saratov Europe/Simferopol Europe/Skopje Europe/Sofia Europe/Stockholm Europe/Tallinn Europe/Tirane Europe/Ulyanovsk Europe/Uzhgorod Europe/Vaduz Europe/Vatican Europe/Vienna Europe/Vilnius Europe/Volgograd Europe/Warsaw Europe/Zagreb Europe/Zaporozhye Europe/Zurich GMT Indian/Antananarivo Indian/Chagos Indian/Christmas Indian/Cocos Indian/Comoro Indian/Kerguelen Indian/Mahe Indian/Maldives Indian/Mauritius Indian/Mayotte Indian/Reunion Pacific/Apia Pacific/Auckland Pacific/Bougainville Pacific/Chatham Pacific/Chuuk Pacific/Easter Pacific/Efate Pacific/Enderbury Pacific/Fakaofo Pacific/Fiji Pacific/Funafuti Pacific/Galapagos Pacific/Gambier Pacific/Guadalcanal Pacific/Guam Pacific/Honolulu Pacific/Kiritimati Pacific/Kosrae Pacific/Kwajalein Pacific/Majuro Pacific/Marquesas Pacific/Midway Pacific/Nauru Pacific/Niue Pacific/Norfolk Pacific/Noumea Pacific/Pago_Pago Pacific/Palau Pacific/Pitcairn Pacific/Pohnpei Pacific/Port_Moresby Pacific/Rarotonga Pacific/Saipan Pacific/Tahiti Pacific/Tarawa Pacific/Tongatapu Pacific/Wake Pacific/Wallis US/Alaska US/Arizona US/Central US/Eastern US/Hawaii US/Mountain US/Pacific UTC  "},{"uri":"https://docs.thingsdb.net/v1/collection-api/timeval/","title":"timeval","tags":[],"description":"","content":"Returns a timeval depending on some optional values.\nThis function does not generate a change.\nFunction    Interface Arguments Description     timeval() None Return a timeval with the current date/tine.   timeval(ts) int/float Return a timeval from a given UNIX time stamp.   timeval(str, [fmt]) str Return a timeval from a given string. See initialize from string for a details.   datetime(int, int, int, [int, [int, [int]]], [zone]) int, int,\u0026hellip; str Return a timeval using values for individual time units, with optional time zone.    Return value Returns a timeval object.\nExample  This code shows a few examples for timeval():\n [ {timeval(); /* current time */ }, {timeval(1607609782); /* Thu, 10 Dec 2020 14:16:22 */ }, {timeval(2013, 2, 6, 12); /* Wed, 06 Feb 2013 */ }, {timeval(2013, 2, 6, 13, 'Europe/Amsterdam'); /* with a time zone */ }, {timeval('1978-08-07T13:30:00Z'); /* Mon, 07 Aug 1978 13:30 */ }, {timeval('12/10/2020', '%M/%s/%Y'); /* Thu, 10 Dec 2020 */ }, ];  Return value in JSON format with the collection time zone configured as UTC:\n [ 1607610966, 1607609782, 1360152000, 1360152000, 271344600, 1577836810 ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/try/","title":"try","tags":[],"description":"","content":"Try a statement and if the statement fails with an error, then the error is returned. It is also possible to catch only specific errors.\nIt is not possible to catch internal errors. Such errors should never happen, unless something is really wrong with at least one node.\n This function does not generate a change.\nFunction try(statement, [e0, e1, ..., eX])\nArguments    Argument Type Description     statement any (required) The statement to try.   e0, e1, \u0026hellip;, eX int/raw (optional) Only catch specific errors, if omitted, catch all errors. Both error codes and names are accepted.    Return value The value for the specified statement, or an error if the statement has failed.\nExample  This code shows some return values for try():\n [ is_err( try( x = (1/0) )), is_err( try( (1/0), zero_div_err() )), ];  Return value in JSON format\n [ true, true ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/type/","title":"type","tags":[],"description":"","content":"Returns the type name of a value.\nThis function does not generate a change.\nFunction type(value)\nArguments    Argument Type Description     value any (required) The value to return the type name for.    Return value Type name of the given value.\nExample  Returns the type name of a given value:\n [ type( nil ), type( 42 ), type( 3.14 ), ];  Example return value in JSON format\n [ \u0026#34;nil\u0026#34;, \u0026#34;int\u0026#34;, \u0026#34;float\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/collection-api/type_assert/","title":"type_assert","tags":[],"description":"","content":"Raises a type_err() if the specified expression evaluates to false.\nThis function does not generate a change.\nFunction assert(expression, type(s) [, error_msg])\nArguments    Argument Type Description     expression any (required) The result of this expression will be type tested.   type(s) str/list (required) Type name or list with type names to check.   error_msg str (optional) Custom error message.    Return value Returns nil if the type of the expression evaluates to true. Otherwise an type_err() is raised.\nExample  This code shows how assert can be used:\n type_assert(\u0026quot;one\u0026quot;, \u0026quot;int\u0026quot;);  Raises a type_err() exception\n { \u0026#34;error_msg\u0026#34;: \u0026#34;invalid type `str`\u0026#34;, \u0026#34;error_code\u0026#34;: -61 } Or, use a list of type names to check\ntype_assert(3.14, [\u0026quot;int\u0026quot;, \u0026quot;float\u0026quot;]);  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/collection-api/type_count/","title":"type_count","tags":[],"description":"","content":"Returns the number of instances of a given Type within a collection.\nThis function does not generate a change.\nFunction type_count(type)\nArguments    Argument Type Description     type str The name of the Type for which the number of instances must be returned.    Return value An int representing the number of occurrences.\n"},{"uri":"https://docs.thingsdb.net/v1/collection-api/type_info/","title":"type_info","tags":[],"description":"","content":"Returns information about a given Type.\n   Value Description     type_id Internal Type Id.   created_at Time Stamp when the Type is created.   modified_at Time Stamp when the Type is last modified or nil if never modified.   name Type\u0026rsquo;s name.   fields Array with arrays containing two strings, the property name and definition.   methods Object with methods where the key is the method name and the value an object containing information about the closure.   relations Object with relations.    Methods information will contain the definition of the attached closure only when the user has at least CHANGE privileges on the collection containing the type.\n The modified_at time stamp is initially set to nil when the Type is created using the new_type(..) function. It will be updated with a time stamp after modifying the Type with either the set_type(..) or the mod_type(..) function. When the Type is created with set_type(..), then the modified_at property will be equal to created_at.\n This function does not generate a change.\nFunction type_info(type)\nArguments    Argument Type Description     type str The name of the Type for which the information about the properties has to be returned.    Return value Returns mpdata about the Type.\nExample  This code shows the output of type_info():\n new_type('Book'); // Just a Type as an example set_type('Book', { title: 'str', year: 'int', ratings: '[int]', get_rating: |this| { this.ratings ? this.ratings.reduce(|a, b| a+b, 0) / this.ratings.len() : nil; }, similar: '{Book}' }); // Create a relation on Book.similar // If a book is similar to a book, it is most likely also true the other // way around. mod_type('Book', 'rel', 'similar', 'similar'); // Return Type info type_info('Book');  Example return value in JSON format\n { \u0026#34;created_at\u0026#34;: 1613736754, \u0026#34;fields\u0026#34;: [ [ \u0026#34;title\u0026#34;, \u0026#34;str\u0026#34; ], [ \u0026#34;year\u0026#34;, \u0026#34;int\u0026#34; ], [ \u0026#34;ratings\u0026#34;, \u0026#34;[int]\u0026#34; ], [ \u0026#34;similar\u0026#34;, \u0026#34;{Book}\u0026#34; ] ], \u0026#34;methods\u0026#34;: { \u0026#34;get_rating\u0026#34;: { \u0026#34;arguments\u0026#34;: [ \u0026#34;this\u0026#34; ], \u0026#34;definition\u0026#34;: \u0026#34;|this| {\\n this.ratings\\n ? this.ratings.reduce(|a, b| a + b, 0) / this.ratings.len()\\n : nil;\\n}\u0026#34;, \u0026#34;doc\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;with_side_effects\u0026#34;: false } }, \u0026#34;modified_at\u0026#34;: 1613736754, \u0026#34;name\u0026#34;: \u0026#34;Book\u0026#34;, \u0026#34;relations\u0026#34;: { \u0026#34;similar\u0026#34;: { \u0026#34;definition\u0026#34;: \u0026#34;{Book}\u0026#34;, \u0026#34;property\u0026#34;: \u0026#34;similar\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Book\u0026#34; } }, \u0026#34;type_id\u0026#34;: 0, \u0026#34;wrap_only\u0026#34;: false } "},{"uri":"https://docs.thingsdb.net/v1/collection-api/types_info/","title":"types_info","tags":[],"description":"","content":"Returns Type information about all the Types within a collection.\nSee the type_info() function documentation for an example of the exposed Type information.\nThis function does not generate a change.\nFunction types_info()\nArguments None\nReturn value List with Type mpdata about all Types in the collection.\n"},{"uri":"https://docs.thingsdb.net/v1/collection-api/wse/","title":"wse","tags":[],"description":"","content":"This function enforces ThingsDB to create a change.\nWhen using a stored closure which requires a change it might not be possible for ThingsDB to detect the change requirement before evaluation the query. In this case it is required to use wse() to enforce a change.\nFunction wse() might both wrap a statement and be called without arguments.\nThis function generates a change.\nFunction wse([statement])\nArguments    Argument Type Description     statement any (optional) Statement or block to wrap.    Return value Return value of the given statement.\nExample  This code shows an example usage for wse():\n // Suppose we have a closure with side-effects .take_license = || .licenses -= 1; // And we have some initial licenses .licenses = 99;  Here we need wse() to enforce a change:\n wse(); // without wse() no change would be created and thus this would raise an error .take_license(); // Return the number of licenses left .licenses;  Return value in JSON format\n 98 "},{"uri":"https://docs.thingsdb.net/v1/node-api/","title":"Node API","tags":[],"description":"","content":"Node API The node scope can be used to query node statistics, counters or make node specific changes.\n"},{"uri":"https://docs.thingsdb.net/v1/node-api/backup_info/","title":"backup_info","tags":[],"description":"","content":"Returns information about a specific scheduled backup.\n   Value Description     created_at Time Stamp when the backup schedule is created.   file_template Backup file template.   files List of successful backup files.   id Backup Id.   max_files Maximum number of backup files to store. The oldest file will be removed once max_files is reached.   next_run Only available when the backup job is scheduled to run. Contains a string with date/time for the next planned schedule, or pending when the backup is scheduled to start.   repeat Only available when the backup will repeat. Contains an integer value representing the repeat time in seconds.   result_code Only available if the backup job has started at least once. Contains the last result code. (0 when successful)   result_message Only available if the backup job has started at least once. Contains the last result message.    This function does not generate a change.\nFunction backup_info(Id)\nArguments    Argument Type Description     Id int Id of the backup schedule to return info for.    Return value Example   // Return backup info of scheduled backup with Id 0: backup_info(0);  Example result in JSON format:\n { \u0026#34;created_at\u0026#34;: 1594902231, \u0026#34;file_template\u0026#34;: \u0026#34;/tmp/backup_{DATE}_{TIME}.tar.gz\u0026#34;, \u0026#34;files\u0026#34;: [ \u0026#34;/tmp/backup_20200714_230014.tar.gz\u0026#34;, \u0026#34;/tmp/backup_20200715_230019.tar.gz\u0026#34;, \u0026#34;/tmp/backup_20200716_230018.tar.gz\u0026#34; ], \u0026#34;id\u0026#34;: 0, \u0026#34;max_files\u0026#34;: 3, \u0026#34;next_run\u0026#34;: \u0026#34;2020-07-17 23:00:00Z\u0026#34;, \u0026#34;repeat\u0026#34;: 86400, \u0026#34;result_code\u0026#34;: 0, \u0026#34;result_message\u0026#34;: \u0026#34;success - 2020-07-16 23:00:18Z\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/node-api/backups_info/","title":"backups_info","tags":[],"description":"","content":"Returns backup schedule information about all backup schedules in the selected node scope.\nSee the backup_info() function documentation for an example of the exposed backup schedule information.\nThis function does not generate a change.\nFunction backups_info()\nArguments None\nReturn value List with backup schedule mpdata about all backup schedules in the selected node scope.\n"},{"uri":"https://docs.thingsdb.net/v1/node-api/counters/","title":"counters","tags":[],"description":"","content":"Returns counters for the ThingsDB node in the selected scope. Counters start all at zero when ThingsDB is started, or when the counters are reset by using reset_counters()'.\nCounters give information about things, queries and changes. If you suspect failed queries, then the counters might provide you with more information.\n   Counter Description     average_change_duration The average change duration in seconds. Change duration is measured from the time a change is created (before the final Id is assigned), until the actual change is committed to ThingsDB.   average_query_duration The average query duration in seconds. Query duration is measured from the time a query (or procedure run) request is unpacked, until the response is created to send back to the client.   changes_committed Changes committed since last the counters reset.   changes_failed Failed changes. This is a critical counter which should be 0.   changes_killed Killed changes took too long for receiving the READY status. These changes may be processed later.   changes_skipped Changes which cannot be committed since a change with a higher id is already processed.   changes_unaligned Number of times a change cannot be pushed to the end of the queue and needs re-ordering.   changes_with_gap Changes which are committed but at least one change-Id was skipped.   garbage_collected Number of things which are garbage collected.   largest_result_size Largest query result size in bytes. Check node_info() to see the maximum allowed query result size.   longest_change_duration Longest change duration, in seconds. Change duration is measured from the moment a change is created, until the change is finished. During AWAY mode, a node will still create changes, but waits before processing changes and thus may result in rather long duration values.   longest_query_duration Longest query duration, in seconds.   queries_from_cache Number of queries which are loaded from cache.   queries_success Number of queries where this node acted as the master node and the query has successful finished.   queries_with_error Number of queries where this node acted as the master node but the query has returned with an error.   quorum_lost Number of times this node did not get a change Id accepted by the quorum of nodes. a change-Id will not be accepted if another node is attempting to assign the same change-Id. This is not an issue since the node will just try another change-Id. It only indicates the number of collisions occurred while trying to assign a change Id.   started_at UNIX time-stamp in seconds when the counters started counting. See reset_counters().   tasks_success Number of successfully processed tasks.   tasks_with_error Number of processed tasks where the task returned with an error.   wasted_cache Number of cached queries which are cleaned from the cache without ever being used.    This function does not generate a change.\nFunction counters()\nArguments None\nReturn value Returns the current counter values.\nExample  This code will return node counter values:\n // Returns the current counters for the node in this scope counters();  Example return value in JSON format\n { \u0026#34;average_change_duration\u0026#34;: 0.032120732, \u0026#34;average_query_duration\u0026#34;: 0.009859586882352942, \u0026#34;changes_committed\u0026#34;: 1, \u0026#34;changes_failed\u0026#34;: 0, \u0026#34;changes_killed\u0026#34;: 0, \u0026#34;changes_skipped\u0026#34;: 0, \u0026#34;changes_unaligned\u0026#34;: 0, \u0026#34;changes_with_gap\u0026#34;: 0, \u0026#34;garbage_collected\u0026#34;: 0, \u0026#34;largest_result_size\u0026#34;: 1247, \u0026#34;longest_change_duration\u0026#34;: 0.032120732, \u0026#34;longest_query_duration\u0026#34;: 0.066440648, \u0026#34;queries_from_cache\u0026#34;: 1, \u0026#34;queries_success\u0026#34;: 17, \u0026#34;queries_with_error\u0026#34;: 0, \u0026#34;quorum_lost\u0026#34;: 0, \u0026#34;started_at\u0026#34;: 1627903017, \u0026#34;tasks_success\u0026#34;: 0, \u0026#34;tasks_with_error\u0026#34;: 0, \u0026#34;wasted_cache\u0026#34;: 0, \u0026#34;watcher_failed\u0026#34;: 0 } "},{"uri":"https://docs.thingsdb.net/v1/node-api/del_backup/","title":"del_backup","tags":[],"description":"","content":"Delete a scheduled backup. If the scheduled backup was pending, the backup job will be cancelled.\nThis function does not generate a change.\nFunction del_backup(Id, [delete_files])\nArguments    Argument Type Description     Id int Backup Id to delete.   delete_files bool (optional) Delete related backup files from disk (or Google Cloud Storage). Default is false.    Return value Returns nil.\n"},{"uri":"https://docs.thingsdb.net/v1/node-api/has_backup/","title":"has_backup","tags":[],"description":"","content":"Determines if a backup exists in ThingsDB.\nThis function does not generate a change.\nFunction has_backup(Id)\nArguments    Argument Type Description     Id int (required) Backup Id to check.    Return value Returns true if a backup with a given Id exists and otherwise false.\nExample  This code shows an example use case of has_backup():\n has_backup(123);  Return value in JSON format\n false "},{"uri":"https://docs.thingsdb.net/v1/node-api/new_backup/","title":"new_backup","tags":[],"description":"","content":"Schedule a new backup.\nBackups are created using tar and gzip. Once a backup is made, the .tar.gz backup file can be used to recover ThingsDB, or can be used to load the ThingsDB into another node. The result value is a backup Id. This Id can be used by backup_info(..) for details about the backup schedule job, or can be used to delete the backup schedule.\nIf Google Cloud Storage is configured then it is possible to create backups directly into Google Cloud Storage. To use Google Cloud Storage simply create the backup with a file_template argument like gs://my_bucket/my_backup_{DATE}{TIME}.tar.gz.\n Restoring from a backup file can be done with either the restore(..) function or by starting the node from a backup file. See the example recovery section below on how to start a node from a backup file.\nBefore v0.9.5 it was not possible to schedule a backup when having just a single node. The underlying reason for this restriction used to be that a single node will not enter away mode which is required for creating a backup. A scheduled backup is now the exception for a single to enter away mode.\n This function does not generate a change.\nFunction new_backup(file_template, [start_ts, [repeat, [max_files]]])\nArguments    Argument Type Description     file_template str Backup schedule file template. See file-template for more information.   start_ts nil/datetime/timeval (optional) Start date/time of the backup. If no start_ts is given, the backup starts as soon as possible.   repeat int (optional) Repeat the backup schedule every repeat seconds. If no repeat value is set, the backup job will run only once.   max_files int (optional) As soon as max_files successful backups are created, the first backup (including the file on disk) will be removed. Default is 7.    File template Backup file templates should end with .tar.gz. They may contain some template variable for creating unique file names.\n   Variable description     {DATE} Current date using format %Y%m%d, for example 20191209.   {TIME} Current time using format %H%M%S, for example 165730.   {CHANGE_ID} Last committed change Id, for example 123456.    An example file-name could be /tmp/backup_{CHANGE_ID}.tar.gz.\nReturn value Returns the backup Id for the scheduled backup.\nExample  Use new_backup to schedule a ThingsDB backup:\n // Create a new backup immediately (because 2000-01-01 is in the past), then at 23:00 and repeat each day new_backup('/var/backup/thingsdb_{DATE}{TIME}.tar.gz', datetime(2000, 1, 1), 24*3600);  Example result in JSON format:\n 0 Example recovery There are two options to restore data from a ThingsDB backup file. One option is to use the restore(..) function and the other option is explained in the steps below:\n# Unpack a backup file in some storage directory. tar -xzf backup.tar.gz # Start ThingsDB with the current path as storage path THINGSDB_STORAGE_PATH=./ thingsdb --forget-nodes  Confirm with yes so we can start with a single node\n Warning: all nodes information will be lost!! Type `yes` + ENTER if you really want to continue: yes Done!\n"},{"uri":"https://docs.thingsdb.net/v1/node-api/node_info/","title":"node_info","tags":[],"description":"","content":"Returns information about the node in the selected scope. See scopes for more information on how to target a specific node scope.\nLike all other info(..) functions, this function returns mpdata which can be loaded to extract one or more properties. See example 2.\n   Value Description     architecture Machine architecture of this node, for example amd64.   archive_files Number of archive files. May decrease after a full store during away mode.   archived_in_memory Number of changes which are archived in memory.   cache_expiration_time Time in seconds when a query expires in cache. Cleanup takes place when in away mode.   cached_names Number of names cached in memory.   cached_queries Number of queries the node has in stored in cache.   changes_in_queue Changes which are pending in the queue.   client_port Listening for client TCP socket connections on this port.   connected_clients Number of connected clients to the node.   db_stored_change_id Last stored change Id in full database store.   global_committed_change_id Lowest known committed change Id by all nodes.   global_stored_change_id Lowest known stored change Id by all nodes.   http_api_port Listening to this HTTP port for API calls.   http_status_port Listening to this HTTP port for status, readiness and liveness requests.   ip_support Enabled IP support. May be IPv4/IPv6 or both.   libcleri_version Cleri language parser library version.   libpcre2_version PCRE regular expression library version.   libuv_version UV asynchronous library version.   local_committed_change_id Last committed change Id on the node.   local_stored_change_id Last stored change Id on disk. Store takes place when in away mode.   log_level Current log level for the node. May be changed at runtime using set_log_level(..).   modules_path Path where the modules are stored.   msgpack_version MessagePack data protocol library version.   next_free_id Next free Id (used for things, tasks, rooms etc.).   node_id The id which is assigned to the node.   node_name This node will publish itself to other nodes using the node name. This can be an IP address, hostname, or a fully qualified domain name (FQDN) of the node.   node_port Listening for node TCP socket connections on this port.   platform Machine platform of this node, for example linux.   python_interpreter Displays the Python interpreter which the node is using to run Python modules.   result_size_limit Result size limit is checked when packing properties for a thing. If, at the check moment, the packed data size exceeds the limit, packing stops and an RESULT_TOO_LARGE error will be returned. This limit is set in bytes and is used to prevent a huge amount of data, typically when a high deep value is used. See the configuration page to configure this limit.   scheduled_backups Number of backups scheduled on this node. Only repeated backups or backups which are planned in the future are included.   status Current status of the ThingsDB node.   storage_path Path used for storing ThingsDB data.   syntax_version Language or syntax version. A new version of ThingsDB might also have a new language version.   threshold_query_cache Queries with a length equal or larger than this value will be cached by the node. See the configuration page to configure this threshold.   uptime Uptime of the node in seconds.   version Version of ThingsDB.   yajl_version JSON parser library version.   zone Zone number to which the node is assigned. May be changed in the ThingsDB configuration file.    This function does not generate a change.\nFunction node_info()\nArguments None\nReturn value Returns mpdata about the node. Which node is defined by the scope.\nExample 1  This code returns info for the connected node:\n node_info();  Example return value in JSON format\n { \u0026#34;architecture\u0026#34;: \u0026#34;amd64\u0026#34;, \u0026#34;archive_files\u0026#34;: 1, \u0026#34;archived_in_memory\u0026#34;: 0, \u0026#34;cache_expiration_time\u0026#34;: 900, \u0026#34;cached_names\u0026#34;: 20, \u0026#34;cached_queries\u0026#34;: 7, \u0026#34;changes_in_queue\u0026#34;: 0, \u0026#34;client_port\u0026#34;: 9200, \u0026#34;connected_clients\u0026#34;: 1, \u0026#34;db_stored_change_id\u0026#34;: 1, \u0026#34;global_committed_change_id\u0026#34;: 2, \u0026#34;global_stored_change_id\u0026#34;: 1, \u0026#34;http_api_port\u0026#34;: 9210, \u0026#34;http_status_port\u0026#34;: 8080, \u0026#34;ip_support\u0026#34;: \u0026#34;ALL\u0026#34;, \u0026#34;libcleri_version\u0026#34;: \u0026#34;0.12.2\u0026#34;, \u0026#34;libpcre2_version\u0026#34;: \u0026#34;10.34\u0026#34;, \u0026#34;libuv_version\u0026#34;: \u0026#34;1.34.2\u0026#34;, \u0026#34;local_committed_change_id\u0026#34;: 2, \u0026#34;local_stored_change_id\u0026#34;: 1, \u0026#34;log_level\u0026#34;: \u0026#34;WARNING\u0026#34;, \u0026#34;modules_path\u0026#34;: \u0026#34;/usr/lib/thingsdb-modules\u0026#34;, \u0026#34;msgpack_version\u0026#34;: \u0026#34;3.2.1\u0026#34;, \u0026#34;next_change_id\u0026#34;: 3, \u0026#34;next_free_id\u0026#34;: 3, \u0026#34;node_id\u0026#34;: 0, \u0026#34;node_name\u0026#34;: \u0026#34;node0.local\u0026#34;, \u0026#34;node_port\u0026#34;: 9221, \u0026#34;platform\u0026#34;: \u0026#34;linux\u0026#34;, \u0026#34;python_interpreter\u0026#34;: \u0026#34;/usr/bin/python\u0026#34;, \u0026#34;result_size_limit\u0026#34;: 20971520, \u0026#34;scheduled_backups\u0026#34;: 0, \u0026#34;status\u0026#34;: \u0026#34;READY\u0026#34;, \u0026#34;storage_path\u0026#34;: \u0026#34;/var/lib/thingsdb/\u0026#34;, \u0026#34;syntax_version\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;threshold_query_cache\u0026#34;: 160, \u0026#34;uptime\u0026#34;: 2633.51272359, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;yajl_version\u0026#34;: \u0026#34;2.1.0\u0026#34;, \u0026#34;zone\u0026#34;: 0 } Example 2  This code returns just the version of ThingsDB:\n node_info().load().version;  Example return value in JSON format\n \u0026#34;0.10.13\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/node-api/nodes_info/","title":"nodes_info","tags":[],"description":"","content":"Returns information about all ThingsDB nodes.\n   Value Description     node_name A node will publish itself to other nodes using the node name. This can be for example an IP address, hostname , or a fully qualified domain name (FQDN) of the node.   committed_change_id Last known committed change Id on the node.   next_free_id Next free Id (Id\u0026rsquo;s used for things, tasks, users, rooms etc.) on the node.   node_id Id which is assigned to the node.   port TCP port on which the node is listening for node connections.   status Current status of the node.   stored_change_id Last known stored change Id on the node.   syntax_version Language or syntax version which is running on the node.   zone Zone number to which the node is assigned.    This function does not generate a change.\nFunction nodes_info()\nArguments None\nReturn value List with node mpdata about all nodes in ThingsDB.\nExample  This code returns info about all ThingsDB nodes:\n nodes_info();  Example return value in JSON format\n [ { \u0026#34;address\u0026#34;: \u0026#34;node0.local\u0026#34;, \u0026#34;committed_change_id\u0026#34;: 4, \u0026#34;next_free_id\u0026#34;: 5, \u0026#34;node_id\u0026#34;: 0, \u0026#34;port\u0026#34;: 9220, \u0026#34;status\u0026#34;: \u0026#34;READY\u0026#34;, \u0026#34;stored_change_id\u0026#34;: 4, \u0026#34;stream\u0026#34;: null, \u0026#34;syntax_version\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;zone\u0026#34;: 0 }, { \u0026#34;address\u0026#34;: \u0026#34;node1.local\u0026#34;, \u0026#34;committed_change_id\u0026#34;: 4, \u0026#34;next_free_id\u0026#34;: 5, \u0026#34;node_id\u0026#34;: 1, \u0026#34;port\u0026#34;: 9220, \u0026#34;status\u0026#34;: \u0026#34;READY\u0026#34;, \u0026#34;stored_change_id\u0026#34;: 4, \u0026#34;stream\u0026#34;: \u0026#34;\u0026lt;node-out:1\u0026gt; 192.168.0.10:9220\u0026#34;, \u0026#34;syntax_version\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;zone\u0026#34;: 0 } ] "},{"uri":"https://docs.thingsdb.net/v1/node-api/reset_counters/","title":"reset_counters","tags":[],"description":"","content":"Resets the counters for the ThingsDB node you are connected too. Other nodes are not affected. This will set the started_at counter value to the current UNIX time-stamp in seconds and all other counters to 0 (zero).\nThis function does not generate a change.\nFunction reset_counters()\nArguments None\nReturn value Returns nil.\nExample  This code will reset the counters on a node:\n // resets counters on the node in this scope reset_counters();  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/node-api/restart_module/","title":"restart_module","tags":[],"description":"","content":"Restarts a given module on the select node scope.\nIf you want to restart the module on all nodes, you can use the deploy_module(name, nil) function with nil as second argument.\n This function does not generate a change.\nFunction restart_module(name)\nArguments    Argument Type Description     name str (required) Module to restart.    Return value Returns nil.\nExample  This code will reset the counters on a node:\n restart_module('DEMO');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/node-api/set_log_level/","title":"set_log_level","tags":[],"description":"","content":"Change the log level for the node in the selected scope.\nThingsDB will then log all levels greater than or equal to the specified level. For example, a default log_level of warning will log warning, error and critical messages.\nThis function does not generate a change.\nLog Levels    Name Int Description     DEBUG 0 Display debug messages (can result in large amount of logging).   INFO 1 Informational messages.   WARNING 2 Warning messages (default log level).   ERROR 3 Error messages, can occur if for example a node is not available.   CRITICAL 4 Critical messages, should never occur unless something is really wrong.    Function set_log_level(log_level)\nArguments    Argument Type Description     log_level int Log level to set on the node.    Return value Returns nil.\nExample  Change the log level on the node in the selected scope to debug:\n // Enable `debug` logging on the node in the selected scope set_log_level(DEBUG);  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/node-api/shutdown/","title":"shutdown","tags":[],"description":"","content":"Shutdown the node in the selected scope. This is a clean shutdown, allowing all other nodes (and clients) to disconnect.\nAt least CHANGE privileges on the @node scope are required to shutdown a node.\n This function does not generate a change.\nFunction shutdown()\nArguments None.\nReturn value Returns nil.\n"},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/","title":"ThingsDB API","tags":[],"description":"","content":"ThingsDB API ThingsDB can be managed with simple query commands. This allows you to manage collections, users, access and nodes.\n"},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/collection_info/","title":"collection_info","tags":[],"description":"","content":"Returns information about a specific collection.\nThis function requires QUERY privileges on the requested collection, or CHANGE privileges on the @thingsdb scope.\nThis function does not generate a change.\nFunction collection_info(collection)\nArguments    Argument Type Description     collection str/int (required) Name or Id of the collection    Return value Returns mpdata about the collection.\nExample  Returns information about collection stuff:\n collection_info('stuff');  Example return value in JSON format\n { \u0026#34;collection_id\u0026#34;: 782, \u0026#34;created_at\u0026#34;: 1579175900, \u0026#34;name\u0026#34;: \u0026#34;stuff\u0026#34;, \u0026#34;things\u0026#34;: 61352, \u0026#34;time_zone\u0026#34;: \u0026#34;UTC\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/collections_info/","title":"collections_info","tags":[],"description":"","content":"Returns collection information about all collections in ThingsDB.\nSee the collection_info() function documentation for an example of the exposed collection information.\nIf the user has no CHANGE permissions on the @thingsdb scope, then only the collections where the user has at least QUERY privileges are included in the result.\n This function does not generate a change.\nFunction collections_info()\nArguments None\nReturn value List with collection mpdata about all collections in ThingsDB.\n"},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/del_collection/","title":"del_collection","tags":[],"description":"","content":"Delete a collection.\nThis function generates a change.\nFunction del_collection(name)\nArguments    Argument Type Description     name str (required) Name of the collection to delete.    Return value Returns nil when successful. A lookup_err() is raised if the collection does not exist.\nExample  This code will delete collection stuff:\n // Delete collection `stuff` del_collection('stuff'); "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/del_expired/","title":"del_expired","tags":[],"description":"","content":"Delete all expired tokens.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function generates a change.\nFunction del_expired()\nArguments None\nReturn value Returns nil.\nExample  This code will delete all expired tokens:\n // Delete all expired tokens del_expired(); "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/del_module/","title":"del_module","tags":[],"description":"","content":"Delete a module. A SIGTERM signal will be send to the process for the module which might cancel running futures.\nThis function generates a change.\nFunction del_module(name)\nArguments    Argument Type Description     name str (required) Name of the module to delete.    Return value Returns nil when successful.\nExample  This code will delete module DEMO:\n // Delete module `DEMO` del_module('DEMO'); "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/del_node/","title":"del_node","tags":[],"description":"","content":"Delete a node from ThingsDB.\nBefore deleting a node, the node must be offline. As long is the node is active, you are not allowed to delete the node. See shutdown for shutting down a node by using a query.\n This function generates a change.\nFunction del_node(node_id)\nArguments    Argument Type Description     node_id int (required) Id of the node to delete.    Return value Returns nil when successful. A lookup_err() is raised if the node Id does not exist.\n"},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/del_token/","title":"del_token","tags":[],"description":"","content":"Delete a token.\nThis function requires GRANT privileges on the @thingsdb scope unless the given token belongs to the logged on user. In the latter case, only CHANGE privileges are required.\n This function generates a change.\nFunction del_token(key)\nArguments    Argument Type Description     key str (required) Token key to delete.    Return value Returns nil when successful. A lookup_err() is raised if the token is not found.\nExample  This code will delete a token:\n // Delete a token del_token('XXXXXXXXXXXXXXXXXXXXXX'); "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/del_user/","title":"del_user","tags":[],"description":"","content":"Delete a user. It is not possible to delete your own user account and a bad_data_err() will be raised in case you try to. Any tokens associated with the user will also be deleted.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function generates a change.\nFunction del_user(username)\nArguments    Argument Type Description     username str (required) Username of the user to delete.    Return value Returns nil when successful. A lookup_err() is raised if the user does not exist.\nExample  This code will delete user test:\n // Delete user `test` del_user('test'); "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/deploy_module/","title":"deploy_module","tags":[],"description":"","content":"Deploy a module on all nodes. The module must be configured first, using the new_module() function. This function is used to write the module data (or plain python code) to the module. After deploying the code, the module will be restarted on every node.\nBefore deploying a module, it is strongly recommended to use a development environment before deploying the module into production.\n This function generates a change.\nFunction deploy_module(name, data/new source)\nArguments    Argument Type Description     name str (required) Name of the module to deploy the new code for.   data str/bytes/nil (required) Only for modules with a file based source. Data for the module. When nil, no data will be overwritten but the module will be restarted on all nodes. This might be useful if you want to force a module restart on all nodes. Type str is only allowed for Python modules.   new source str Only for modules with a repository based source. New source for the module. The module will stop, check for a new version using the new source, and next re-start the module.    Return value Returns nil. You might want to use module_info(..) to check if the module is successfully running. If not, the node logging might give you additional information about the cause of the error.\nExample  Create a new python module ECHO and deploy the code using deploy_module(..):\n // Create a new (python) module new_module('ECHO', 'echo.py'); // Deploy the module code deploy_module('ECHO', \u0026quot;from timod import start_module, TiHandler, LookupError class Handler(TiHandler): async def on_config(self, cfg): pass # no config required async def on_request(self, req): if 'message' not in req: raise LookupError('missing `message` in request') return req['message'] if __name__ == '__main__': start_module('echo', Handler()) \u0026quot;);  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/grant/","title":"grant","tags":[],"description":"","content":"Grant, collection or general, privileges to a user. Access to a user is provided by setting a bit mask to either the @node, @thingsdb or a @collection scope.\nTo use this function, at least CHANGE privileges on the @thingsdb scope and GRANT privileges on the target scope are required.\nIt is not possible to set privileges on a specific node scope. Therefore scope @node will apply to all nodes in ThingsDB.\n The following pre-defined masks are available:\n   Mask Description     QUERY (1) Gives read access.   CHANGE (2) Gives modify access.   GRANT (4) Gives modify and grant (and revoke) privileges.   JOIN (8) Gives join (and leave) privileges.   RUN (16) Gives run procedures access.   FULL (31) A mask for full privileges.    It is not possible to have GRANT privileges without also having CHANGE privileges. However, ThingsDB automatically applies the required privileges so when setting for example GRANT privileges, ThingsDB makes sure that the user also gets CHANGE privileges.\n This function generates a change.\nFunction grant(target, user, mask)\nArguments    Argument Type Description     target int/raw Can be either the @node, @thingsdb, or a @collection scope.   user str User to grant privileges to.   mask int Bit-mask for setting privileges.    Return value Returns nil when successful. A lookup_err() is raised if the user or target does not exist.\nExample  Grant query and join privileges to user iris to collection stuff:\n new_user('iris'); new_token('iris'); // Assign QUERY and JOIN privileges on collection `stuff` to user `iris` grant('@:stuff', 'iris', QUERY|JOIN);  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/has_collection/","title":"has_collection","tags":[],"description":"","content":"Determines if a collection exists in ThingsDB.\nThis function does not generate a change.\nFunction has_collection(collection)\nArguments    Argument Type Description     collection str/int (required) Collection name or Id to check.    Return value Returns true if the collection exists and otherwise false.\nExample  This code shows an example use case of has_collection():\n has_collection('stuff');  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/has_module/","title":"has_module","tags":[],"description":"","content":"Determines if a module exists in ThingsDB. The scope restriction of the module has no impact on the result of this function.\nThis function does not generate a change.\nFunction has_module(name)\nArguments    Argument Type Description     name str (required) Module to check.    Return value Returns true if the module exists and otherwise false.\nExample  This code shows an example use case of has_module():\n has_module('DEMO5');  Return value in JSON format\n false "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/has_node/","title":"has_node","tags":[],"description":"","content":"Determines if a node exists in ThingsDB.\nThis function does not generate a change.\nFunction has_node(id)\nArguments    Argument Type Description     id int (required) Node Id to check.    Return value Returns true if a node with a given Id exists and otherwise false.\nExample  This code shows an example use case of has_node():\n has_node(0);  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/has_token/","title":"has_token","tags":[],"description":"","content":"Determines if a token exists in ThingsDB.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function does not generate a change.\nFunction has_token(key)\nArguments    Argument Type Description     key str (required) Token key to check.    Return value Returns true if the token exists and otherwise false.\nExample  This code shows an example use case of has_token():\n has_token('XXXXXXXXXXXXXXXXXXXXXX');  Return value in JSON format\n false "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/has_user/","title":"has_user","tags":[],"description":"","content":"Determines if a user exists in ThingsDB.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function does not generate a change.\nFunction has_user(username)\nArguments    Argument Type Description     username str (required) User to check.    Return value Returns true if the user exists and otherwise false.\nExample  This code shows an example use case of has_user():\n has_user('admin');  Return value in JSON format\n true "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/module_info/","title":"module_info","tags":[],"description":"","content":"Returns information about a specific module.\n   Value Description     conf Configuration for the module. (Only visible when the user has CHANGE privileges in the @thingsdb scope)   created_at Time Stamp when the module was created.   file Module file name.   name Name of the module.   restarts Number of time the module is restarted. Manual restarts are excluded and will reset the counter to zero. (Only visible in a @node scope)   scope The module can only be used in this scope. When the scope is nil, the module can be used in any scope.   status Status of the scope. The status must be running before the module can be used.   tasks The number of running tasks (futures) for this module on the current node. When going into away mode, open tasks might be cancelled. (Only visible in a @node scope)    This function does not generate a change.\nFunction module_info(name)\nArguments    Argument Type Description     name str/int (required) Name of the module    Return value Returns mpdata about the module.\nExample  Returns information about module DEMO:\n module_info('DEMO');  Example return value in JSON format\n { \u0026#34;conf\u0026#34;: null, \u0026#34;created_at\u0026#34;: 1579175900, \u0026#34;file\u0026#34;: \u0026#34;/usr/lib/thingsdb/modules/demo\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;DEMO\u0026#34;, \u0026#34;restarts\u0026#34;: 0, \u0026#34;scope\u0026#34;: null, \u0026#34;status\u0026#34;: \u0026#34;running\u0026#34;, \u0026#34;tasks\u0026#34;: 0, } "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/modules_info/","title":"modules_info","tags":[],"description":"","content":"Returns module information about all modules in ThingsDB.\nSee the module_info() function documentation for an example of the exposed module information.\nThis function does not generate a change.\nFunction modules_info()\nArguments None\nReturn value List with modules mpdata about all modules in ThingsDB.\n"},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/new_collection/","title":"new_collection","tags":[],"description":"","content":"Create a new collection.\nThis function generates a change.\nFunction new_collection(name)\nArguments    Argument Type Description     name str (required) Name of the new collection.    The user who has created the collection will automatically receive full access rights to the new collection. Use grant to give other users access to the collection.\n Return value Returns the new collection id if successful. A lookup_err() is raised if the collection already exists.\nExample  This code will create a collection \u0026ldquo;awesome_things\u0026rdquo;:\n // Creates a new collection new_collection('awesome_things');  Example return value in JSON format (the new collection id)\n 31415 "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/new_module/","title":"new_module","tags":[],"description":"","content":"Create (and configure) a new module for ThingsDB.\nAfter a module is created, a future() is required to use the new module.\nThingsDB has special support for Python modules which will be activated if you module file ends with .py. In this case the Python interpreter will be used to start the module.\nBy default a module can be used in all scopes. It is possible however, to restrict the usage by using set_module_scope(..).\n This function generates a change.\nFunction new_module(name, source, [configuration])\nArguments    Argument Type Description     name str (required) Name of the new module.   source str (required) Source of the module. This may be a filename or GitHub repository (see sources).   configuration any (optional) Configuration for the module. The configuration will be packed using a fixed deep value of two (2). If omitted (or nil), no configuration will be used for the module.    Sources    Source Description     Filename The same file might be configured multiple times. The file must be path relative to the modules path). If the file ends with .py, the Python interpreter will be used to start the module.   GitHub A GitHub repository like github.com/owner/repo[:token][@tag/branch], for example: github.com/thingsdb/module-py-demo@v0.1.0. If no tag or branch is given, the default branch will be used. A personal access token may be used for private repositories.    Return value Returns nil. You might want to use module_info(..) to check if the module is successfully running.\nExample  Create a new module DEMO1:\n new_module('demo', 'github.com/thingsdb/module-py-demo');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/new_node/","title":"new_node","tags":[],"description":"","content":"Adds a new node to ThingsDB. Nodes are used for scaling and high availability.\nBefore using this command, make sure another node is started and waiting for a join. This can be done by starting thingsdb with the --secret argument, for example:\nthingsdb --secret \u0026#34;my-one-time-secret\u0026#34; Next, you will see something like this:\nWaiting for an invite from a node to join ThingsDB... You can use the following query to add this node: new_node(\u0026#39;my-one-time-secret\u0026#39;, \u0026#39;node.local\u0026#39;, 9220); Now you can use the new_node(..) function to add the node to ThingsDB.\nThis function generates a change.\nFunction new_node(secret, name [, port])\nArguments    Argument Type Description     secret str (required) Secret used to initially connect to the new node.   name str (required) Node name (host-name or IP address) of the new node.   port int (optional) Node port (listen_node_port), an integer between 0 an 65535, default 9220.    Best practice is to set the argument \u0026ldquo;name\u0026rdquo; to the same name as specified by the environment variable THINGSDB_NODE_NAME or the node_name found in the configuration file (view the chapter on configuration).\n Return value Returns the new node id if successful.\nExample  Add a new node to ThingsDB:\n // ThingsDB must be started on node2 using the `--secret ...` argument new_node('my-one-time-secret', 'node2.local');  Example return value in JSON format (the new node id)\n 1 "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/new_token/","title":"new_token","tags":[],"description":"","content":"Adds a new token for a given user. An optional expiration time may be given; after this time the token cannot be used anymore. Use del_expired to cleanup expired tokens. The expiration time may be given as a datetime or timeval type.\nExpiration dates in the past are not allowed an will raise a bad_data_err() error.\nIt is also possible to set a description for the token which can be used to identify the token. If you only want to set a description, but no expiration time, then you can use nil as a second argument. For example: new_token('my_user', nil, 'some nice description');\nThere can be no more than 128 tokens assigned to a single user. A max_quota_err() is raised if this limit is reached. Existing tokens can be removed with del_token and to view the current tokens you can use the user_info(..) (or users_info()) function.\nThis function requires GRANT privileges on the @thingsdb scope when a username other then the logged in user is given as argument. For the currently logged in user, CHANGE privileges on the @thingsdb scope are sufficient.\n This function generates a change.\nFunction new_token(username, [, expiration_time] [, description])\nArguments    Argument Type Description     username str (required) Name of the user.   expiration_time nil/int/float/raw (optional) Expiration date of the token.   description str (optional) Token description.    Return value Returns the new token key.\nExample  Create a new token for user admin:\n // A new token with an expiration date in one week and description new_token('admin', datetime().move('weeks', 1), 'token for one week');  Example return value in JSON format (the token key)\n \u0026#34;8Ay0ngISFa9je3o/MMu24U\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/new_user/","title":"new_user","tags":[],"description":"","content":"Creates a new user to ThingsDB. The new user is created without a password, token and access privileges. You probably want to set a password or add a new token, and assign some privileges using grant(\u0026hellip;).\nThis function requires GRANT privileges on the @thingsdb scope.\n This function generates a change.\nFunction new_user(user)\nArguments    Argument Type Description     user str (required) Username, between 1 and 128 graphical characters.    Return value Returns the new user id if successful. A lookup_err() is raised if the user already exists.\nExample  Create a new user iris:\n new_user('iris');  Example return value in JSON format (the new user id)\n 19 "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/refresh_module/","title":"refresh_module","tags":[],"description":"","content":"Refresh module first stops the module (if running), next if will check for an update and performs the update if required. When finished, it will start the module again.\nThis function generates a change.\nFunction refresh_module(name)\nArguments    Argument Type Description     name str (required) Name of the module to refresh.    Return value Returns nil. You might want to use module_info(..) to check if the module is successfully running. If not, the node logging might give you additional information about the cause of the error.\nExample  Refresh module demo:\n refresh_module('demo');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/rename_collection/","title":"rename_collection","tags":[],"description":"","content":"Rename a collection.\nThis function generates a change.\nFunction rename_collection(current_name, new_name)\nArguments    Argument Type Description     current_name str (required) Current collection name.   new_name str (required) New name for the collection.    Return value Returns nil when successful.\n"},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/rename_module/","title":"rename_module","tags":[],"description":"","content":"Rename a module.\nThis function generates a change.\nFunction rename_module(current_name, new_name)\nArguments    Argument Type Description     current_name str (required) Current module name.   new_name str (required) New name for the module.    Return value Returns nil when successful.\n"},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/rename_user/","title":"rename_user","tags":[],"description":"","content":"Rename a user.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function generates a change.\nFunction rename_user(current_name, new_name)\nArguments    Argument Type Description     current_name str (required) Current user name.   new_name str (required) New name for the user.    Return value Returns nil when successful.\n"},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/restore/","title":"restore","tags":[],"description":"","content":"Restore from a backup file created with the new_backup function.\nBefore using this function the following list of requirements must be must be fulfilled:\n The user performing the restore must have FULL privileges on the@thingsdb scope. No collections may exists. Use collections_info() and del_collection(..) to remove existing collections. All nodes must be online and ready. If this is not the case, then either remove the node or wait for the node to become ready. Use nodes_info() to check for the status of the nodes. When having multiple nodes, all committed changes must be stored as well. Function nodes_info() shows both the committed_change_id and stored_change_id for all nodes. This is not a requirement when using a single node.  After running this function, all existing users and tokens will be overwritten, including the user performing the restore unless the take_access argument will be set to true. In both cases it is required to re-authenticate to ThingsDB after the restore is completed.\n This function generates a change.\nFunction restore(filename, [take_access])\nArguments    Argument Type Description     filename str Tar file containing the backup, usually a file ending with .tar.gz.   take_access bool (optional) When true, the users and tokens will not be restored, but instead the user performing the restore will be granted full access to all scopes. Default is false.    Return value Returns nil when successful.\nExample  Restore from a backup file\n restore('/tmp/backup.tar.gz');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/revoke/","title":"revoke","tags":[],"description":"","content":"Revoke, collection or general, privileges from a user. See grant for more information on how access privileges can be set for a user.\nTo use this function, at least CHANGE privileges on the @thingsdb scope and GRANT privileges on the target scope are required.\nThis function generates a change.\nFunction revoke(target, user, mask)\nArguments    Argument Type Description     target int/raw Can be either the @node, @thingsdb, or a @collection scope.   user str User to revoke privileges from.   mask int Bit-mask for revoking privileges.    Return value Returns nil when successful. A lookup_err() is raised if the user or target does not exist.\nExample  Revoke all privileges for user iris on collection stuff:\n revoke('@:stuff', 'iris', FULL);  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/set_module_conf/","title":"set_module_conf","tags":[],"description":"","content":"Change the module configuration. This will (re-send) the module configuration to the module. If the module was not started, ThingsDB will also auto-load the module and send the configuration. Any Value is accepted as config but value nil will not be considered as a configuration and thus will not be send to the module.\nThis function generates a change.\nFunction set_module_conf(name, configuration)\nArguments    Argument Type Description     name str (required) Name of the module.   configuration any/nil (required) New configuration for the module. The configuration will be packed using a fixed deep value of two (2). Value nil is an exception and can be used if the module does not require any configuration.    Return value Returns nil if successful.\nExample  This code changes the module configuration for module DEMO:\n set_module_conf('DEMO', { user: 'admin', password: 'pass' });  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/set_module_scope/","title":"set_module_scope","tags":[],"description":"","content":"Modules can be restricted for usage in a single scope. This can be a @collection:.. scope, but also a @node or @thingsdb scope. This function can be used to change the module scope. When the scope is set to nil, the module can be used in any scope.\nThis function generates a change.\nFunction set_module_scope(name, scope)\nArguments    Argument Type Description     name str (required) Name of the module.   scope str/nil (required)     Return value Returns nil if successful.\nExample  This code changes the module configuration for module DEMO:\n // Restrict module usage to collection `stuff` set_module_scope('DEMO', '//stuff');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/set_password/","title":"set_password","tags":[],"description":"","content":"Change a user\u0026rsquo;s password. This function can also be used to remove an existing password by using nil as the new password.\nPasswords must contain 1 to 128 printable characters.\nThis function requires GRANT privileges on the @thingsdb scope when a username other then the logged in user is given as argument. For the currently logged in user, CHANGE privileges on the @thingsdb scope are sufficient.\n This function generates a change.\nFunction set_password(username, new_password)\nArguments    Argument Type Description     username str (required) Name of the user   new_password nil/str (required) New password or nil    Return value Returns nil if successful. A lookup_err() is returned if the user does not exist and bad_data_err() if the new password is not compliant.\nExample  This code changes the password for user admin:\n // Change the password for user `admin` set_password('admin', 'my_secret_password');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/set_time_zone/","title":"set_time_zone","tags":[],"description":"","content":"By default each collection will be created with time zone UTC. This function can be used to change the time zone for a collection. If changed, the functions datetime(..) and timeval(..) will use the collections time zone unless specified otherwise. See time_zones_info() for a list of all available timezones.\nUse collection_info(..) to view the current time zone for a collection.\nThis function generates a change.\nFunction set_time_zone(collection, zone)\nArguments    Argument Type Description     collection str/int (required) Collection name or Id to change the time zone for.   zone str (required) New time zone.    Return value Returns nil if successful.\nExample  This code changes the password for user admin:\n // Change the time zone to Europe/Amsterdam set_time_zone('stuff', 'Europe/Amsterdam');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/user_info/","title":"user_info","tags":[],"description":"","content":"Returns information about a user. If no argument is given, this function will return information about the currently logged in user.\nThis function requires GRANT privileges on the @thingsdb scope when a username other then the logged in user is given as argument. For the currently logged in user, QUERY privileges on the @thingsdb scope are sufficient.\n This function does not generate a change.\nFunction user_info([username])\nArguments    Argument Type Description     username str (optional) Name of the user    Return value Returns mpdata about the user.\nExample  This code returns info for the authenticated user:\n // Without a `username`, info about the currently logged in user is returned user_info();  Example output in JSON format:\n { \u0026#34;access\u0026#34;: [ { \u0026#34;privileges\u0026#34;: \u0026#34;FULL\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;@node\u0026#34; }, { \u0026#34;privileges\u0026#34;: \u0026#34;FULL\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;@thingsdb\u0026#34; }, { \u0026#34;privileges\u0026#34;: \u0026#34;FULL\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;@collection:stuff\u0026#34; } ], \u0026#34;created_at\u0026#34;: 1573981254, \u0026#34;has_password\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;tokens\u0026#34;: [ { \u0026#34;created_on\u0026#34;: \u0026#34;2019-11-17T09:25:36Z\u0026#34;, \u0026#34;expiration_time\u0026#34;: \u0026#34;2020-11-17T09:25:36Z\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;QpVmHOsfQaKKpjpOkW0SUt\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;OK\u0026#34; } ], \u0026#34;user_id\u0026#34;: 1 } "},{"uri":"https://docs.thingsdb.net/v1/thingsdb-api/users_info/","title":"users_info","tags":[],"description":"","content":"Returns user information about all users in ThingsDB.\nSee the user_info() function documentation for an example of the exposed user information.\nThis function requires GRANT privileges on the @thingdb scope since it exposes user access and token information.\nThis function does not generate a change.\nFunction users_info()\nArguments None\nReturn value List with user mpdata about all users in ThingsDB.\n"},{"uri":"https://docs.thingsdb.net/v1/procedures-api/","title":"Procedures API","tags":[],"description":"","content":"Procedures API A procedure in ThingsDB is a named closure that is attached to a scope and available to use in an API call.\nProcedures can be used in the @thingsdb scope and in @collection scopes.\nThe same procedure name can be used in different scopes but must be unique within a scope.\nRelated functions    Function description      del_procedure Delete an existing procedure.    has_procedure Check if a procedure exists.    new_procedure Create a new procedure.    procedure_doc Get the docstring of a procedure.    procedure_info Show information about a procedure.    procedures_info Show information about all procedures in the current scope.    rename_procedure Rename an existing procedure.    run Run a procedure.     Examples Below is an example where we make a procedure in the @thingsdb scope to help us create a user in ThingsDB with some pre-defined access rights and a token for one day usage.\nnew_procedure('create_user', |name| { \u0026quot;Creates a new user with a token and some basic access rights.\u0026quot;; // Create the user new_user(name); // Create a `token` for one day token = new_token(name, datetime().move('days', 1)); // Give join, query and run privileges on collection `stuff` grant('@:stuff', name, JOIN|QUERY|RUN); // Return the token token; }); Once a procedure is created, it can be easily used in a query. You may just call the procedure as if it is a function, or you can use the run function in one of the native ThingsDB clients available (see the example below) or by performing a RUN request using the HTTP API (see connect section). For a more low-level example view the socket run example.\n Here is a complete working example where we use the Python client to call our procedure.\n import asyncio from thingsdb.client import Client client = Client() loop = asyncio.get_event_loop() async def create_user(name): # first we need to connect, in this example we assume ThingsDB is running # on localhost and the default admin user can be used await client.connect(\u0026#39;localhost\u0026#39;) await client.authenticate(\u0026#39;admin\u0026#39;, \u0026#39;pass\u0026#39;) # this is the code where we call our procedure token = await client.run(\u0026#39;create_user\u0026#39;, name, scope=\u0026#39;@thingsdb\u0026#39;) # run the example loop.run_until_complete(create_user(\u0026#39;iris\u0026#39;)) # the will close the client in a nice way client.close() loop.run_until_complete(client.wait_closed()) It is also possible to use the procedure within a query or from another procedure. This can be done with the run function.\n Here is an example where we use the create_user procedure in a query.\n // Our procedure requires a change so we need to use `wse` token = wse(create_user('cato')); // return the token token;  Example output in JSON format\n \u0026#34;Sj3WQ3dkm8Hl8B/iFoH9Cz\u0026#34;  Prior to version v0.10.13 it was not possible to call a procedure just by it\u0026rsquo;s name. Instead the run(..) function was required. Thus, the above example would need to be written as: token = wse(run('create_user', 'cato'));.\n "},{"uri":"https://docs.thingsdb.net/v1/procedures-api/del_procedure/","title":"del_procedure","tags":[],"description":"","content":"Delete a procedure.\nThis function generates a change.\nFunction del_procedure(procedure)\nArguments    Argument Type Description     procedure str (required) Procedure name to delete.    Return value Returns nil when successful. A lookup_err() is raised if the procedure does not exist.\nExample  This code will delete procedure add_one:\n new_procedure('add_one', |x| { \u0026quot;Adds one to a given value\u0026quot;; x + 1; }); // Delete procedure `add_one` del_procedure('add_one');  Return value in JSON format\n null "},{"uri":"https://docs.thingsdb.net/v1/procedures-api/has_procedure/","title":"has_procedure","tags":[],"description":"","content":"Determines if a procedure exists in the current scope.\nThis function does not generate a change.\nFunction has_procedure(procedure)\nArguments    Argument Type Description     procedure str (required) Procedure name to check.    Return value Returns true if a procedure with a given name exists in the current scope and otherwise false.\nExample  This code shows an example use case of has_procedure():\n has_procedure('I_most_likely_do_not_exist');  Return value in JSON format\n false "},{"uri":"https://docs.thingsdb.net/v1/procedures-api/new_procedure/","title":"new_procedure","tags":[],"description":"","content":"Creates a new procedure to the @thingsdb or a @collection scope. The name of the procedure must be unique within the scope. The given closure will be copied to the procedure, so this is not a reference to the given closure.\nThis function generates a change.\nFunction new_procedure(name, closure)\nArguments    Argument Type Description     name str (required) Name of the new procedure.   closure closure (required) Closure which will be attached to the procedure.    Return value Returns the name of the new procedure. A lookup_err() is raised if the procedure already exists.\nExample  Create a new procedure add_one:\n // Create a new procedure `add_one` new_procedure('add_one', |x| { \u0026quot;Adds one to a given value\u0026quot;; x + 1; });  Return value in JSON format\n \u0026#34;add_one\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/procedures-api/procedure_doc/","title":"procedure_doc","tags":[],"description":"","content":"Returns the doc string for a given procedure. An empty string is returned if the procedure has no doc string.\nThis function does not generate a change.\nFunction procedure_doc(procedure)\nArguments    Argument Type Description     procedure str (required) Name of the procedure where to return the doc string for.    Return value Returns the doc string for a given procedure.\nExample  Create a new procedure add_one:\n new_procedure('add_one', |x| { \u0026quot;Adds one to a given value\u0026quot;; x + 1; }); // Return the doc string for procedure `add_one` procedure_doc('add_one');  Return value in JSON format\n \u0026#34;Adds one to a given value\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/procedures-api/procedure_info/","title":"procedure_info","tags":[],"description":"","content":"Returns information about a procedure.\n   Value Description     arguments Array with positional argument names.   created_at Time Stamp when the procedure is created.   definition Closure definition. (Only available with CHANGE privileges)   doc Doc string of the closure in the procedure.   name Name of the procedure.   with_side_effects Boolean value which indicates if this procedure has side effects and thus requires a change.    This function does not generate a change.\nFunction procedure_info(procedure)\nArguments    Argument Type Description     procedure str (required) Name of the procedure where to return the info for.    Return value Returns mpdata about a given procedure.\nExample  Create a new procedure add_one:\n new_procedure('add_one', |x| { \u0026quot;Adds one to a given value\u0026quot;; x + 1; }); // Return the doc string for procedure `add_one` procedure_info('add_one');  Return value in JSON format\n { \u0026#34;arguments\u0026#34;: [ \u0026#34;x\u0026#34; ], \u0026#34;created_at\u0026#34;: 1579175900, \u0026#34;definition\u0026#34;: \u0026#34;|x| {\\n \\\u0026#34;Adds one to a given value\\\u0026#34;;\\n x + 1;\\n}\u0026#34;, \u0026#34;doc\u0026#34;: \u0026#34;Adds one to a given value\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;add_one\u0026#34;, \u0026#34;with_side_effects\u0026#34;: false } "},{"uri":"https://docs.thingsdb.net/v1/procedures-api/procedures_info/","title":"procedures_info","tags":[],"description":"","content":"Returns procedure information about all procedures in the scope.\nSee the procedure_info() function documentation for an example of the exposed procedure information.\nThis function does not generate a change.\nFunction procedures_info()\nArguments None\nReturn value List with procedure mpdata about all procedures in the scope.\n"},{"uri":"https://docs.thingsdb.net/v1/procedures-api/rename_procedure/","title":"rename_procedure","tags":[],"description":"","content":"Rename a procedure.\nThis function generates a change.\nFunction rename_procedure(current_name, new_name)\nArguments    Argument Type Description     current_name str (required) Current procedure name.   new_name str (required) New name for the procedure.    Return value Returns nil when successful.\n"},{"uri":"https://docs.thingsdb.net/v1/procedures-api/run/","title":"run","tags":[],"description":"","content":"Run a procedure.\nIf the procedure name is not dynamic, you do need the run(..) function but instead you may call the procedure as a function call.\nThis function does not generate a change.\nFunction run(procedure, ...args)\nArguments    Argument Type Description     procedure str (required) Name of the procedure to run.   \u0026hellip;args any The arguments for the procedure. If more arguments are given than the procedure expects, the redundant arguments will be ignored. If too few arguments are given, then the remaining arguments will be set to nil.    Return value Returns the procedure response.\nExample  Example code using run:\n // create a greet procedure new_procedure('greet', |name| is_str(name) ? \u0026quot;Hello \u0026quot; + name : \u0026quot;Hello unnamed user!\u0026quot; ); // run `greet` with a given name greet_iris = run('greet', \u0026quot;Iris\u0026quot;); // equal to: greet(\u0026quot;Iris\u0026quot;); // run `greet` with nil greet_nil = run('greet', nil); // equal to: greet(); // return the greet response values [greet_iris, greet_nil];  Return value in JSON format\n [ \u0026#34;Hello Iris\u0026#34;, \u0026#34;Hello unnamed user!\u0026#34; ] "},{"uri":"https://docs.thingsdb.net/v1/modules/","title":"Modules","tags":[],"description":"","content":"Modules ThingsDB can be extended with modules. A module is a binary file or Python code which accepts input from ThingsDB and returns with a response. Each module will be started by ThingsDB as a separate process. For Python code this means that a Python interpreter is started for every module. Modules keep running as long as ThingsDB is alive, but may be restarted from within ThingsDB using restart_module() on a single node, or with deploy_module() and/or refresh_module() which can be used to restart/re-install a module on all nodes.\nSee the hello world module section below for a tutorial on how to create and use modules in ThingsDB.\nRelated functions    Function scope description     del_module @thingsdb Delete a module.   deploy_module @thingsdb Deploy code for a module.   refresh_module @thingsdb Refresh a module. This will stop, update (if required), and re-start a module.   has_module @thingsdb Check if a module exists.   module_info all scopes Show information about a module.   modules_info all scopes Show information about all module.   new_module @thingsdb Create a new module.   rename_module @thingsdb Rename an existing module.   restart_module @node Restart a module on a single node.   set_module_conf @thingsdb Change the module configuration.   set_module_scope @thingsdb Change the module scope.    Building modules Modules can be created in any language. For some languages there exists a library which makes building a module an easy task. Refer below to a list of libraries and examples:\n   Language Library Example     Go go-timod Demo (echo-reply example)   Python py-timod Demo (echo-reply example)    List of modules This is list with some tested modules. If you want you\u0026rsquo;re module in this list, feel free to modify the list and create a pull request!\n   Name Description     github.com/thingsdb/module-go-siridb For communicating with a SiriDB database.   github.com/thingsdb/module-go-requests For making HTTP requests.   github.com/thingsdb/module-py-demo Demo module using the Python language.   github.com/thingsdb/module-go-demo Demo module using the Go language.    "},{"uri":"https://docs.thingsdb.net/v1/modules/hello-world-module/","title":"Hello World Module","tags":[],"description":"","content":"In this section we will create and use a module to help you understand how a module can be used. Our module will be written in Python and will accept a name and returns with a greeting in either English or Dutch, depending on the module configuration.\nBefore we can use a Python module, make sure ThingsDB has a Python interpreter (at least Python 3.7) with the Python package py-timod installed.\nUse the following code in the @node scope to view which Python interpreter ThingsDB is using:\nnode_info().load().python_interpreter; // something like \u0026quot;/usr/bin/python\u0026quot; If you are able to open a terminal on the host where ThingsDB is running, you can check if py-timod is installed by staring the Python interpreter and import timod.\n$ /usr/bin/python Python 3.8.5 (default, May 27 2021, 13:30:53) [GCC 9.3.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; import timod \u0026gt;\u0026gt;\u0026gt; timod.__version__ \u0026#39;0.0.6\u0026#39; \u0026gt;\u0026gt;\u0026gt; If this is all set-up, we can create, deploy and test the module!\nThe rest of the ThingsDB code in this tutorial code must run in the @thingsdb scope!\nnew_module(\u0026quot;greeting\u0026quot;, \u0026quot;greeting.py\u0026quot;); // The module file must end with .py to tell // ThingsDB we are going to use a Python module. Hooray, the module is created!! ..but wait.. we don\u0026rsquo;t have the actual module yet. If we look at the module status, we should see that the module will not be started because obviously, the greeting.py file is missing.\nmodule_info('greeting').load().status; // \u0026quot;module not installed\u0026quot; Ok, let\u0026rsquo;s first create the required Python code. A basic module looks like the following:\nfrom timod import start_module, TiHandler class Handler(TiHandler): async def on_config(self, cfg): pass async def on_request(self, req): pass if __name__ == \u0026#39;__main__\u0026#39;: start_module(\u0026#39;greeting\u0026#39;, Handler()) This code contains a handler with two methods. The on_config(..) method will be called when ThingsDB starts a module and when the config is changed using the set_module_conf function. The on_request(..) method will be called from a future. A future is required to use the module.\nThe Python method start_module is used to start the module and accepts a name which we changed to greeting and an instance of a TiHandler class, just Handler() in our case.\nAs mentioned earlier, a module usually keeps running as long as ThingsDB is alive and may accept multiple request in parallel. Therefore, it is important to write code in both the on_config and on_request in a non-blocking way.\n We want our module to support both English and Dutch and therefore we are going to create a configuration function which accepts a language. We also use the __init__() function to initialize a default language.\nfrom timod import LookupError, ValueError ... def __init__(self): self.lang = \u0026#39;en\u0026#39; # set a default language async def on_config(self, cfg): try: lang = cfg[\u0026#39;lang\u0026#39;] except KeyError: raise LookupError(\u0026#39;`lang` is missing\u0026#39;) if lang not in [\u0026#39;nl\u0026#39;, \u0026#39;en\u0026#39;]: raise ValueError(\u0026#39;only `nl` and `en` are supported\u0026#39;) self.lang = lang Next, we write the on_request method:\nasync def on_request(self, req): try: name = cfg[\u0026#39;name\u0026#39;] except KeyError: raise LookupError(\u0026#39;`name` is missing\u0026#39;) return { \u0026#39;en\u0026#39;: \u0026#39;Hello {}, enjoy this day!!\u0026#39;.format(name), \u0026#39;nl\u0026#39;: \u0026#39;Hallo {}, geniet van deze dag!!\u0026#39;.format(name) }[self.lang] Our module is finished!\nNow we are going to deploy the code and we are going to use the deploy_module() function for this job.\nThe deploy_module() function accepts a module name and data. It writes the data (or code) to the attached file of the module and then (re-)loads the module on all the nodes. In our case, we keep it simple and just paste the code in a query as a plain string. When developing a real module you probably want to upload the file using a query argument.\n// Deploy the module code deploy_module('greeting', \u0026quot;from timod import start_module, TiHandler, LookupError, ValueError class Handler(TiHandler): def __init__(self): self.lang = 'en' # set a default language async def on_config(self, cfg): try: lang = cfg['lang'] except KeyError: raise LookupError('`lang` is missing') if lang not in ['nl', 'en']: raise ValueError('only `nl` and `en` are supported') self.lang = lang async def on_request(self, req): try: name = req['name'] except KeyError: raise LookupError('`name` is missing') return { 'en': 'Hello {}, enjoy this day!!'.format(name), 'nl': 'Hallo {}, geniet van deze dag!!'.format(name) }[self.lang] if __name__ == '__main__': start_module('greeting', Handler()) \u0026quot;); If everything is successful, the module status should now be changed to \u0026ldquo;running\u0026rdquo;:\nmodule_info('greeting').load().status; // \u0026quot;running\u0026quot; Ok, now let\u0026rsquo;s try to use the module:\nfuture({ module: 'greeting', name: 'Arthur Dent' }).then(|greet| greet); // \u0026quot;Hello Arthur Dent, enjoy this day!!\u0026quot; Or, when we configure the module language to nl (dutch):\n// Configure the module to use Dutch (nl) set_module_conf('greeting', {lang: 'nl'}); // The greet should now be in Dutch future({ module: 'greeting', name: 'Arthur Dent' }).then(|greet| greet); // \u0026quot;Hallo Arthur Dent, geniet van deze dag!!\u0026quot; "},{"uri":"https://docs.thingsdb.net/v1/modules/publish-a-module/","title":"Publish a module","tags":[],"description":"","content":"Modules can be published using a GitHub repository. A module repository mush at least contain a module.json file and the module file to start.\nmodule.json  Example of a module.json:\n { \u0026#34;doc\u0026#34;: \u0026#34;Demo module\u0026#34;, \u0026#34;version\u0026#34;: 11, \u0026#34;main\u0026#34;: \u0026#34;demo.py\u0026#34;, \u0026#34;defaults\u0026#34;: { \u0026#34;load\u0026#34;: true, \u0026#34;deep\u0026#34;: 0 }, \u0026#34;exposes\u0026#34;: { \u0026#34;ping\u0026#34;: { \u0026#34;defaults\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;ping\u0026#34; }, \u0026#34;argmap\u0026#34;: [] }, \u0026#34;msg\u0026#34;: { \u0026#34;argmap\u0026#34;: [\u0026#34;message\u0026#34;] } }, \u0026#34;requirements\u0026#34;: [ \u0026#34;py-timod\u0026#34; ] } Key: doc (optional) Type string or null.\nShould contain a description for the module or a link to the module documentation. If omitted or null, no documentation will be available. The documentation can be viewed with module_info(\u0026lt;name\u0026gt;).load().doc;\nKey: version (required) Type string or number.\nA string must by in the format of digits separated by dots. Examples of valid versions: \u0026quot;0.1.0\u0026quot;, \u0026quot;2.0\u0026quot;, \u0026quot;42\u0026quot;, or just numbers like 1, 3.2.\n Note: when a number is used, the number will be converted to a string in ThingsDB.\n Key: main (required) Type string or map.\nPath to the main file for the module. This should be either a binary file or a Python file (ending in.py). When using a Python file, this module will automatically be marked as a Python module and started using the Python interpreter.\nInstead of a string with a singe file, it is also possible to use an platform/architecture mapping for pointing to the correct binary. The key should consist of the platform and architecture combined with a slash (/). You can view which platform and architecture your ThingsDB node(s) are running on by using the following command in the @node scope:\nx = node_info().load(); `{x.platform}/{x.architecture}`; Example of a main key with some common platform/architecture mappings:\n\u0026#34;main\u0026#34;: { \u0026#34;linux/386\u0026#34;: \u0026#34;bin/demo_linux_386.bin\u0026#34;, \u0026#34;linux/amd64\u0026#34;: \u0026#34;bin/demo_linux_amd64.bin\u0026#34;, \u0026#34;linux/arm\u0026#34;: \u0026#34;bin/demo_linux_arm.bin\u0026#34;, \u0026#34;linux/arm64\u0026#34;: \u0026#34;bin/demo_linux_arm64.bin\u0026#34;, \u0026#34;freebsd/386\u0026#34;: \u0026#34;bin/demo_freebsd_386.bin\u0026#34;, \u0026#34;freebsd/amd64\u0026#34;: \u0026#34;bin/demo_freebsd_amd64.bin\u0026#34;, \u0026#34;freebsd/arm\u0026#34;: \u0026#34;bin/demo_freebsd_arm.bin\u0026#34;, \u0026#34;freebsd/arm64\u0026#34;: \u0026#34;bin/demo_freebsd_arm64.bin\u0026#34;, \u0026#34;darwin/amd64\u0026#34;: \u0026#34;bin/demo_darwin_amd64.bin\u0026#34; }  Note that we placed the binaries in a bin folder. This is important as large files should be in either in a bin/, blob/ or blobs/ folder in the root of the repository.\n Key: defaults (optional) Type map.\nIt is possible to provide some global defaults for this module. All the defaults which are configured at the root of the module will be used by all exposed functions and also when the module is used directly. It is possible to overwrite defaults with an exposed function and defaults may also be overruled when using the module.\nExample defaults:\n\u0026#34;defaults\u0026#34;: { \u0026#34;load\u0026#34;: true, \u0026#34;deep\u0026#34;: 0 } Key: includes (optional) Type array with string and/or map items.\nEach file in the includes array will be copied to the module folder. If files depend on a platform/architecture, a map might be used to copy only the applicable file(s). Like with main, large files should be placed in either a bin/, blob/ or blobs/ folder.\nKey: exposes (optional) Type map with a doc, defaults and/or argmap key. All keys are optional.\nExpose functions to ThingsDB which might be easy to use. An exposed function may have some default values and may also map positional arguments to key/value pairs. The latter can be done by using the optional argmap key.\nThe following keys can be used in an exposed function map:\n doc (optional): Documentation or link to documentation of the exposed function. defaults (optional): Defaults for this exposed function. Global defaults will be inherited but may be overwritten here. argmap (optional): Map positional arguments to key/value pairs.  For example: suppose we have a module demo which requires a message argument. To use this module we would have to call the module like this:\ndemo({message: \u0026#34;my beautiful message\u0026#34;}); Instead, we could expose a msg function and map the first argument to the message key.\n\u0026#34;exposes\u0026#34;: { \u0026#34;msg\u0026#34;: { \u0026#34;argmap\u0026#34;: [\u0026#34;message\u0026#34;] } } Now, we can write the following in ThingsDB:\ndemo.msg(\u0026#34;my beautiful message\u0026#34;); In combination with defaults it is possible to expose some nice and handy functions to ThingsDB. It is also possible to combine positional arguments with a (optional) thing as properties. This can be done with the special \u0026quot;*\u0026quot;. For example:\n{ \u0026#34;argmap\u0026#34;: [\u0026#34;message\u0026#34;, \u0026#34;*\u0026#34;] } The above will first capture the \u0026quot;message\u0026quot; as first argument, and accepts a second argument which must be nil or a thing.\nKey: requirements (optional) Type array of strings.\nThe requirements key can only be used in combination with Python modules. If omitted, a Python module will automatically look for a requirements.txt file in the root of your repository. If you do not want ThingsDB to perform that action, you may provide the requirements key with an empty array.  \u0026quot;requirements\u0026quot;: []. Each requirement should be formatted like pip is you expecting to, for example py-timod \u0026gt;= 0.0.6 is a valid requirement.\n"},{"uri":"https://docs.thingsdb.net/v1/listening/","title":"Listening","tags":[],"description":"","content":"Socket connections can listen to events from ThingsDB.\nThis chapter explains how and when ThingsDB sends events to socket connections. You only need to read this if you want to implement the event handling yourself. If possible, you should use a native client/connector and read the corresponding documentation on how to handle ThingsDB events as a client/connector most likely has out-of-the-box support for event handling.\nThere is no option to listing to event when using the HTTP API.\n The following events may be received by a client:\n   Event Description     NODE_STATUS (0) The connected node has changed its status.   WARNING (5) A warning message from ThingsDB.   ON_JOIN (6) Emitted when a room is joined.   ON_LEAVE (7) Emitted when leaving a room (only when explicitly leaving a room, not on a client disconnect).   ON_EMIT (8) a change is emitted to this room.   ON_DELETE (9) A joined room is removed from ThingsDB.     The number 0-9 represents the package type in a package header.\n Node status changes and warnings When connected and authenticated with a socket connection, you will automatically receive [node-status-changes]((./node-status) and warning-events.\nJoin rooms When joining one or more rooms, ThingsDB is guaranteed to return with the response on the join request before the on_join event(s) are being transmitted. The on_leave event is only transmitted when an explicit request is made to leave a room. Thus, this event is not triggered when a client disconnect, or when a node is shutting down.\n"},{"uri":"https://docs.thingsdb.net/v1/listening/node-status/","title":"node-status","tags":[],"description":"","content":"The body of a Node Status event contains both the node Id and status of the node.\nThe status string may be one of the following:\n   String Description     AWAY_SOON The node will enter away mode in a few seconds. Unless you really want to act on this state, this notification can be ignored.   AWAY The node is in away mode. Unless you really want to act on this state, this notification can be ignored.   READY The node is back to ready state. Unless you really want to act on this state, this notification can be ignored.   SHUTTING_DOWN The node will shutdown in a few seconds. This notification may be used to initiate a connection to another node.   OFFLINE The node will be off-line after this notification is received.     Example node-status event in JSON format:\n { \u0026#34;id\u0026#34;: 0, \u0026#34;status\u0026#34;: \u0026#34;READY\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/listening/on-join/","title":"on-join","tags":[],"description":"","content":"This event will be pushed when a room is joined.\n Example on-join event in JSON format:\n { \u0026#34;id\u0026#34;: 123, } "},{"uri":"https://docs.thingsdb.net/v1/listening/on-leave/","title":"on-leave","tags":[],"description":"","content":"This event will be pushed when a room is joined.\n Example on-join event in JSON format:\n { \u0026#34;id\u0026#34;: 123, } "},{"uri":"https://docs.thingsdb.net/v1/listening/on-emit/","title":"on-emit","tags":[],"description":"","content":"An emit event is triggered when a change is emitted using the emit(..) function on a room.\nThe event contains the room Id, a change name and arguments (args) as an array. If no arguments are attached to the event, args will be an empty array.\n Example on-emit event in JSON format:\n { \u0026#34;id\u0026#34;: 123, \u0026#34;event\u0026#34;: \u0026#34;my-event\u0026#34;, \u0026#34;args\u0026#34;: [] }  When using a thing in the argument(s), do not forget the deep level is one (1) by default so it might be required to use a higher value. (see the emit(..) function)\n "},{"uri":"https://docs.thingsdb.net/v1/listening/on-delete/","title":"on-delete","tags":[],"description":"","content":"A delete event will be pushed as soon as a joined room is removed from ThingsDB.\nIf this event is not received when expected, the reason might be that the room belonged to a thing that had a circular reference. In this case you have to wait until garbage collection has cleaned the thing from ThingsDB. This is done when the node is in away mode.\n  Example on-delete event in JSON format:\n { \u0026#34;id\u0026#34;: 42 } "},{"uri":"https://docs.thingsdb.net/v1/listening/warning/","title":"warning","tags":[],"description":"","content":"ThingsDB might send a warning events to a client. The warn_code can be used to determine the warning type.\nThingsDB might push one of the following waning codes:\n   Code Description     2 Message from the log() function.     Example warning event in JSON format:\n { \u0026#34;warn_code\u0026#34;: 2, \u0026#34;warn_msg\u0026#34;: \u0026#34;Test.., one, two, three\u0026#34; } "},{"uri":"https://docs.thingsdb.net/v1/errors/","title":"Errors","tags":[],"description":"","content":"ThingsDB uses the following error codes:\n   Error Code Meaning     cancelled_err -64 Operation is cancelled before completion.   operation_err -63 Operation is not valid in the current context.   num_arguments_err -62 Wrong number of arguments.   type_err -61 Object of inappropriate type.   value_err -60 Object has the right type but an inappropriate value.   overflow_err -59 Integer is too large to fit a 64 bit signed integer.   zero_div_err -58 Trying a division or modulo by zero.   max_quota_err -57 Some quota limit is reached.   auth_err -56 Wrong credentials or a request while the connection is not authenticated.   forbidden_err -55 You lack the privileges to do the request.   lookup_err -54 Requested resource not found or index out of range.   bad_data_err -53 Invalid data, for example an invalid data type used in a query.   syntax_err -52 Syntax error in the query.   node_err -51 At least one node has an issue while processing the request.   assert_err -50 Assertion statement has failed.    Internal errors Internal errors cannot be caught nor raised by using ThingsDB code. Range -49 .. -1 is reserved for internal errors.\n   Error Code Meaning     RESULT_TOO_LARGE -6 Result size limit is exceeded. See the configuration page to configure this limit.   REQUEST_TIMEOUT -5 Timeout during this request.   REQUEST_CANCEL -4 A request is cancelled.   WRITE_UV -3 Write to stream error.   MEMORY -2 Memory allocation error.   INTERNAL -1 General internal error.    Custom errors The range -127 .. -100 is attended to be used for custom error codes. See err(..) and alt_raise(..) for more information on how to use custom error codes.\n"},{"uri":"https://docs.thingsdb.net/v1/errors/assert_err/","title":"assert_err","tags":[],"description":"","content":"Returns an error when an assertion has failed.\nThis function does not generate a change.\nFunction assert_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows assert_err():\n assert_err();  Return value in JSON format\n \u0026#34;assertion statement has failed\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/auth_err/","title":"auth_err","tags":[],"description":"","content":"Returns an error when authentication has failed.\nThis function does not generate a change.\nFunction auth_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows auth_err():\n auth_err();  Return value in JSON format\n \u0026#34;authentication error\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/bad_data_err/","title":"bad_data_err","tags":[],"description":"","content":"Returns an error when a request is malformed.\nThis function does not generate a change.\nFunction bad_data_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows bad_data_err():\n bad_data_err();  Return value in JSON format\n \u0026#34;unable to handle request due to invalid data\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/forbidden_err/","title":"forbidden_err","tags":[],"description":"","content":"Returns an error when the client or user is missing the required privileges.\nThis function does not generate a change.\nFunction forbidden_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows forbidden_err():\n forbidden_err();  Return value in JSON format\n \u0026#34;forbidden (access denied)\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/lookup_err/","title":"lookup_err","tags":[],"description":"","content":"Returns an error when a requested resource is not found or when an index is out-of-range.\nThis function does not generate a change.\nFunction lookup_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows lookup_err():\n lookup_err();  Return value in JSON format\n \u0026#34;requested resource not found\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/max_quota_err/","title":"max_quota_err","tags":[],"description":"","content":"Returns an error when a quota limit is reached.\nThis function does not generate a change.\nFunction max_quota_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows max_quota_err():\n max_quota_err();  Return value in JSON format\n \u0026#34;max quota is reached\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/node_err/","title":"node_err","tags":[],"description":"","content":"Returns an error when a node was not able to handle the request.\nThis function does not generate a change.\nFunction node_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows node_err():\n node_err();  Return value in JSON format\n \u0026#34;node is temporary unable to handle the request\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/num_arguments_err/","title":"num_arguments_err","tags":[],"description":"","content":"Returns an error when a wrong number of arguments is given.\nThis function does not generate a change.\nFunction num_arguments_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows num_arguments_err():\n num_arguments_err();  Return value in JSON format\n \u0026#34;wrong number of arguments\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/operation_err/","title":"operation_err","tags":[],"description":"","content":"Returns an error when an operation is not valid within the current context.\nThis function does not generate a change.\nFunction operation_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows operation_err():\n operation_err();  Return value in JSON format\n \u0026#34;operation is not valid in the current context\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/overflow_err/","title":"overflow_err","tags":[],"description":"","content":"Returns an error when an attempt is made to create an integer value out of the supported 64Bit (signed) range.\nThis function does not generate a change.\nFunction overflow_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows overflow_err():\n overflow_err();  Return value in JSON format\n \u0026#34;integer overflow\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/syntax_err/","title":"syntax_err","tags":[],"description":"","content":"Returns an error when the given ThingsDB code contains a syntax error.\nThis function does not generate a change.\nFunction syntax_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows syntax_err():\n syntax_err();  Return value in JSON format\n \u0026#34;syntax error in query\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/type_err/","title":"type_err","tags":[],"description":"","content":"Returns an error when a given value is of the incorrect type.\nThis function does not generate a change.\nFunction type_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows type_err():\n type_err();  Return value in JSON format\n \u0026#34;object of inappropriate type\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/value_err/","title":"value_err","tags":[],"description":"","content":"Returns an error when a given value has the correct type but contains invalid data.\nThis function does not generate a change.\nFunction value_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows value_err():\n value_err();  Return value in JSON format\n \u0026#34;object has the right type but an inappropriate value\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/cancelled_err/","title":"cancelled_err","tags":[],"description":"","content":"Returns an error when an operation is cancelled before completion. Fox example by a time-out or stop of service.\nThis function does not generate a change.\nFunction cancelled_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows cancelled_err():\n cancelled_err();  Return value in JSON format\n \u0026#34;operation is cancelled before completion\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/errors/zero_div_err/","title":"zero_div_err","tags":[],"description":"","content":"Returns an error when an attempt is made to divide or take a modulo by zero.\nThis function does not generate a change.\nFunction zero_div_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value (in a client response, an error value will be packed as a string value with the error message).\nExample  This code shows zero_div_err():\n zero_div_err();  Return value in JSON format\n \u0026#34;division or module by zero\u0026#34; "},{"uri":"https://docs.thingsdb.net/v1/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://docs.thingsdb.net/v1/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://docs.thingsdb.net/v1/","title":"ThingsDB","tags":[],"description":"","content":"ThingsDB Cesbit, a Dutch software startup, is proud to announce ThingsDB to the world. ThingsDB is an object-oriented database with event-driven features that allows developers to store \u0026ldquo;things\u0026rdquo; in an intuitive way.\nGet it now Source code is available here at GitHub.\n"}]