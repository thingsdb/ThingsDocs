<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on ThingsDB documentation</title><link>https://docs.thingsdb.net/v1/overview/</link><description>Recent content in Overview on ThingsDB documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.thingsdb.net/v1/overview/index.xml" rel="self" type="application/rss+xml"/><item><title>Scopes</title><link>https://docs.thingsdb.net/v1/overview/scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/scopes/</guid><description>When sending a query, calling a procedure or subscribing to a thing, the request will require you to provide a scope. ThingsDB has three scope categories: @thingsdb, @node and @collection.
scope short description @thingsdb @t ThingsDB scope; Used for managing user accounts, collections and nodes. @node @n Current node scope; For node info and statistics from the connected node. @node:ID @n:ID Specific node scope; Get node info and statistics from a specific node Id (Id should be replaced with a node ID, for example 0).</description></item><item><title>Collections</title><link>https://docs.thingsdb.net/v1/overview/collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/collections/</guid><description>Each collection can be thought of as an object to which properties can be assigned. We call such an object a Thing. To access something in the collection, all you need to do, is to start with a . (dot), followed by a function or property name. Another way to access the collection is to use the collection&amp;rsquo;s Id. All things which are stored in ThingsDB get an unique Id. Since the collection root is also a Thing, it has its own id.</description></item><item><title>Names</title><link>https://docs.thingsdb.net/v1/overview/names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/names/</guid><description>The following rules apply to names in ThingsDB:
A name must start with a letter or underscore character A name cannot start with a number A name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Names are case-sensitive (thing, Thing and THING are three different names) Names are restricted to 255 characters</description></item><item><title>Properties</title><link>https://docs.thingsdb.net/v1/overview/properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/properties/</guid><description>Properties are key/value pairs which are assigned to a thing. The collection itself is also a thing to which properties can be assigned. For example: .answer = 42; creates a property answer with value 42 and the property will be assigned to the collection.
The key of a property must be of type string. If the key is not a valid name, then the property can be set by using the square bracket [.</description></item><item><title>Variable</title><link>https://docs.thingsdb.net/v1/overview/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/variable/</guid><description>Can be used to assign a value to a variable which can be used within a query.
Variable can be created with QUERY privileges since they do not modify the collection&amp;rsquo;s data.
To create a variable, just assign a value to a valid name.
Some valid examples:
_ = ... tmp = ... var1 = ... Variables created within a closure become local. They can only be used within the closure body.</description></item><item><title>Changes</title><link>https://docs.thingsdb.net/v1/overview/changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/changes/</guid><description>When a query uses a statement which makes a change to ThingsDB, then internally ThingsDB will create a change with a new change-Id to apply these transformations. Changes are applied in order on each node; so database consistency is guaranteed.
A single query might contain several statements and make many changes. All changes within a query will be grouped in a single change with the exception of future callbacks. Each future callback will get its own change-Id if a change is required (see the future type for more info on futures).</description></item><item><title>Slices</title><link>https://docs.thingsdb.net/v1/overview/slices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/slices/</guid><description>The following slice notation can be used:
list[start:stop:step] The start and stop value will default to nil and step has a default value of 1. For understanding slices it is important to remember that the :stop value represents the first value that is not in the selected slice. This means that the difference between stop and start is the number of selected items. (assuming that step is the default value 1)</description></item><item><title>Template Strings</title><link>https://docs.thingsdb.net/v1/overview/template-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/template-strings/</guid><description>Template strings allows you to use embedded ThingsDB expressions to generate a string constant. Template strings are enclosed by the backtick (`) character instead of double or single quotes.
Here is an example of how they may be used:
a = 6; b = 7; `The sum of {a} plus {b} is {a + b}.`; Result in JSON format:
&amp;#34;The sum of 6 plus 7 is 13.&amp;#34; If you wish to use the backtick character or curly brackets inside your string, then you need to escape those by using the same character twice.</description></item><item><title>Dictionary</title><link>https://docs.thingsdb.net/v1/overview/dictionary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/dictionary/</guid><description>The following list contains definitions specific for ThingsDB:
Keyword Definition Collection The collection is the root thing. Every collection has its own scope. Computed properties With computed properties it is possible to return computed values by wrapping a Type. Closure A Closure is a user defined method which can be saved. It can be used as a prepared piece of code or to consume items from a thing, list, tuple or set.</description></item><item><title>Type</title><link>https://docs.thingsdb.net/v1/overview/type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.thingsdb.net/v1/overview/type/</guid><description>Use a Type to create typed things.
A typed thing is a thing with pre-defined properties and/or methods with are defined by a Type. When creating a typed thing, all defined properties of the type are guaranteed to exist with a value matching the type definition.
Definable properties definition default description 'str' &amp;quot;&amp;quot; requires type str (values of type str should contain valid UTF-8 characters).</description></item></channel></rss>